// ==UserScript==
// @name         Magic Garden ModMenu 
// @namespace    Quinoa
// @version      1.4.5
// @match        https://1227719606223765687.discordsays.com/*
// @match        https://magiccircle.gg/r/*
// @match        https://magicgarden.gg/r/*
// @match        https://starweaver.org/r/*
// @run-at       document-start
// @all-frames   true
// @inject-into  page
// @downloadURL  https://github.com/Ariedam64/MagicGarden-modMenu/raw/refs/heads/main/quinoa-ws.min.user.js
// @updateURL    https://github.com/Ariedam64/MagicGarden-modMenu/raw/refs/heads/main/quinoa-ws.min.user.js
// ==/UserScript==
(() => {
  var __defProp = Object.defineProperty;
  var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
  var __publicField = (obj, key2, value) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value);

  // src/core/state.ts
  var NativeWS = window.WebSocket;
  var NativeWorker = window.Worker;
  var sockets = [];
  var quinoaWS = null;
  function setQWS(ws, why) {
    if (!quinoaWS) {
      quinoaWS = ws;
      try {
        console.log("[QuinoaWS] selected ->", why);
      } catch {
      }
    }
  }
  var workerFound = false;
  var Workers = typeof Set !== "undefined" ? /* @__PURE__ */ new Set() : {
    _a: [],
    add(w) {
      this._a.push(w);
    },
    delete(w) {
      const i = this._a.indexOf(w);
      if (i >= 0) this._a.splice(i, 1);
    },
    forEach(fn) {
      for (let i = 0; i < this._a.length; i++) fn(this._a[i]);
    }
  };
  function label(rs) {
    return ["CONNECTING", "OPEN", "CLOSING", "CLOSED"][rs ?? -1] || "none";
  }

  // src/core/parse.ts
  async function parseWSData(d) {
    try {
      if (typeof d === "string") return JSON.parse(d);
      if (d instanceof Blob) return JSON.parse(await d.text());
      if (d instanceof ArrayBuffer) return JSON.parse(new TextDecoder().decode(d));
    } catch {
    }
    return null;
  }

  // src/hooks/ws-hook.ts
  function installPageWebSocketHook() {
    function WrappedWebSocket(url, protocols) {
      const ws = protocols !== void 0 ? new NativeWS(url, protocols) : new NativeWS(url);
      sockets.push(ws);
      ws.addEventListener("open", () => {
        setTimeout(() => {
          if (ws.readyState === NativeWS.OPEN) setQWS(ws, "open-fallback");
        }, 800);
      });
      ws.addEventListener("message", async (ev) => {
        const j = await parseWSData(ev.data);
        if (!j) return;
        if (!window.quinoaWS && (j.type === "Welcome" || j.type === "Config" || j.fullState || j.config)) {
          setQWS(ws, "message:" + (j.type || "state"));
        }
      });
      const nativeSend = ws.send.bind(ws);
      ws.send = function(data) {
        try {
          let j = null;
          if (typeof data === "string") j = JSON.parse(data);
          else if (data instanceof ArrayBuffer) j = JSON.parse(new TextDecoder().decode(data));
          if (!window.quinoaWS && j && Array.isArray(j.scopePath) && j.scopePath.join("/") === "Room/Quinoa") {
            setQWS(ws, "send:" + j.type);
          }
        } catch {
        }
        return nativeSend(data);
      };
      return ws;
    }
    WrappedWebSocket.prototype = NativeWS.prototype;
    try {
      WrappedWebSocket.OPEN = NativeWS.OPEN;
    } catch {
    }
    try {
      WrappedWebSocket.CLOSED = NativeWS.CLOSED;
    } catch {
    }
    try {
      WrappedWebSocket.CLOSING = NativeWS.CLOSING;
    } catch {
    }
    try {
      WrappedWebSocket.CONNECTING = NativeWS.CONNECTING;
    } catch {
    }
    window.WebSocket = WrappedWebSocket;
  }

  // src/store/jotai.ts
  var _store = null;
  var _captureInProgress = false;
  var _captureError = null;
  var _lastCapturedVia = null;
  var getAtomCache = () => globalThis.jotaiAtomCache?.cache;
  function findStoreViaFiber() {
    const hook = globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook?.renderers?.size) return null;
    for (const [rid] of hook.renderers) {
      const roots = hook.getFiberRoots?.(rid);
      if (!roots) continue;
      for (const root of roots) {
        const seen = /* @__PURE__ */ new Set();
        const stack = [root.current];
        while (stack.length) {
          const f = stack.pop();
          if (!f || seen.has(f)) continue;
          seen.add(f);
          const v = f?.pendingProps?.value;
          if (v && typeof v.get === "function" && typeof v.set === "function" && typeof v.sub === "function") {
            _lastCapturedVia = "fiber";
            return v;
          }
          if (f.child) stack.push(f.child);
          if (f.sibling) stack.push(f.sibling);
          if (f.alternate) stack.push(f.alternate);
        }
      }
    }
    return null;
  }
  async function captureViaWriteOnce(timeoutMs = 5e3) {
    const cache = getAtomCache();
    if (!cache) {
      console.warn("[jotai-bridge] jotaiAtomCache.cache introuvable");
      throw new Error("jotaiAtomCache.cache introuvable");
    }
    let capturedGet = null;
    let capturedSet = null;
    const patched = [];
    const restorePatched = () => {
      for (const a of patched) {
        try {
          if (a.__origWrite) {
            a.write = a.__origWrite;
            delete a.__origWrite;
          }
        } catch {
        }
      }
    };
    for (const atom of cache.values()) {
      if (!atom || typeof atom.write !== "function" || atom.__origWrite) continue;
      const orig = atom.write;
      atom.__origWrite = orig;
      atom.write = function(get, set2, ...args) {
        if (!capturedSet) {
          capturedGet = get;
          capturedSet = set2;
          restorePatched();
        }
        return orig.call(this, get, set2, ...args);
      };
      patched.push(atom);
    }
    const wait = (ms) => new Promise((r) => setTimeout(r, ms));
    const t0 = Date.now();
    try {
      globalThis.dispatchEvent?.(new Event("visibilitychange"));
    } catch {
    }
    while (!capturedSet && Date.now() - t0 < timeoutMs) {
      await wait(50);
    }
    if (!capturedSet) {
      restorePatched();
      _lastCapturedVia = "polyfill";
      console.warn("[jotai-bridge] write-once: timeout \u2192 polyfill");
      return {
        get: () => {
          throw new Error("Store non captur\xE9: get indisponible");
        },
        set: () => {
          throw new Error("Store non captur\xE9: set indisponible");
        },
        sub: () => () => {
        },
        __polyfill: true
      };
    }
    _lastCapturedVia = "write";
    return {
      get: (a) => capturedGet(a),
      set: (a, v) => capturedSet(a, v),
      sub: (a, cb) => {
        let last;
        try {
          last = capturedGet(a);
        } catch {
        }
        const id = setInterval(() => {
          let curr;
          try {
            curr = capturedGet(a);
          } catch {
            return;
          }
          if (curr !== last) {
            last = curr;
            try {
              cb();
            } catch {
            }
          }
        }, 100);
        return () => clearInterval(id);
      }
    };
  }
  async function ensureStore() {
    if (_store && !_store.__polyfill) return _store;
    if (_captureInProgress) {
      const t0 = Date.now();
      const maxWait = 5500;
      while (!_store && Date.now() - t0 < maxWait) {
        await new Promise((r) => setTimeout(r, 25));
      }
      if (_store && !_store.__polyfill) return _store;
    }
    _captureInProgress = true;
    try {
      const viaFiber = findStoreViaFiber();
      if (viaFiber) {
        _store = viaFiber;
        return _store;
      }
      const viaWrite = await captureViaWriteOnce();
      _store = viaWrite;
      return _store;
    } catch (e) {
      _captureError = e;
      throw e;
    } finally {
      _captureInProgress = false;
    }
  }
  function isStoreCaptured() {
    return !!_store && !_store.__polyfill;
  }
  function getCapturedInfo() {
    return { via: _lastCapturedVia, polyfill: !!_store?.__polyfill, error: _captureError };
  }
  async function jGet(atom) {
    const s = await ensureStore();
    return s.get(atom);
  }
  async function jSet(atom, value) {
    const s = await ensureStore();
    await s.set(atom, value);
  }
  async function jSub(atom, cb) {
    const s = await ensureStore();
    return s.sub(atom, cb);
  }
  function findAtomsByLabel(regex) {
    const cache = getAtomCache();
    if (!cache) return [];
    const out = [];
    for (const a of cache.values()) {
      const label2 = a?.debugLabel || a?.label || "";
      if (regex.test(String(label2))) out.push(a);
    }
    return out;
  }
  function getAtomByLabel(label2) {
    const escape = (s) => s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    return findAtomsByLabel(new RegExp("^" + escape(label2) + "$"))[0] || null;
  }

  // src/core/webSocketBridge.ts
  function postAllToWorkers(msg) {
    if (Workers.forEach) Workers.forEach((w) => {
      try {
        w.postMessage(msg);
      } catch {
      }
    });
    else for (const w of Workers._a) {
      try {
        w.postMessage(msg);
      } catch {
      }
    }
  }
  function getPageWS() {
    if (quinoaWS && quinoaWS.readyState === NativeWS.OPEN) return quinoaWS;
    let any = null;
    if (sockets.find) any = sockets.find((s) => s.readyState === NativeWS.OPEN) || null;
    if (!any) {
      for (let i = 0; i < sockets.length; i++) if (sockets[i].readyState === NativeWS.OPEN) {
        any = sockets[i];
        break;
      }
    }
    if (any) {
      setQWS(any, "getPageWS");
      return any;
    }
    throw new Error("No page WebSocket open");
  }
  function sendToGame(payloadObj) {
    const msg = { scopePath: ["Room", "Quinoa"], ...payloadObj };
    try {
      const ws = getPageWS();
      ws.send(JSON.stringify(msg));
      return true;
    } catch {
      postAllToWorkers({ __QWS_CMD: "send", payload: JSON.stringify(msg) });
      return true;
    }
  }

  // src/store/api.ts
  async function ensureStore2() {
    try {
      await ensureStore();
    } catch {
    }
  }
  async function select(label2, fallback) {
    await ensureStore2();
    const atom = getAtomByLabel(label2);
    if (!atom) return fallback;
    try {
      return await jGet(atom);
    } catch {
      return fallback;
    }
  }
  async function subscribe(label2, cb) {
    await ensureStore2();
    const atom = getAtomByLabel(label2);
    if (!atom) return () => {
    };
    const unsub = await jSub(atom, async () => {
      try {
        cb(await jGet(atom));
      } catch {
      }
    });
    return unsub;
  }
  async function subscribeImmediate(label2, cb) {
    const first = await select(label2);
    if (first !== void 0) cb(first);
    return subscribe(label2, cb);
  }
  async function set(label2, value) {
    await ensureStore2();
    const atom = getAtomByLabel(label2);
    if (!atom) return;
    await jSet(atom, value);
  }
  var Store = { ensure: ensureStore2, select, subscribe, subscribeImmediate, set };

  // src/store/hub.ts
  function toPathArray(path) {
    if (!path) return [];
    return Array.isArray(path) ? path.slice() : path.split(".").map((k) => k.match(/^\d+$/) ? Number(k) : k);
  }
  function getAtPath(root, path) {
    const segs = toPathArray(path);
    let cur2 = root;
    for (const s of segs) {
      if (cur2 == null) return void 0;
      cur2 = cur2[s];
    }
    return cur2;
  }
  function setAtPath(root, path, nextValue) {
    const segs = toPathArray(path);
    if (!segs.length) return nextValue;
    const clone = Array.isArray(root) ? root.slice() : { ...root ?? {} };
    let cur2 = clone;
    for (let i = 0; i < segs.length - 1; i++) {
      const key2 = segs[i];
      const src = cur2[key2];
      const obj = typeof src === "object" && src !== null ? Array.isArray(src) ? src.slice() : { ...src } : {};
      cur2[key2] = obj;
      cur2 = obj;
    }
    cur2[segs[segs.length - 1]] = nextValue;
    return clone;
  }
  var eq = {
    shallow(a, b) {
      if (Object.is(a, b)) return true;
      if (!a || !b || typeof a !== "object" || typeof b !== "object") return false;
      const ka = Object.keys(a);
      const kb = Object.keys(b);
      if (ka.length !== kb.length) return false;
      for (const k of ka) if (!Object.is(a[k], b[k])) return false;
      return true;
    },
    idSet(a, b) {
      if (a === b) return true;
      if (!Array.isArray(a) || !Array.isArray(b) || a.length !== b.length) return false;
      const sa = new Set(a);
      for (const id of b) if (!sa.has(id)) return false;
      return true;
    }
  };
  function makeView(sourceLabel, opts = {}) {
    const { path, write = "replace" } = opts;
    async function get() {
      const src = await Store.select(sourceLabel);
      return path ? getAtPath(src, path) : src;
    }
    async function set2(next) {
      if (typeof write === "function") {
        const prev2 = await Store.select(sourceLabel);
        const raw2 = write(next, prev2);
        return Store.set(sourceLabel, raw2);
      }
      const prev = await Store.select(sourceLabel);
      const raw = path ? setAtPath(prev, path, next) : next;
      if (write === "merge-shallow" && !path && prev && typeof prev === "object" && typeof next === "object") {
        return Store.set(sourceLabel, { ...prev, ...next });
      }
      return Store.set(sourceLabel, raw);
    }
    async function update(fn) {
      const prev = await get();
      const next = fn(prev);
      await set2(next);
      return next;
    }
    async function onChange(cb, isEqual = Object.is) {
      let prev;
      return Store.subscribe(sourceLabel, (src) => {
        const v = path ? getAtPath(src, path) : src;
        if (typeof prev === "undefined" || !isEqual(prev, v)) {
          const p = prev;
          prev = v;
          cb(v, p);
        }
      });
    }
    async function onChangeNow(cb, isEqual = Object.is) {
      let prev;
      return Store.subscribeImmediate(sourceLabel, (src) => {
        const v = path ? getAtPath(src, path) : src;
        if (typeof prev === "undefined" || !isEqual(prev, v)) {
          const p = prev;
          prev = v;
          cb(v, p);
        }
      });
    }
    function asSignature(opts2) {
      return makeSignatureChannel(sourceLabel, path, opts2);
    }
    return { label: sourceLabel + (path ? ":" + toPathArray(path).join(".") : ""), get, set: set2, update, onChange, onChangeNow, asSignature };
  }
  function stablePick(obj, fields) {
    const out = {};
    for (const f of fields) {
      const v = getAtPath(obj, f.includes(".") ? f : [f]);
      out[f] = v;
    }
    try {
      return JSON.stringify(out);
    } catch {
      return String(out);
    }
  }
  function makeSignatureChannel(sourceLabel, path, opts) {
    const mode = opts.mode ?? "auto";
    function computeSig(whole) {
      const base = whole;
      const value = path ? getAtPath(base, path) : base;
      const sig = /* @__PURE__ */ new Map();
      if (value == null) return { sig, keys: [] };
      if ((mode === "array" || mode === "auto" && Array.isArray(value)) && Array.isArray(value)) {
        for (let i = 0; i < value.length; i++) {
          const item = value[i];
          const key2 = opts.key ? opts.key(item, i, whole) : i;
          const s = opts.sig ? opts.sig(item, i, whole) : opts.fields ? stablePick(item, opts.fields) : (() => {
            try {
              return JSON.stringify(item);
            } catch {
              return String(item);
            }
          })();
          sig.set(key2, s);
        }
      } else {
        for (const [k, item] of Object.entries(value)) {
          const key2 = opts.key ? opts.key(item, k, whole) : k;
          const s = opts.sig ? opts.sig(item, k, whole) : opts.fields ? stablePick(item, opts.fields) : (() => {
            try {
              return JSON.stringify(item);
            } catch {
              return String(item);
            }
          })();
          sig.set(key2, s);
        }
      }
      return { sig, keys: Array.from(sig.keys()) };
    }
    function mapEqual(a, b) {
      if (a === b) return true;
      if (!a || !b || a.size !== b.size) return false;
      for (const [k, v] of a) if (b.get(k) !== v) return false;
      return true;
    }
    async function sub(cb) {
      let prevSig = null;
      return Store.subscribeImmediate(sourceLabel, (src) => {
        const whole = path ? getAtPath(src, path) : src;
        const { sig } = computeSig(whole);
        if (!mapEqual(prevSig, sig)) {
          const allKeys = /* @__PURE__ */ new Set([
            ...prevSig ? Array.from(prevSig.keys()) : [],
            ...Array.from(sig.keys())
          ]);
          const changed = [];
          for (const k of allKeys) if ((prevSig?.get(k) ?? "__NONE__") !== (sig.get(k) ?? "__NONE__")) changed.push(k);
          prevSig = sig;
          cb({ value: whole, changedKeys: changed });
        }
      });
    }
    async function subKey(key2, cb) {
      let last = "__INIT__";
      return sub(({ value, changedKeys }) => {
        if (changedKeys.includes(key2)) cb({ value });
      });
    }
    async function subKeys(keys, cb) {
      const wanted = new Set(keys);
      return sub(({ value, changedKeys }) => {
        const hit = changedKeys.filter((k) => wanted.has(k));
        if (hit.length) cb({ value, changedKeys: hit });
      });
    }
    return { sub, subKey, subKeys };
  }
  var HubEq = eq;
  function makeAtom(label2) {
    return makeView(label2);
  }

  // src/store/atoms.ts
  var position = makeAtom("positionAtom");
  var state = makeAtom("stateAtom");
  var map = makeAtom("mapAtom");
  var myData = makeAtom("myDataAtom");
  var myInventory = makeAtom("myInventoryAtom");
  var myCropInventory = makeAtom("myCropInventoryAtom");
  var mySeedInventory = makeAtom("mySeedInventoryAtom");
  var myToolInventory = makeAtom("myToolInventoryAtom");
  var myPetInfos = makeAtom("myPetInfosAtom");
  var myPetSlotInfos = makeAtom("myPetSlotInfosAtom");
  var shops = makeAtom("shopsAtom");
  var myShopPurchases = makeAtom("myShopPurchasesAtom");
  var numPlayers = makeAtom("numPlayersAtom");
  var totalCropSellPrice = makeAtom("totalCropSellPriceAtom");
  var myValidatedSelectedItemIndex = makeAtom("myValidatedSelectedItemIndexAtom");
  var setSelectedIndexToEnd = makeAtom("setSelectedIndexToEndAtom");
  var mySelectedItemName = makeAtom("mySelectedItemNameAtom");
  var myPossiblyNoLongerValidSelectedItemIndex = makeAtom("myPossiblyNoLongerValidSelectedItemIndexAtom");
  var myCurrentGardenObject = makeAtom("myCurrentGardenObjectAtom");
  var myCurrentSortedGrowSlotIndices = makeAtom("myCurrentSortedGrowSlotIndicesAtom");
  var myCurrentGrowSlotIndex = makeAtom("myCurrentGrowSlotIndexAtom");
  var activeModal = makeAtom("activeModalAtom");
  var garden = makeView("myDataAtom", { path: "garden" });
  var gardenTileObjects = makeView("myDataAtom", { path: "garden.tileObjects" });
  var favoriteIds = makeView("myInventoryAtom", { path: "favoritedItemIds" });
  var stateChild = makeView("stateAtom", { path: "child" });
  var stateChildData = makeView("stateAtom", { path: "child.data" });
  var stateShops = makeView("stateAtom", { path: "child.data.shops" });
  var stateUserSlots = makeView("stateAtom", { path: "child.data.userSlots" });
  var statePlayers = makeView("stateAtom", { path: "data.players" });
  function slotSig(o) {
    if (!o) return "\u2205";
    return [
      o.objectType ?? o.type ?? "",
      o.species ?? o.seedSpecies ?? o.plantSpecies ?? o.eggId ?? o.decorId ?? "",
      o.plantedAt ?? o.startTime ?? 0,
      o.maturedAt ?? o.endTime ?? 0
    ].join("|");
  }
  var GardenSlotsSig = gardenTileObjects.asSignature({
    mode: "record",
    key: (_item, key2) => Number(key2),
    sig: (item) => slotSig(item)
  });
  function activePetSig(p) {
    const s = p?.slot ?? {};
    const muts = Array.isArray(s.mutations) ? s.mutations.slice().sort().join(",") : "";
    const ab = Array.isArray(s.abilities) ? s.abilities.slice().sort().join(",") : "";
    const name = s.name ?? "";
    const species = s.petSpecies ?? "";
    const xp = Number.isFinite(s.xp) ? Math.round(s.xp) : 0;
    const hunger = Number.isFinite(s.hunger) ? Math.round(s.hunger * 1e3) : 0;
    const scale = Number.isFinite(s.targetScale) ? Math.round(s.targetScale * 1e3) : 0;
    const x = Number.isFinite(p?.position?.x) ? Math.round(p.position.x) : 0;
    const y = Number.isFinite(p?.position?.y) ? Math.round(p.position.y) : 0;
    return `${species}|${name}|xp:${xp}|hg:${hunger}|sc:${scale}|m:${muts}|a:${ab}|pos:${x},${y}`;
  }
  function activePetStableSig(p) {
    const s = p?.slot ?? {};
    const muts = Array.isArray(s.mutations) ? s.mutations.slice().sort().join(",") : "";
    const ab = Array.isArray(s.abilities) ? s.abilities.slice().sort().join(",") : "";
    const name = s.name ?? "";
    const species = s.petSpecies ?? "";
    const scale = Number.isFinite(s.targetScale) ? Math.round(s.targetScale * 1e3) : 0;
    return `${species}|${name}|sc:${scale}|m:${muts}|a:${ab}`;
  }
  var PetsByIdSig = myPetInfos.asSignature({
    mode: "array",
    key: (p) => String(p?.slot?.id ?? ""),
    sig: (p) => activePetSig(p)
  });
  var PetsByIdStableSig = myPetInfos.asSignature({
    mode: "array",
    key: (p) => String(p?.slot?.id ?? ""),
    sig: (p) => activePetStableSig(p)
  });
  var FavoriteIdsSig = favoriteIds.asSignature({
    mode: "array",
    key: (id) => String(id),
    sig: () => "1"
  });
  var Atoms = {
    ui: { activeModal },
    server: { numPlayers },
    player: { position },
    root: { state, map },
    data: {
      myData,
      garden,
      gardenTileObjects,
      myCurrentGardenObject,
      myCurrentSortedGrowSlotIndices,
      myCurrentGrowSlotIndex
    },
    inventory: {
      myInventory,
      myCropInventory,
      mySeedInventory,
      myToolInventory,
      favoriteIds,
      mySelectedItemName,
      myPossiblyNoLongerValidSelectedItemIndex,
      myValidatedSelectedItemIndex,
      setSelectedIndexToEnd
    },
    pets: {
      myPetInfos,
      myPetSlotInfos
    },
    shop: {
      shops,
      myShopPurchases,
      totalCropSellPrice
    }
  };
  function onFavoriteIds(cb) {
    return favoriteIds.onChange((next) => cb(Array.isArray(next) ? next : []), HubEq.idSet);
  }
  async function onFavoriteIdsNow(cb) {
    cb(Array.isArray(await favoriteIds.get()) ? await favoriteIds.get() : []);
    return onFavoriteIds(cb);
  }
  function activePetsStructuralEq(a, b) {
    const snap = (st) => {
      const m = /* @__PURE__ */ new Map();
      const arr = Array.isArray(st) ? st : [];
      for (const it of arr) {
        const id = String(it?.slot?.id ?? "");
        if (id) m.set(id, activePetStableSig(it));
      }
      return m;
    };
    const A = snap(a);
    const B = snap(b);
    if (A.size !== B.size) return false;
    for (const [k, v] of A) if (B.get(k) !== v) return false;
    return true;
  }
  async function onActivePetsStructuralChangeNow(cb) {
    cb(await myPetInfos.get());
    return myPetInfos.onChange(cb, activePetsStructuralEq);
  }
  async function getFavoriteIdSet() {
    const arr = await favoriteIds.get();
    return new Set(Array.isArray(arr) ? arr : []);
  }

  // src/services/player.ts
  function slotSig2(o) {
    if (!o) return "\u2205";
    return [
      o.objectType ?? o.type ?? "",
      o.species ?? o.seedSpecies ?? o.plantSpecies ?? o.eggId ?? o.decorId ?? "",
      o.plantedAt ?? o.startTime ?? 0,
      o.maturedAt ?? o.endTime ?? 0
    ].join("|");
  }
  function diffGarden(prev, next) {
    const p = prev?.tileObjects ?? {};
    const n = next?.tileObjects ?? {};
    const added = [];
    const updated = [];
    const removed = [];
    const changes = [];
    const seen = /* @__PURE__ */ new Set();
    for (const k of Object.keys(n)) {
      seen.add(k);
      if (!(k in p)) {
        added.push(+k);
        changes.push({ kind: "added", slot: +k, next: n[k] });
      } else if (slotSig2(p[k]) !== slotSig2(n[k])) {
        updated.push(+k);
        changes.push({ kind: "updated", slot: +k, prev: p[k], next: n[k] });
      }
    }
    for (const k of Object.keys(p)) {
      if (!seen.has(k)) {
        removed.push(+k);
        changes.push({ kind: "removed", slot: +k, prev: p[k] });
      }
    }
    return { added, updated, removed, changes };
  }
  function petSig(p) {
    const s = p?.slot ?? {};
    const muts = Array.isArray(s.mutations) ? s.mutations.slice().sort().join(",") : "";
    const ab = Array.isArray(s.abilities) ? s.abilities.slice().sort().join(",") : "";
    const name = s.name ?? "";
    const species = s.petSpecies ?? "";
    const xp = Number.isFinite(s.xp) ? Math.round(s.xp) : 0;
    const hunger = Number.isFinite(s.hunger) ? Math.round(s.hunger * 1e3) : 0;
    const scale = Number.isFinite(s.targetScale) ? Math.round(s.targetScale * 1e3) : 0;
    const x = Number.isFinite(p?.position?.x) ? Math.round(p.position.x) : 0;
    const y = Number.isFinite(p?.position?.y) ? Math.round(p.position.y) : 0;
    return `${species}|${name}|xp:${xp}|hg:${hunger}|sc:${scale}|m:${muts}|a:${ab}|pos:${x},${y}`;
  }
  function snapshotPets(state2) {
    const snap = /* @__PURE__ */ new Map();
    const arr = Array.isArray(state2) ? state2 : [];
    for (const it of arr) {
      const id = String(it?.slot?.id ?? "");
      if (!id) continue;
      snap.set(id, petSig(it));
    }
    return snap;
  }
  function diffPetsSnapshot(prev, next) {
    const added = [];
    const updated = [];
    const removed = [];
    const changes = [];
    for (const [id, sig] of next) {
      if (!prev.has(id)) {
        added.push(id);
        changes.push({ kind: "added", id });
      } else if (prev.get(id) !== sig) {
        updated.push(id);
        changes.push({ kind: "updated", id });
      }
    }
    for (const id of prev.keys()) {
      if (!next.has(id)) {
        removed.push(id);
        changes.push({ kind: "removed", id });
      }
    }
    return { added, updated, removed, changes };
  }
  function cropSig(it) {
    const muts = Array.isArray(it.mutations) ? it.mutations.slice().sort().join(",") : "";
    const scale = Number.isFinite(it.scale) ? Math.round(it.scale * 1e3) : 0;
    return `${it.species ?? ""}|${it.itemType ?? ""}|${scale}|${muts}`;
  }
  function snapshotInventory(inv) {
    const snap = /* @__PURE__ */ new Map();
    const arr = Array.isArray(inv) ? inv : [];
    for (const it of arr) {
      const id = String(it?.id ?? "");
      if (!id) continue;
      snap.set(id, cropSig(it));
    }
    return snap;
  }
  function diffCropInventorySnapshot(prev, next) {
    const added = [];
    const updated = [];
    const removed = [];
    const changes = [];
    for (const [id, sig] of next) {
      if (!prev.has(id)) {
        added.push(id);
        changes.push({ kind: "added", key: id });
      } else if (prev.get(id) !== sig) {
        updated.push(id);
        changes.push({ kind: "updated", key: id });
      }
    }
    for (const id of prev.keys()) {
      if (!next.has(id)) {
        removed.push(id);
        changes.push({ kind: "removed", key: id });
      }
    }
    return { added, updated, removed, changes };
  }
  var PlayerService = {
    /* ------------------------- Position / Déplacement ------------------------- */
    getPosition() {
      return Atoms.player.position.get();
    },
    onPosition(cb) {
      return Atoms.player.position.onChange(cb);
    },
    onPositionNow(cb) {
      return Atoms.player.position.onChangeNow(cb);
    },
    async setPosition(x, y) {
      await Atoms.player.position.set({ x, y });
    },
    async teleport(x, y) {
      try {
        await this.setPosition(x, y);
      } catch {
      }
      try {
        sendToGame({ type: "Teleport", position: { x, y } });
      } catch {
      }
    },
    async move(x, y) {
      try {
        await this.setPosition(x, y);
      } catch {
      }
      try {
        sendToGame({ type: "PlayerPosition", position: { x, y } });
      } catch {
      }
    },
    /* ------------------------------ Actions jeu ------------------------------ */
    async plantSeed(slot, species) {
      try {
        sendToGame({ type: "PlantSeed", slot, species });
      } catch {
      }
    },
    async sellAllCrops() {
      try {
        sendToGame({ type: "SellAllCrops" });
      } catch {
      }
    },
    async sellPet(itemId) {
      try {
        sendToGame({ type: "SellPet", itemId });
      } catch {
      }
    },
    async waterPlant(slot) {
      try {
        sendToGame({ type: "WaterPlant", slot });
      } catch {
      }
    },
    async setSelectedItem(itemIndex) {
      try {
        sendToGame({ type: "SetSelectedItem", itemIndex });
      } catch {
      }
    },
    async pickupObject() {
      try {
        sendToGame({ type: "PickupObject" });
      } catch {
      }
    },
    async dropObject() {
      try {
        sendToGame({ type: "DropObject" });
      } catch {
      }
    },
    async harvestCrop(slot, slotsIndex) {
      try {
        sendToGame({ type: "HarvestCrop", slot, slotsIndex });
      } catch {
      }
    },
    async feedPet(petItemId, cropItemId) {
      try {
        sendToGame({ type: "FeedPet", petItemId, cropItemId });
      } catch {
      }
    },
    async hatchEgg(slot) {
      try {
        sendToGame({ type: "HatchEgg", slot });
      } catch {
      }
    },
    async placeDecor(tileType, localTileIndex, decorId) {
      try {
        sendToGame({ type: "PlaceDecor", tileType, localTileIndex, decorId });
      } catch {
      }
    },
    async swapPet(petSlotId, petInventoryId) {
      try {
        sendToGame({ type: "SwapPet", petSlotId, petInventoryId });
      } catch {
      }
    },
    async placePet(itemId, position2, tileType, localTileIndex) {
      try {
        sendToGame({ type: "PlacePet", itemId, position: position2, tileType, localTileIndex });
      } catch {
      }
    },
    async storePet(itemId) {
      try {
        sendToGame({ type: "StorePet", itemId });
      } catch {
      }
    },
    async wish(itemId) {
      try {
        sendToGame({ type: "Wish", itemId });
      } catch {
      }
    },
    /* -------------------------------- Favorites ------------------------------ */
    async toggleFavoriteItem(itemId) {
      try {
        sendToGame({ type: "ToggleFavoriteItem", itemId });
      } catch {
      }
    },
    async getFavoriteIds() {
      const ids = await Atoms.inventory.favoriteIds.get();
      return Array.isArray(ids) ? ids.slice() : [];
    },
    async getFavoriteIdSet() {
      return getFavoriteIdSet();
    },
    async isFavoriteItem(itemId) {
      const set2 = await getFavoriteIdSet();
      return set2.has(itemId);
    },
    async ensureFavoriteItem(itemId, shouldBeFavorite) {
      const cur2 = await this.isFavoriteItem(itemId);
      if (cur2 !== shouldBeFavorite) {
        await this.toggleFavoriteItem(itemId);
        return shouldBeFavorite;
      }
      return cur2;
    },
    async ensureFavorites(items, shouldBeFavorite) {
      const set2 = await getFavoriteIdSet();
      for (const id of items) {
        const cur2 = set2.has(id);
        if (cur2 !== shouldBeFavorite) {
          try {
            await this.toggleFavoriteItem(id);
          } catch {
          }
        }
      }
    },
    onFavoriteIdsChange(cb) {
      return onFavoriteIds((ids) => cb(Array.isArray(ids) ? ids : []));
    },
    async onFavoriteIdsChangeNow(cb) {
      return onFavoriteIdsNow((ids) => cb(Array.isArray(ids) ? ids : []));
    },
    onFavoriteSetChange(cb) {
      return onFavoriteIds((ids) => cb(new Set(Array.isArray(ids) ? ids : [])));
    },
    async onFavoriteSetChangeNow(cb) {
      const cur2 = await getFavoriteIdSet();
      cb(cur2);
      return onFavoriteIds((ids) => cb(new Set(Array.isArray(ids) ? ids : [])));
    },
    /* --------------------------------- Garden -------------------------------- */
    async getGardenState() {
      return await Atoms.data.garden.get() ?? null;
    },
    onGardenChange(cb) {
      return Atoms.data.garden.onChange(cb);
    },
    onGardenChangeNow(cb) {
      return Atoms.data.garden.onChangeNow(cb);
    },
    onGardenDiff(cb) {
      let prev = null;
      return Atoms.data.garden.onChange((g) => {
        const d = diffGarden(prev, g);
        if (d.added.length || d.updated.length || d.removed.length || g !== prev) {
          prev = g;
          cb(g, d);
        }
      });
    },
    async onGardenDiffNow(cb) {
      let prev = await Atoms.data.garden.get() ?? null;
      cb(prev, diffGarden(null, prev));
      return Atoms.data.garden.onChange((next) => {
        const d = diffGarden(prev, next);
        if (d.added.length || d.updated.length || d.removed.length) {
          prev = next;
          cb(next, d);
        }
      });
    },
    /* ------------------------------------ Pets ------------------------------------ */
    async getPets() {
      const arr = await Atoms.pets.myPetInfos.get();
      return Array.isArray(arr) ? arr : null;
    },
    onPetsChange(cb) {
      let prev = null;
      return Atoms.pets.myPetInfos.onChange((next) => {
        if (next !== prev) {
          prev = next;
          cb(prev);
        }
      });
    },
    async onPetsChangeNow(cb) {
      let prev = await this.getPets();
      cb(prev);
      return Atoms.pets.myPetInfos.onChange((next) => {
        if (next !== prev) {
          prev = next;
          cb(prev);
        }
      });
    },
    onPetsDiff(cb) {
      let prevSnap = snapshotPets(null);
      return Atoms.pets.myPetInfos.onChange((state2) => {
        const nextSnap = snapshotPets(state2);
        const d = diffPetsSnapshot(prevSnap, nextSnap);
        if (d.added.length || d.updated.length || d.removed.length) {
          cb(state2, d);
          prevSnap = nextSnap;
        }
      });
    },
    async onPetsDiffNow(cb) {
      let cur2 = await this.getPets();
      let prevSnap = snapshotPets(null);
      let nextSnap = snapshotPets(cur2);
      const first = diffPetsSnapshot(prevSnap, nextSnap);
      cb(cur2, first);
      prevSnap = nextSnap;
      return Atoms.pets.myPetInfos.onChange((state2) => {
        nextSnap = snapshotPets(state2);
        const d = diffPetsSnapshot(prevSnap, nextSnap);
        if (d.added.length || d.updated.length || d.removed.length) {
          cb(state2, d);
          prevSnap = nextSnap;
        }
      });
    },
    /* ------------------------- Crop Inventory (crops) ------------------------- */
    async getCropInventoryState() {
      return Atoms.inventory.myCropInventory.get();
    },
    onCropInventoryChange(cb) {
      let prev = null;
      return Atoms.inventory.myCropInventory.onChange((inv) => {
        if (inv !== prev) {
          prev = inv;
          cb(inv);
        }
      });
    },
    async onCropInventoryChangeNow(cb) {
      let prev = await Atoms.inventory.myCropInventory.get();
      cb(prev);
      return Atoms.inventory.myCropInventory.onChange((inv) => {
        if (inv !== prev) {
          prev = inv;
          cb(inv);
        }
      });
    },
    onCropInventoryDiff(cb) {
      let prevSnap = snapshotInventory(null);
      return Atoms.inventory.myCropInventory.onChange((inv) => {
        const nextSnap = snapshotInventory(inv);
        const d = diffCropInventorySnapshot(prevSnap, nextSnap);
        if (d.added.length || d.updated.length || d.removed.length) {
          cb(inv, d);
          prevSnap = nextSnap;
        }
      });
    },
    async onCropInventoryDiffNow(cb) {
      let cur2 = await Atoms.inventory.myCropInventory.get();
      let prevSnap = snapshotInventory(null);
      let nextSnap = snapshotInventory(cur2);
      const firstDiff = diffCropInventorySnapshot(prevSnap, nextSnap);
      cb(cur2, firstDiff);
      prevSnap = nextSnap;
      return Atoms.inventory.myCropInventory.onChange((inv) => {
        nextSnap = snapshotInventory(inv);
        const d = diffCropInventorySnapshot(prevSnap, nextSnap);
        if (d.added.length || d.updated.length || d.removed.length) {
          cb(inv, d);
          prevSnap = nextSnap;
        }
      });
    },
    /* --------------------------- Players in room --------------------------- */
    async getNumPlayers() {
      const n = await Atoms.server.numPlayers.get();
      return typeof n === "number" ? n : 0;
    },
    onNumPlayersChange(cb) {
      let prev = void 0;
      return Atoms.server.numPlayers.onChange((n) => {
        if (n !== prev) {
          prev = n;
          cb(n);
        }
      });
    },
    async onNumPlayersChangeNow(cb) {
      let prev = await this.getNumPlayers();
      cb(prev);
      return Atoms.server.numPlayers.onChange((n) => {
        if (n !== prev) {
          prev = n;
          cb(n);
        }
      });
    }
  };

  // src/data/hardcoded-data.clean.js
  var rarity = {
    Common: "Common",
    Uncommon: "Uncommon",
    Rare: "Rare",
    Legendary: "Legendary",
    Mythic: "Mythical",
    Divine: "Divine",
    Celestial: "Celestial"
  };
  var harvestType = {
    Single: "Single",
    Multiple: "Multiple"
  };
  var tileRefsPlants = {
    Empty: 0,
    DirtPatch: 1,
    SproutFlower: 2,
    SproutVegetable: 3,
    SproutFruit: 4,
    SproutVine: 5,
    StemFlower: 6,
    Trellis: 7,
    Daffodil: 11,
    Tulip: 12,
    Sunflower: 13,
    Lily: 14,
    Starweaver: 15,
    AloePlant: 17,
    Aloe: 18,
    Blueberry: 21,
    Banana: 22,
    Strawberry: 23,
    Mango: 24,
    Grape: 25,
    Watermelon: 26,
    Lemon: 27,
    Apple: 28,
    Pepper: 31,
    Tomato: 32,
    BabyCarrot: 33,
    Carrot: 34,
    Pumpkin: 35,
    Corn: 36,
    PalmTreeTop: 39,
    BushyTree: 40,
    Coconut: 41,
    MushroomPlant: 42,
    PassionFruit: 43,
    DragonFruit: 44,
    Lychee: 45,
    Mushroom: 46,
    BurrosTail: 47,
    Cacao: 48,
    Echeveria: 49,
    // NEW Celestial crops
    DawnCelestialCrop: 51,
    // Sunbriar Bulb
    MoonCelestialCrop: 52
    // Mooncatcher Bulb
  };
  var tileRefsTallPlants = {
    Empty: 0,
    Bamboo: 1,
    PalmTree: 2,
    // NEW Dawn Celestial stack
    DawnCelestialPlatform: 3,
    DawnCelestialPlant: 4,
    DawnCelestialPlantActive: 5,
    DawnCelestialPlatformTopmostLayer: 6,
    Cactus: 7,
    Tree: 8,
    // NEW Moon Celestial stack
    MoonCelestialPlatform: 9,
    MoonCelestialPlant: 10,
    MoonCelestialPlantActive: 11,
    // Starweaver
    StarweaverPlatform: 13,
    StarweaverPlant: 14
  };
  var tileRefsSeeds = {
    Empty: 0,
    Daffodil: 1,
    Tulip: 2,
    Sunflower: 3,
    Starweaver: 6,
    MoonCelestial: 7,
    // NEW
    DawnCelestial: 8,
    // NEW
    Blueberry: 11,
    Banana: 12,
    Strawberry: 13,
    Mango: 14,
    Grape: 15,
    Watermelon: 16,
    Lemon: 17,
    Apple: 18,
    Lily: 20,
    Pepper: 21,
    Tomato: 22,
    Carrot: 23,
    Pumpkin: 25,
    Corn: 26,
    Coconut: 31,
    Mushroom: 32,
    PassionFruit: 33,
    DragonFruit: 34,
    Lychee: 35,
    BurrosTail: 37,
    Aloe: 39,
    Echeveria: 40,
    Bamboo: 41,
    Cactus: 42
  };
  var tileRefsItems = {
    Empty: 0,
    Coin: 1,
    Shovel: 2,
    Seeds: 3,
    PlanterPot: 5,
    InventoryBag: 6,
    WateringCan: 14,
    Fertilizer: 15,
    RainbowPotion: 16,
    ArrowKeys: 41,
    Touchpad: 42
  };
  var tileRefsPets = {
    Bee: 1,
    Chicken: 2,
    Bunny: 3,
    Turtle: 4,
    Capybara: 5,
    Cow: 6,
    Pig: 7,
    Butterfly: 8,
    Snail: 9,
    Worm: 10,
    CommonEgg: 11,
    UncommonEgg: 12,
    RareEgg: 13,
    LegendaryEgg: 14,
    MythicalEgg: 15,
    DivineEgg: 16,
    CelestialEgg: 17,
    Squirrel: 18,
    Goat: 19,
    Dragonfly: 20,
    Peacock: 30
  };
  var tileRefsMutations = {
    Wet: 1,
    Chilled: 2,
    Frozen: 3,
    Dawnlit: 11,
    Amberlit: 12,
    Dawncharged: 13,
    Ambercharged: 14
  };
  var tileRefsDecor = {
    SmallRock: 11,
    MediumRock: 21,
    LargeRock: 31,
    WoodPedestal: 4,
    WoodBench: 13,
    WoodBucketPedestal: 14,
    WoodLampPost: 23,
    WoodStool: 24,
    WoodArch: 33,
    WoodBridge: 34,
    WoodOwl: 43,
    WoodGardenBox: 44,
    StonePedestal: 6,
    StoneBench: 15,
    StoneBucketPedestal: 16,
    StoneLampPost: 25,
    StoneColumn: 26,
    StoneArch: 35,
    StoneBridge: 36,
    StoneGnome: 45,
    StoneGardenBox: 46,
    MarblePedestal: 8,
    MarbleBench: 17,
    MarbleBucketPedestal: 18,
    MarbleLampPost: 27,
    MarbleColumn: 28,
    MarbleArch: 37,
    MarbleBridge: 38,
    MarbleBlobling: 47,
    MarbleGardenBox: 48,
    StrawScarecrow: 49,
    MiniFairyCottage: 50,
    MiniFairyForge: 40,
    MiniFairyKeep: 60,
    Birdhouse: 63,
    WoodenWindmill: 64,
    StoneBirdbath: 65
  };
  var plantCatalog = {
    Carrot: {
      seed: { tileRef: tileRefsSeeds.Carrot, name: "Carrot Seed", coinPrice: 10, creditPrice: 7, rarity: rarity.Common, img64: "" },
      plant: { tileRef: tileRefsPlants.BabyCarrot, name: "Carrot Plant", harvestType: harvestType.Single, baseTileScale: 0.7 },
      crop: { tileRef: tileRefsPlants.Carrot, name: "Carrot", baseSellPrice: 20, baseWeight: 0.1, baseTileScale: 0.6, maxScale: 3 }
    },
    Strawberry: {
      seed: { tileRef: tileRefsSeeds.Strawberry, name: "Strawberry Seed", coinPrice: 50, creditPrice: 21, rarity: rarity.Common, img64: "" },
      plant: {
        tileRef: tileRefsPlants.SproutFruit,
        name: "Strawberry Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.3, y: 0.4, rotation: 85 }, { x: 0.675, y: 0.3, rotation: 195 }, { x: 0.32, y: 0.72, rotation: 340 }, { x: 0.7, y: 0.7, rotation: 280 }, { x: 0.51, y: 0.51, rotation: 0 }],
        secondsToMature: 70,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: true
      },
      crop: { tileRef: tileRefsPlants.Strawberry, name: "Strawberry", baseSellPrice: 14, baseWeight: 0.05, baseTileScale: 0.25, maxScale: 2 }
    },
    Aloe: {
      seed: { tileRef: tileRefsSeeds.Aloe, name: "Aloe Seed", coinPrice: 135, creditPrice: 18, rarity: rarity.Common, img64: "" },
      plant: { tileRef: tileRefsPlants.AloePlant, name: "Aloe Plant", harvestType: harvestType.Single, baseTileScale: 0.9 },
      crop: { tileRef: tileRefsPlants.Aloe, name: "Aloe", baseSellPrice: 310, baseWeight: 1.5, baseTileScale: 0.7, maxScale: 2.5 }
    },
    Blueberry: {
      seed: { tileRef: tileRefsSeeds.Blueberry, name: "Blueberry Seed", coinPrice: 400, creditPrice: 49, rarity: rarity.Uncommon, img64: "" },
      plant: {
        tileRef: tileRefsPlants.SproutFruit,
        name: "Blueberry Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.3, y: 0.4, rotation: 85 }, { x: 0.675, y: 0.3, rotation: 195 }, { x: 0.32, y: 0.72, rotation: 340 }, { x: 0.7, y: 0.7, rotation: 280 }, { x: 0.51, y: 0.51, rotation: 0 }],
        secondsToMature: 105,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: true
      },
      crop: { tileRef: tileRefsPlants.Blueberry, name: "Blueberry", baseSellPrice: 23, baseWeight: 0.01, baseTileScale: 0.25, maxScale: 2 }
    },
    Apple: {
      seed: { tileRef: tileRefsSeeds.Apple, name: "Apple Seed", coinPrice: 500, creditPrice: 67, rarity: rarity.Uncommon, unavailableSurfaces: ["discord"], img64: "" },
      plant: {
        tileRef: tileRefsTallPlants.Tree,
        name: "Apple Tree",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.15, y: -1.9, rotation: -90 }, { x: 0, y: -1.5, rotation: -75 }, { x: 0.6, y: -1.7, rotation: -60 }, { x: 0.3, y: -1.15, rotation: -55 }, { x: 1.05, y: -1.4, rotation: -45 }, { x: 0.8, y: -1.2, rotation: -35 }, { x: 0.9, y: 0.6, rotation: -30 }],
        secondsToMature: 360 * 60,
        baseTileScale: 3,
        rotateSlotOffsetsRandomly: false,
        tileTransformOrigin: "bottom",
        nudgeY: 0.25
      },
      crop: { tileRef: tileRefsPlants.Apple, name: "Apple", baseSellPrice: 73, baseWeight: 0.18, baseTileScale: 0.5, maxScale: 2 }
    },
    OrangeTulip: {
      seed: { tileRef: tileRefsSeeds.Tulip, name: "Tulip Seed", coinPrice: 600, creditPrice: 14, rarity: rarity.Uncommon, img64: "" },
      plant: { tileRef: tileRefsPlants.Tulip, name: "Tulip Plant", harvestType: harvestType.Single, baseTileScale: 0.5 },
      crop: { tileRef: tileRefsPlants.Tulip, name: "Tulip", baseSellPrice: 767, baseWeight: 0.01, baseTileScale: 0.5, maxScale: 3 }
    },
    Tomato: {
      seed: { tileRef: tileRefsSeeds.Tomato, name: "Tomato Seed", coinPrice: 800, creditPrice: 79, rarity: rarity.Uncommon, img64: "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" },
      plant: {
        tileRef: tileRefsPlants.SproutVine,
        name: "Tomato Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.2, y: 0.2, rotation: 0 }, { x: 0.8, y: 0.8, rotation: 0 }],
        secondsToMature: 1100,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: false
      },
      crop: { tileRef: tileRefsPlants.Tomato, name: "Tomato", baseSellPrice: 27, baseWeight: 0.3, baseTileScale: 0.33, maxScale: 2 }
    },
    Daffodil: {
      seed: { tileRef: tileRefsSeeds.Daffodil, name: "Daffodil Seed", coinPrice: 1e3, creditPrice: 19, rarity: rarity.Rare, img64: "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAQAElEQVR4Aex8CZwdVZnv/5xTVXe/fXtf0+ksbJFNZd8StoTVDPsuigr6XN7oKDO/GVyew/jzzfjm/RRlEJF9h5igMCIYeLjAICCBEEIge3d63/vu91bV+3/VBBkhATvdSatd1tdVt+qc75z6/t92vhPUmDmmlQRmAJlWcAAzgMwAMs0kMM2mM2MhM4BMMwlMs+nMWMgMINNMAtNsOjMWMgPINJPANJvO1FjINPvIP6fpzAAyzdCaAWQGkGkmgWk2nRkLmQFkmklgmk3nL9FCFGVskxySRZLfvPx5nH8pgFj7zGna5yNLjvu7L1x52U3/+LdX3nXNFz9119WfvfyOr/yPy2//2ysvveG8M0780n7z6vcnLAIUL9Pz/HMFxNqvpXavpScfdtVnP7r0e//0hUvvvurys2+55JwlX/ubJcdcsXjRh887aeEh555y4mEXnnbykZeeufiYq845/YRvfPyCc2776hc+uuzqT1140zmLj/7i/rOr95tusPxZAdJSG5p/3ilH/8PVn7nwzksuPePG889ecs1pi4/8/IkLP3zeB/efe2RTXSwZtgpQ7hiMn0HIlGD5OUQdF7ObqxJHH3rgh5Ycf8wZp5688BPnLT31G5/4+GW3XHXZWf/xoQPnHEtgpoUspsUkKIydngtaGz7wsXNO+9fPfeLjt5299OSvnnLSkRccd9RBi1qbki0tjSm01Ccxq6kSc1prMX9eI/bdZxb2md+Mtlm1qKoII2S58N0sPDcD7ecRcXy0NdckDzlwv8P/5rTFn7707LNvuPycJd+b31C1AHv40Ht4/J0OP7sm2njBkkXXXn7xOT+84JzTvnzEYQce1VSfiiaiioIOYVZLPVqaa9Hc0oC582ajec4s1NZXo7a2ErVNtairqw6et85uQk1tCuGIAc0HPkrwvCIBKiJsPBx68P4Lzl16+mcvuvAj1x+yX+vJ2IOH3oNj73ToBW21B1984Tk3nnfuqX9/yIcXHJ2IGmUoyJrqJFoJQEtTPWbPaUVlbS0iiQSUZaOQzaOruxf9Q8PkrWBFQgjHY6huqEfrnDY0NDXBiYRRKJVQVi4BspCI2lDlDFLxEE467tiFl198/g/OP33hv7BplEx2+6l3+4jvMeDcSlRcsnTh1z568dk3LD7+iDMaapOWQYEWEcE+e7WhrbUJdY31qCAQ8H0CEcJYpoBt27qwcfNmbN66FYNDIyi7Psq0BV9xQOUjFA2hrqEWjc0NSFbG4fFZyS2iVMzCgODYGl4pg4MP+MBeF5171j+ec/L5351dU9PI3rv1nFaAzKqJNp1/4cXXnb5k0dVHHb7/4ZYpwrZLmN1ah9bZjaiuqUA0mQBoDZQhCgUf3Z292LypA+3bejAwNIYSgVDGQtn3YCwHlDZJQ/59jXEMahuqUU/rchwuUfwybGMAt0ww8oiEHPhuAXW1VTj+hKM/edllf/OdigpU7k5EONPdOdyOxzq4rflg+vHvHXP0By9rbq6MaQm+EWDe3CbUN1QhFgtBU6BQCm7RwxCF30kwOts7MUoX5bsuUokkA3krWpoaEQ6HKeciB/SCeMEfxMSFTR6pZBTJeDh45xNZRSkoWgyDCs8iFC2nJpXEQQcsuPjKCy/9dmtrRSUb75aTU9kt4+xwkLmVlRUf/cjJX7riYxf8++mnLjqnIm4jYitUVSew795zkErFGSNioPoGPDLpLLp6+rC1o5tW0YVcNs044KCF7qitpRFNjXWIEjxQ+y3lQfGqSaADg18iDzd4X5mMMPsCXAKplCLOCsYoWowKQHGMi8baSpyw6OhPnnXyKd8EYJOm/NRTPsJOBpjfXNXykTNPvGbpmUs+96GD9j0+wnTU90qoq69irGhBLJmEsSkHreAXChgYHMBWxoiOjg6k02mEbINmxpO5c2ZhVmsL4lUVsEIGKBfhF3OA0aB0OQM/uFe8g0tQCEDIdqDJVyk+1YZW5MEjcLYFWlIZxUKWmIobM/qkRcde/tGzlnxJuk81ccZTPcS782+uirScdeap/7xkybFX1dfG5pRKY5Sfz1jRhMbGRkQYKxizASuMXCaHjs5ObN3Sgf7+fvgUak1VCm1trWhpaUCiMgnQGkBXw4UGyIhBGwAFLPe84UlQ+Ag+Je4pWoYPhg62taEsm/bjoVgswvM8WGIpWrGrD6PKiMecxBmnL/7UB+bUHYQpPvQU839X9mIZF5x/7v9etOioS0I2Ej5X0xWpKGbNakRrayssy2I/C8o4GOofQvvWTtK2wCri8SiamhoIWi2DbyWssAUBwfcLcGldVG9QotDGAJJiKWq/r8FQwXYOQJ5ewUM6k0ex5DMFdgme5lgEhhblMxlgR2gCbAgoH8EQrobaqnmnn7r4K/s2J6o5uSk79ZRx3gFjWeydvGTRt0464diL41HHVrqI6soYF3e1QRalQiEobaGQK6Grux+btmxD38AIfbyN2tp6zKZramS8SCTYzvLgUViQryCyyrEoS5/AeHCVgm8IBl+6yoKrHXikMj1Wz1AaA8M5vg+hTHEXPVqPWATdozIaHoHwvTItqBAE+BATAUmPTzx+4dmHH7Poszv4tEl5LJ8yKYzeD5PmRKJ66dJTrz3r9FMuCuIFLSOZDKGmoRLV1VUIRSLwCiXk82X09g8G6WyWiz2bgqqrq0HLrAYG+yo4IYsAUYjK51VRgD5p/OrS5Wyfi8d7n35PExBjbIKlIfz6+wcwNpaBY4fhOA6kXbnk8comPnvTorTWMATUGI1iLosYF5mxsBNZcuLx589vrfoAW03JudsAaQKil158xjWLFx59WUQXrYhdQtgpYg7T2ngyBhMO0Z2EkB7LY8vmDnTQMtxiCRWJCFqaawhGLeK0Cg95WgXVnBoNKHolA6UU7YDEKwgA6HbktdGaGu7BwAe4Ok8PDaKrfStGB4ZgaQOwrWIgYVIHozVALh4stjZwee8LSRvNO1pMuTCGxprUvp+4+JKrJTvEFBwyiylg+06WJ525+GNHHHrIRdGwscNhDfm4+fPakExVIBwOc2FWxjAD9rZtnRgcHIShdtbUVqGlpYnWk0IoYkECt8hci/DkhsFZKYLiC1Fo2mY/iwAoaQq4HkWqALbPpzPoJu/hgUEqgoNYOELNzzP8sA0BBGGGHLQOT1EsvPrkLdZjsb/P2pdlgKhjzF5zZ59x3KIjPi3NJ5s48mSzfCe/eU1Vs44/4ahPV1XH62PxEIrFPGbPnYOqyloYJwb4NoYGR4KUtrevC9r4qK1LMXjXIVWZgJQ9aAZs55O5AhhjQLHzR3D6vgtFTRaNF7nKrZL3BAiEZISJQUdHJ4aHR1Eue6RyQFq+XnmAEOR4+738HidRAFmvaA7v+UXUN9RUHXv04UurqpAcbzF5f2VKk8ftXTjVx1F36QVLv11TEz/AMIUsl/KQeNDQ0ABFwZZzLsEYQ1dXD4aGhhAKGTS31KKxqQaJZBhgH0lzZSXuMfgqRTWl9sJXlL+QD6VUQF65zGWHS+AsgECA8h0aHGWdqxu9vf3waVGOE0Kp6KJEF2YzNrEhT5+tPV63n+P3DFF8riBXDsGXHvsVoVBmobJ6Vn2sspUPJ/WcUkDagPAlF5/7tcMP3f+C6lSEQTOLmpoUZrU2Q1E9fQp1cGAUndt6CcYIotEw3zVRA6sQjihAlaCovdJWwNPKAbaD8WbAVgRJK7bF+KFpFYoBvMjEYKB3kGuXziAuKS60ffb12M+yLAiJ1it/vJ/81URQ+x7dGAIQwENzntJOrsZSMJpgMb2ORZ2KQw45eNJL9VMKyKLzFn/+hIVHfcyxYRzbg+34mN3WzMzGgmF6Ozg4jO7uHrqSEdi2WEYjGhpreK/p/gmGwR8OChPQEBB9ClUpBcqKgCkER/DbBrQFt1TGAAN3+9YujIxk4LLgaFl8Rx4eDUgpFfSTDEz6vh0U+f0WsT2g2N/luH4AkmHj8XjiJY484tCzAfGN/DtJ55QBMr+uYt4ZSxZfFXZULBrSyOXHMI/7F1orKK2Rpj/fRjc1NjaGSCSM5uZGWk8lDHN+iFXww0XinufDdzlNCsf3EQhGYgaozeOiEI3lC7ojv+wjM5xGV0cveroltc3B0SGgrODynWi5kGi8R1AlcRiXowLIX8hTHAvbCbRqQGvDOXAenID085hxgdRYX93KXYDIOI/J+SsjTw6nP+Jy+iknXMWUdZ5jAaKcdTWVqGIUtLnWKBQL2Ly1A8PDw+zl00XVomVWE5yIw2yrxGcUgrHhcyWt6GqUIhNKX64iHKUUfG5WiVCCxiJACrRQKKK/bxASwEcIjGVCFKYVEDlCLMX3FYwxfKb5m+aCdx7EFmzGF2KRPi2WoHIMozT/KtjsbxSEjx0qJB02nLRTTxqntzHatyHVtvC44862xN/SJztGY/bs2VCKgmQwbd+6ja5kLNB2WexVVsWg2CZQR/LxKRHfNVCayscMjPhBBFwqlkUKgTtzmYaC2RhobaLZoyOjzNI66AJ7AzZhLvq4mOC9x3EUuepgfN4Ev8VdKaXguYBthchGo8g1CWh5wlLaKaWgYFDIl6CpFAKoZRzIM7Eyy8gE8G7HhJ/pCffccUdz1tKl/zMcMvNCtg0Dn66ohqlrHNoJB0VCsQxxOw0NdaiqTiIWCwOcybiQNDQFpGgZHi1kmJq+edNWLhbbg/VJuZCHFQrB4tqlxAow5YfhoeHxLI2pc6lECVO9lVKiwQgY8++OTrGWQqmIAmsqlmURGDAlLgbksoQCrQI+Silk0jmMjqZR4LiaFqmUQlqL1mHSDoph0ngFjC5devInjzvuiHPorqBRhrgpqUERF2TG0vTtfSyN5FGRSKC+thqJRByw6RrKhcCFKPH5ykGetawB1rC6OnvQyUpvJpMJBCOD+ExvQaiNttHfO4Dern4M9Y1wsemRleG4CHiJv5f248RYM37Dv3+4Z7ynxfhQSgXPLcdCZXUlKqoqoLjwEMUBQRFlyefzkHmIdWjNOfNhir0m89STyYy8nOOPO/KCUEjNUkxZyyyH19fXMzbEgtSznZtK8lGO40CsI56gZSgfVMdAgFpZgLZQyuXR1zcQACFrk0g0xDhTjYqKBCz2FZfm0o2MjuS4+u6hOxujawJs24HWBvKesuJ05BThC8m90Nvvx3/TQ8IhELLXLnsxrbOb0Mot47rGWlhMSFyW+2XeZSqC8NVUBqUUx/RQ9jwtXCaLJpXZgfMq966rTbVZusTJFoOSRyJVAdCFDNCtSJqrlAmspqoyAYsuDeLo+XEW3ZS2HBQzBYhV9PT0sAA4wvWIxfjTjMamWhiuA6A0lLIwODCGjRvakUnLWArGWEE8KLNIGAhNU2xGAeLT/hvx0dtOZRny85GsiAXjzGptQKwijGRllKA0QABS9Eq5fCZQGsOArsn7TRbWm9dJu+hJ40RGxx513NnRqNUAFBGNGDQ1N0A0emRsFJ3dvdQmUMsrIAtD42j4bh6gL4a2zcAF0gAAEABJREFUAW0hn81BVuxCopGxWIRtG1DDrdQIMzBN4bncROru6uVisp9WVyIIijwoF248CRCcBizGAqUUV9XjGZs82xGVubsYWEZDNRKVcShHQVGhlPFgca+lobkOVkihWGbdywC2bbAdFNuyWInx+HRH3P/05/pP7/LuPebUxeqPOOKQMx1HR4rFLFfdDilMIachGp+lsCNMeZuamhCKxwBmST5jTMCNa4Q0g7es2Ht7ewNNTKWSLKEIGCkYy4XPNNcjgPK+vb2LYBTg2HF2tyCprJBSBoYarJRiezfIxmRN867EnvI8nohxs6seVdUpjltCiXP3lQuhcilLcE3w3GOAt7hGCoVCHIP8fZ/PPaWV8oXVZJGeLEYnLz75ytqaiv04TVSkEogyWFv0/VK57R/oZSYVhez2VVZWwM2Nm78ORwFluH9dZgY1zLgxHvATFFJDYx3dRS3EPSil6AIBKUAKuAWWRRw7imK+CKMtKKUghx8IiUC8+Q8XRHjy/F2Ji0+PspTdR5kTqPnUEmi6RaU4Hl2pcWyMjIwgy0qxS6URyxPylUaRlWTureRLYe4XvOsAE3s4KYAsaEnOP/HYIy+KRiIx2wqBlQvU1zUjwxSxp7cLlvERC1lo4xatKJThGkEpAxRclEhS+Ovu7kapVKB7StFNNaMqlUKAAvn5ZQv9PcPYsmkbMmNFys6hu/NgiIPnl2ghTHUZJ4S3UnxIWfgehcrHJaZRmrGJwZcukwGdnYoM0gJGC0v7Uuh06bbglmFoATkuLjkArUv6a7zxxkbkmPG5TMFj4SRdVgR5roescAQdPT1v9PUhy+Em7ZwUQD78wYPOrKmunJ2j5ksVtamxBcbY4xqfycJAoaGuChFqHIyGyzignTD9P4J/tCBpbT6fDdxGTU0NLSkGTdcA9vSZTfX09KKbqW2Re+EW+bq0AJcLTMuS6VPIBIPovatQHMch0KXgnUUrkFRY+tXUVHFLuBpgwLaNJsBu0CYcjSKXLVDwoWCROcTdxSIBqapIIUyLzhOwEF3v8Eh6+Ilf/eoOdpIJ8DI5p3zRrnJShx162GmRsBO1jQVDDa2ursbQ0ADd0CAN30eyMomq2hpAAGHqqDWHpVAHZAevqwsCZCqVgsSXSn64ZYcAugW37ELA6Onpw/DwMFzRdvYV1ySCVUohOOh+gmvwh7zxdgKz6jIktkg/SWElWaivr0UkHgHotmAAkIfLvRLtK9jaQY6K1LFla7BmUtpHKGQHlqiUgkVlKrt+/5oX1zyLST5k5jtk+X5eVAGJlqaG5jIFHQo7CHMFLVopwVcyJYkbshYxlhWwcwmEotZKbNm2bRvSmVGkCFgTM7IEF4sW34EfXcrkaGED2NbRA9FYi25HKUUv5kEAJS4UkB/w3NkfWbnbth0AIhlVJBJCbV0109w4raJIwypzOB+KDD0qQIlWaIdj2NbezUVnHwSvWCwGi/MvlkvQtoVsroCObT0bN/QVtu5s7Im80xPp9PY+c+bWz45HwxWKRSGXRafKiiTydF2St3usiMpKPR6P0z25oIrTT9vIZ9LBom90dDio9NbV1SEZTwQfD7okn+WP3p7+N7OzPDyuvQyfK2goxgYqbCBE4c8HePdDB4+VokZTmKII8kCShWquxBWDtyQgPrM3sgXRheEYDmNWun8EnVs6IP+aHqw2x1mNdgikxCifjRkjcyufeOoe8iuSJvUcn/UusDz+xIUXWZau04ZMlMc4UElhdwSmLmmuxIRAoykUcRny4Zs3bw72K8SSBIyammo49N1KKbgsT/R09wX+O0ffbdsh+B5QJkg+3YlSCsIncFmCDIfd8alhjAlqT+nMWACizCcUJk9WEbStoJhwUMbUFRfaOGzj4PW165EeyfKxzexw3DoC8BQAo2GFQgMvrF79NKbg2CVA6usRO+KwQxdbRlk+XVE8GmEALVDYAxCBiauK0ty15jCWYZbjUtA9dEV9ENOvra1HDYOrHY6AkkCOrkDS2s7ObmTosrQysGBDc/Go3rQMbD8UUdp+v5OruNJ0epS8M9geC8SqfGZnlDjIHOAaQ+boMmB3belE19ZueExzo3RdyVgSvlYQd+XCZwbplV9+ec0rG7eNbd7JsBN+RUlNuC+iJtESDju1ooWiQQ79v8QObQDZjpXg7nMjSITNyAr5p5ry73IBharKaoh1xKIJEEXkRkeDjKuHAVyAkWxKuhYKJWhtwWEgVQRIgFZKwVDzERx+8PedfwQwj2PmScXgtQjdF3PjV2taLCTd5RtxZ4qpeJbV3Ddee4NgeMRIIRqJ03J8KGWg6c6E0tn8umU/WfEddhtnypvJPPWuMPvQhz50XMi2qzU1B8zjQ7aFEWZXTOKZUtYiTNegLMO3PiQwb9ncjgLT2HAoivqaeoLGFbvNmEI31c11iFAul4MITkAQFyWCl6sIzfdFOCqYstzLjdYmsEa5V0pBsiip0Gp+mccYNjIyxPE9zsVBW1srdNgGfV5APl2guEJDSyiMZlgb28yF4ChKRZdziyPiRKEIRJnZHT0mXGXy992/7OZfv/j6ShlvKojTnjjbY445erHtWDHR2lAoxI8ZgTGG2uwENSslUvF9fr8PSVvzFLy4ELEMyaiMFUJ2eIQxp4vWMQjmBZBsymX6KesZLf2x8ynK2AKOS5cpV7FSoWIpj5HRIRiL6uK7wY6kuFBw/RLsoygFxTlbtAyPStLV1c2t3y4G8iITjAok4hV0sSCYBtLGVRY2b9m29qW1a1dgCo+df+3OBw41NzS12pr+iZKUS47ZlUsAkpUpLu7i7K1IBmPUPlmNs9SAVLISzJKZ10eRHh4jGN3o6x1ibSpLTQcMFBR5KGY3co8dLPqUD7YDfMYWyziQ8T3GAh8uBIx8PkcvWSDPItPcyjetI8TfHmwmEFAGPksw0A6B6MVGrsjT6SyzvkhAWlsQph5nVHAVZ2FnHn505f9d/UbvRkzhMWFAmqjihVwmPO4eNBWvBNu26TJcBuoaGFqKzNvl+kTiwihjhKH5z5o1G2IFaZZVNm/eGoAhsSIUovuCphBdaGqj5P0+gREe70VKKSg1TmIx2WwG2Wya2u0G64358+cimkywhpYL2oHzAN2QjDvUPYj2zR0s548i7ISQTCahDL+HLtgLOBh4ysZLa9Y989tVTy/DFB8TBiSatMN0DWGZn+TnJboCEaIsDONcd4CxAwrBal3claVt1Nc2BL5ZNp86mOePyJZr0WMzCw6FpH0VaLwhmJruSmIA4HGIP9B2y4DPqZOUMhDghJRSBLQEsdQyK8OOozFvXhtqpUrglSBZluI8fJZGZN+kxLFfW/M6BnpHYdPKIpEoto+tLYOyjKwNuvoGX3tg+UP/xo3LLB9N6cmvmhj/bDarHcey5CNFGDoQoBdYh9zzy4K1SFdXD63GpxuIIZVKYWBgALJCl2zMth3YXGdISaTIFbIIWUCVGYmmC1+5f2/SUDAocL9dSjayKJXdxbnz5qC5pRHGMRBL5YRB8yQwmqDl8SrBGOwbRYGuK8zUWxTJGEMVcEF2MLT4nr7+rgdWPPTtp19Y/xh2w6EnOkZVKpmiRwmJ4JTRlL8JWMnCK7ihxfT390P+3ZVSCkopDA+NoI8bVTn6ag3+jyBqbVHDFX279BqfjvD0GA8EbMh6g8QWEJJWbyefkyjTLUrCIPvdhWKOCUUCc+a20TrmwGJBERSxschbfBTnlWE5fcuWdmzcuBlaWYxnEciaw2GSIWMqpVBmkjCWyRYfe+LJf132yG9ve/uYU3nPWU6M/UEfPHhhNGJXiKsy1CrhIrEhEonBaBt5uoX+vmEouhUw8Ep6KZZBy4JSiq4rSs0swWMdQoJyiBmPUgoufbsIWVNQQmI1/41koD8iiRejY8MoFvNIcC9m9txWNM1qguEuo0dgg8WfZcF9E4xNG9u5Gn+daW0k4CRlm1gshnyhQHJhMQ0uslyzaWvn0z974hd3B412058JA7LwmMMX28aPR5jXi1aKVodCYWSYUdFdY2QgQ1BKlIWBBNASU0ubQImQFQyKTOwFSE0rAdcLruxRiAYDUIp9oAPLkXshX2lIkGWYAbhylvsSA+/Y2AiFmEWJPOIVccyZ1wb5f3gIJ6LwufMnz2H4mcpgdCSD1S+vxab1W+DoOGyCnoyFUZEMjycBCjChCPKuQd9Q9pUHlz3yLW7t92I3HpzpxEYLh0KNllF0NWVoClVItL+jYxs2bNgYlM1dbuS8pd3vGEaGppApSMnU5LVSKuCllIKiAIUAaQcopYJ34FHkGkPiRCY7hkyWCzn+rqlJYcEH9sZee82Hw2JgiXsuPt1ZKJHk2qLAYuG4ixrsG0SZVV2JVSEK33Es/i4iEotyKAf5ko+O7r51d9//k39Z+ewrj3O43XqOf+0EhgyHWGdnP/lopVQgrDJ9uWRUfbKNls3Csizs+PD4ygv6CZig/gsJOH9MYj1CPly4ND9ZY4yNjTI+DUP222e3NQZg1NfX0UUCPutQBja056A8WkQnS+lvrNuArczsJNaEWUGI04IisTCtyCBLxSkxpeKJbL64YdmK5df+9LGn7+UEd/s5YUC0pYOALsIUUISUUm8JWKnxe7zHoZR6q4XwEBp/4NEq/ICgvACILNcXw8MDBGIE2nisLCex34K9CcY+qG2uD7qVGCeME4a26IbSebz26ut0Ue0QyyCeQfU2kYghFLYgxidtfc22rA7k8u7mO+6579pljzx9Z8BsD/yZMCBQPh29CEzR11N3mZWIMAUg+Q6XWlosiM7Jrx1TmWVwTwIvha7J0XCfQq6S7UBiQDmPIjOnLN3TWHoI2dwonJCG7Ifvv/8CzN2rDaGozbJ9FtLXjsYBjt3X0YXXX12PrRs7MTqUhqVCXPSlAkAsWq7LeJUvFZFmLIMdwWim+PoNN9/2vx74z6dvxR48JgyI53uuMowBGAdFKRV8hscP9em75YfW781eKUUrUJC2QtK3REGJW8pwD0M2sYbEKtIjdIEas2Y1Bxax195zUddYC8M4pilgw0ozoJAZGMD6V9fh1VfWYvPGLcysXDiWgwRjSTQcZXsbShmGNgVtHDpKG72Do6/fee+yf17x+HN7FAzweG+JsdG7nYVSsSTPRYBKKRhjoJSiA9fQzF5EC4XwHodS7MM2Li2swLQzl8tyLySDNPcwMrQKj9YT5tZwXV0V5s1vo4vaF7Lgi1dWsJdH62R/RQHTGnu4j/La2rXYuH4DxkZGYRsL8WgMiVgSUmE2zPJAw/Y5PygHRVehd2B01Z33rfjGskf3nJvih7x16rfu/sQb4jEiQvTftAa5vt065HeJ/vy92EofaZfL5QhEmpRBoZALYobwSCbjaGPZ/MCDDsA+++yDCgFCQGSaDAKhSD3berHqxdVMaV8Jtn0lcIuCRFlEDDP3sB0HWlu0BgOXgLieYarsl0bSpRfueXDFN1c8GmzHvtdUd8v7CQPS2TYbNCEAAAc2SURBVNW3Ftr4mtrmuYBUXeVerEIEKUKWe6UUU2PRZB/yHIwVhnHCZ4TN5tKQoqP8Y7TR0RGmn2WWNHKQImVjYyMOPPDAgPbee2+kqquhtrtAWmOZmVE/N7NWvbgGL7+0Fh0dsstY4BgKIaa9MWZRiVQcsm6R3wXXQ4nK42kHhbI18OJL6x654+6fXPPQo79Zvlsk/T4H0e+z3TuaPf/Ccz8dHU0Pi4YHgmYLuS8z9eUtBAy5KqUg2irxQSlFgfmB4AUw2UEUbQYPpeh6eK2qSmHBggU44IADaBltSKVSMNRysPjI18iMZbCNVeLVq9fgpVUvo6O9l6X7AjRdUDSSREWqCqnKajhcY2RpdbAM0vkCLPIwThwDg2Prli3/2dfueHD51ct/8ZtHhed0ogkD8uLvX36pVPZGAA0R9nbaDo6hFgtAQsEzWoZYx/aPV0pBKRVYQyQSCbIfcS+s6kNACCcSIJIBZUfGsG3jZgbqVwO3tOaVV9G+tYPpbw7lvIuQFUE4moDDkoevLEmyoCybIETh8renLQyPZbPPrXr55/cvf+Tr19/10PWr1na8sX0u0+k6YUCGevIjTKgIyPjniNAFBKHxJwhclQAiJM+UUgEI0sahXxcgKioqIFepJclVLKy9vR2b1q3H5g0bsOblVyDWsHbtOmza1M4KwADjDC2CridKi5B/KFFJi5D7KFNem9uuvm8TFAslz0K+6GPD5s7n7l/x8D/c+cCKf7r34ZX3yVymK00YkFFgdMuW9g4J7CJwcUFylQ/dfg2sxgCaJM+lrbQTknsBUa6SXRVZ6hD3RTeILVu2YP369VjPXbwN6zdB/vODTDoHt+zDtiJIxCtJVYhGEvAZG5RSAfisiASBuwwBQqF/MLNh2cOPXXv3Az/5+1vve+y6519a/6LMYzrThAHhR5V//fQzd5dcryDaLsL3aDJ8DhGykNzLc7nKbxH42NhYsPcugVzuR7mTuJ3kv5bKZDJcCJZJRbqkMUgsCnP9INofpVuKRmMBEBG6J9lLEcuSNqV8EQKYxUVePu/jhVVrV95y14PX/PC2n3515W/XPClz+HOgXQEEa9as+S33PPppA4HgROOVUoFbko+X30JyL2AJKGIdbyd5J22UUhDwBNxQKIQIy/hRuiApAEYiUcTjCSQTXGlHKyBACPbCJ5tNczyfQdzm2iWdf/bZF56+/a57r77nwWWfeWTls3ukHoVdOHYJkE1d+W1btnY/P5plecNTKLl0HUpD2w7jsaGg1FtTMwzyFjMeSWmdN+NHlOsEoQjTVAnmlZWVkJgSDkcQpSUkU5WIxitgOVGmrzZKvkbB9QNimYDjRFFmSeTFNeva73rwoetvuf3eL9xz/7KP3fPwU/82XYP2WwLZwc0uAUKe5Yd+/ovrVr++5TnlMOdnQa9QJgjKIF8qjwPisbTC/F8GinDFXcHsKcasKkIrSHLvPcp0NEntD9kOwk6I2u8gQnfkMQ74JAHBhYFP3kUu6phU8T6SGxjNbXzquRcf+/6tD37lh/f+9Irr73nsc/f/8rkfPTtNsyfK6n2d+n212kmjZ17euvI/H3viW8/8btWvRtKFQpla7MFGSIQq1iLrB2Vx/QH4FKyx+Y6A2E4ESttQtBxtWZB7l0C6FLrH5x77lMHntIBswcNIuuj3DY61P/v8S0/cdMdd137/xluuWf7QLz754CNPfOf5F9/4Jafokyb53P3sdhkQmfJjv1614uZbb//i3fcv+8Kr6zY+Nzyayw6PFYr5kkY659HFqMC1uAhBqMRrkcLO0cVl2aboOyiC5Fq0LF3i7m9mLFvqHxjJbnz+pVd+ed+DP/v6v193/WXX3fDjK5f/5KcX3H7/4996/Dcv3/PcKxvaZfy/JJoUQEQga7f0//6+nz154133PPCZH99+31U33/HA5+++/6Evr35t4/INW3rWdPeNbekZyHSTRvpH8tmhdGk4nfcHhzPlzq1dg+t/t2rNk8sfefzrt9xx39/dePNtX7rxR3d+5cYf3/7lu+9YdtUtD/z8myt/u/qu3zz36qMvvN7JJEJG/MukSQNku3ieXb3hhRWP//rO+x558sab7v/5//nubbd8/Mab7znvP2669Yrrbrjtiut+eMul3/vBLRd/7wc//vh3f3DT5d//4a1XXH/jHZ/40Y/vuvS6W5Z/866fPXXdA48+c+OKJ/7r1kef+v3y59/YunE777+G66QD8sdC27hxaOS/Xnlj7RO/e/WJp55f/fP/97tXHn7y2VUPrXxm1YqVz7z08JPPvPSLp19c+6t17f2df9z3r/H3lAPy1yjUXfnmGUB2RXpT0HcGkCkQ6q6wnAFkV6Q3BX1nAJkCoe4KyxlAdkV6E+y7s24zgOxMOnvg3Qwge0DoOxtyBpCdSWcPvJsBZA8IfWdDzgCyM+nsgXczgOwBoe9syBlAdiadPfBuBpA9IPSdDfn/AQAA//8ttzPdAAAABklEQVQDAHdlj8gnMjSGAAAAAElFTkSuQmCC" },
      plant: { tileRef: tileRefsPlants.Daffodil, name: "Daffodil Plant", harvestType: harvestType.Single, baseTileScale: 0.5 },
      crop: { tileRef: tileRefsPlants.Daffodil, name: "Daffodil", baseSellPrice: 1090, baseWeight: 0.01, baseTileScale: 0.5, maxScale: 3 }
    },
    Corn: {
      seed: { tileRef: tileRefsSeeds.Corn, name: "Corn Kernel", coinPrice: 1300, creditPrice: 135, rarity: rarity.Rare, img64: "" },
      plant: {
        tileRef: tileRefsPlants.SproutVegetable,
        name: "Corn Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.5, y: 0.4, rotation: 0 }],
        secondsToMature: 130,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: false
      },
      crop: { tileRef: tileRefsPlants.Corn, name: "Corn", baseSellPrice: 36, baseWeight: 1.2, baseTileScale: 0.7, maxScale: 2 }
    },
    Watermelon: {
      seed: { tileRef: tileRefsSeeds.Watermelon, name: "Watermelon Seed", coinPrice: 2500, creditPrice: 195, rarity: rarity.Rare, img64: "" },
      plant: { tileRef: tileRefsPlants.Watermelon, name: "Watermelon Plant", harvestType: harvestType.Single, baseTileScale: 0.8 },
      crop: { tileRef: tileRefsPlants.Watermelon, name: "Watermelon", baseSellPrice: 2708, baseWeight: 4.5, baseTileScale: 0.8, maxScale: 3 }
    },
    Pumpkin: {
      seed: { tileRef: tileRefsSeeds.Pumpkin, name: "Pumpkin Seed", coinPrice: 3e3, creditPrice: 210, rarity: rarity.Rare, img64: "" },
      plant: { tileRef: tileRefsPlants.Pumpkin, name: "Pumpkin Plant", harvestType: harvestType.Single, baseTileScale: 0.8 },
      crop: { tileRef: tileRefsPlants.Pumpkin, name: "Pumpkin", baseSellPrice: 3700, baseWeight: 6, baseTileScale: 0.8, maxScale: 3 }
    },
    Echeveria: {
      seed: { tileRef: tileRefsSeeds.Echeveria, name: "Echeveria Cutting", coinPrice: 4200, creditPrice: 113, rarity: rarity.Legendary, img64: "" },
      plant: { tileRef: tileRefsPlants.Echeveria, name: "Echeveria Plant", harvestType: harvestType.Single, baseTileScale: 0.8 },
      crop: { tileRef: tileRefsPlants.Echeveria, name: "Echeveria", baseSellPrice: 4600, baseWeight: 0.8, baseTileScale: 0.8, maxScale: 2.75 }
    },
    Coconut: {
      seed: { tileRef: tileRefsSeeds.Coconut, name: "Coconut Seed", coinPrice: 6e3, creditPrice: 235, rarity: rarity.Legendary, img64: "" },
      plant: {
        tileRef: tileRefsTallPlants.PalmTree,
        name: "Coconut Tree",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.3, y: -2.1, rotation: 0 }, { x: 0.2, y: -1.9, rotation: 51.4 }, { x: 0.7, y: -2, rotation: 102.9 }, { x: 0.25, y: -1.6, rotation: 154.3 }, { x: 0.5, y: -1.8, rotation: 205.7 }, { x: 0.8, y: -1.7, rotation: 257.1 }, { x: 0.55, y: -1.5, rotation: 308.6 }],
        secondsToMature: 720 * 60,
        baseTileScale: 3,
        rotateSlotOffsetsRandomly: true,
        tileTransformOrigin: "bottom",
        nudgeY: 0.15
      },
      crop: { tileRef: tileRefsPlants.Coconut, name: "Coconut", baseSellPrice: 302, baseWeight: 5, baseTileScale: 0.25, maxScale: 3 }
    },
    Banana: {
      seed: {
        tileRef: tileRefsSeeds.Banana,
        name: "Banana Seed",
        coinPrice: 7500,
        creditPrice: 199,
        rarity: rarity.Legendary,
        img64: "",
        spawnRule: { type: "parity", parity: "even" }
      },
      plant: {
        tileRef: tileRefsTallPlants.PalmTree,
        name: "Banana Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.2, y: -1.2, rotation: 10 }, { x: 0.3, y: -1.2, rotation: -10 }, { x: 0.4, y: -1.2, rotation: -30 }, { x: 0.5, y: -1.2, rotation: -50 }, { x: 0.6, y: -1.2, rotation: -70 }],
        secondsToMature: 14400,
        baseTileScale: 2.5,
        rotateSlotOffsetsRandomly: false,
        tileTransformOrigin: "bottom",
        nudgeY: 0.1
      },
      crop: { tileRef: tileRefsPlants.Banana, name: "Banana", baseSellPrice: 1750, baseWeight: 0.12, baseTileScale: 0.5, maxScale: 1.7 }
    },
    Lily: {
      seed: { tileRef: tileRefsSeeds.Lily, name: "Lily Seed", coinPrice: 2e4, creditPrice: 34, rarity: rarity.Legendary, img64: "" },
      plant: { tileRef: tileRefsPlants.Lily, name: "Lily Plant", harvestType: harvestType.Single, baseTileScale: 0.75, nudgeY: 0.4 },
      crop: { tileRef: tileRefsPlants.Lily, name: "Lily", baseSellPrice: 20123, baseWeight: 0.02, baseTileScale: 0.5, maxScale: 2.75 }
    },
    BurrosTail: {
      seed: { tileRef: tileRefsSeeds.BurrosTail, name: "Burro's Tail Cutting", coinPrice: 93e3, creditPrice: 338, rarity: rarity.Legendary, img64: "" },
      plant: {
        tileRef: tileRefsPlants.Trellis,
        name: "Burro's Tail Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.37, y: 0.4, rotation: 0 }, { x: 0.67, y: 0.63, rotation: 0 }],
        secondsToMature: 1800,
        baseTileScale: 0.8,
        rotateSlotOffsetsRandomly: false
      },
      crop: { tileRef: tileRefsPlants.BurrosTail, name: "Burro's Tail", baseSellPrice: 6e3, baseWeight: 0.4, baseTileScale: 0.4, maxScale: 2.5 }
    },
    Mushroom: {
      seed: { tileRef: tileRefsSeeds.Mushroom, name: "Mushroom Spore", coinPrice: 15e4, creditPrice: 249, rarity: rarity.Mythic, img64: "" },
      plant: { tileRef: tileRefsPlants.MushroomPlant, name: "Mushroom Plant", harvestType: harvestType.Single, baseTileScale: 0.8 },
      crop: { tileRef: tileRefsPlants.Mushroom, name: "Mushroom", baseSellPrice: 16e4, baseWeight: 25, baseTileScale: 0.8, maxScale: 3.5 }
    },
    Cactus: {
      seed: { tileRef: tileRefsSeeds.Cactus, name: "Cactus Seed", coinPrice: 25e4, creditPrice: 250, rarity: rarity.Mythic, img64: "" },
      plant: { tileRef: tileRefsTallPlants.Cactus, name: "Cactus Plant", harvestType: harvestType.Single, baseTileScale: 2.5, tileTransformOrigin: "bottom", nudgeY: 0.15 },
      crop: { tileRef: tileRefsTallPlants.Cactus, name: "Cactus", baseSellPrice: 261e3, baseWeight: 1500, baseTileScale: 2.5, maxScale: 1.8 }
    },
    Bamboo: {
      seed: { tileRef: tileRefsSeeds.Bamboo, name: "Bamboo Seed", coinPrice: 4e5, creditPrice: 300, rarity: rarity.Mythic, img64: "" },
      plant: { tileRef: tileRefsTallPlants.Bamboo, name: "Bamboo Plant", harvestType: harvestType.Single, baseTileScale: 2.5, tileTransformOrigin: "bottom", nudgeY: 0.1 },
      crop: { tileRef: tileRefsTallPlants.Bamboo, name: "Bamboo Shoot", baseSellPrice: 5e5, baseWeight: 1, baseTileScale: 2.5, maxScale: 2 }
    },
    Grape: {
      seed: {
        tileRef: tileRefsSeeds.Grape,
        name: "Grape Seed",
        coinPrice: 85e4,
        creditPrice: 599,
        rarity: rarity.Mythic,
        img64: "",
        spawnRule: { type: "suffix", value: "1" }
      },
      plant: {
        tileRef: tileRefsPlants.SproutVine,
        name: "Grape Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.5, y: 0.5, rotation: 0 }],
        secondsToMature: 1440 * 60,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: false
      },
      crop: { tileRef: tileRefsPlants.Grape, name: "Grape", baseSellPrice: 7085, baseWeight: 3, baseTileScale: 0.5, maxScale: 2 }
    },
    Pepper: {
      seed: { tileRef: tileRefsSeeds.Pepper, name: "Pepper Seed", coinPrice: 1e6, creditPrice: 629, rarity: rarity.Divine, img64: "" },
      plant: {
        tileRef: tileRefsPlants.SproutVine,
        name: "Pepper Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.1, y: 0.1, rotation: 0 }, { x: 0.9, y: 0.1, rotation: 0 }, { x: 0.3, y: 0.3, rotation: 0 }, { x: 0.7, y: 0.3, rotation: 0 }, { x: 0.5, y: 0.5, rotation: 0 }, { x: 0.3, y: 0.7, rotation: 0 }, { x: 0.7, y: 0.7, rotation: 0 }, { x: 0.1, y: 0.9, rotation: 0 }, { x: 0.9, y: 0.9, rotation: 0 }],
        secondsToMature: 560,
        baseTileScale: 1,
        rotateSlotOffsetsRandomly: true
      },
      crop: { tileRef: tileRefsPlants.Pepper, name: "Pepper", baseSellPrice: 7220, baseWeight: 0.5, baseTileScale: 0.3, maxScale: 2 }
    },
    Lemon: {
      seed: {
        tileRef: tileRefsSeeds.Lemon,
        name: "Lemon Seed",
        coinPrice: 2e6,
        creditPrice: 500,
        rarity: rarity.Divine,
        img64: "",
        spawnRule: { type: "suffix", value: "2" }
      },
      plant: {
        tileRef: tileRefsTallPlants.Tree,
        name: "Lemon Tree",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0, y: -1, rotation: 85 }, { x: 0.9, y: -1.1, rotation: 195 }, { x: 0.2, y: -0.68, rotation: 340 }, { x: 0.7, y: -0.7, rotation: 280 }, { x: 0.51, y: -1, rotation: 0 }, { x: 0.45, y: -1.3, rotation: 280 }],
        secondsToMature: 720 * 60,
        baseTileScale: 2.3,
        rotateSlotOffsetsRandomly: true,
        tileTransformOrigin: "bottom",
        nudgeY: 0.25
      },
      crop: { tileRef: tileRefsPlants.Lemon, name: "Lemon", baseSellPrice: 1e4, baseWeight: 0.5, baseTileScale: 0.25, maxScale: 3 }
    },
    PassionFruit: {
      seed: { tileRef: tileRefsSeeds.PassionFruit, name: "Passion Fruit Seed", coinPrice: 275e4, creditPrice: 679, rarity: rarity.Divine, img64: "" },
      plant: {
        tileRef: tileRefsPlants.SproutVine,
        name: "Passion Fruit Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.2, y: 0.2, rotation: 0 }, { x: 0.8, y: 0.8, rotation: 0 }],
        secondsToMature: 1440 * 60,
        baseTileScale: 1.1,
        rotateSlotOffsetsRandomly: false
      },
      crop: { tileRef: tileRefsPlants.PassionFruit, name: "Passion Fruit", baseSellPrice: 24500, baseWeight: 9.5, baseTileScale: 0.35, maxScale: 2 }
    },
    DragonFruit: {
      seed: { tileRef: tileRefsSeeds.DragonFruit, name: "Dragon Fruit Seed", coinPrice: 5e6, creditPrice: 715, rarity: rarity.Divine, img64: "" },
      plant: {
        tileRef: tileRefsPlants.PalmTreeTop,
        name: "Dragon Fruit Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.2, y: 0.1, rotation: 0 }, { x: 0.1, y: 0.45, rotation: 51.4 }, { x: 0.86, y: 0.2, rotation: 102.9 }, { x: 0.25, y: 0.8, rotation: 154.3 }, { x: 0.5, y: 0.4, rotation: 205.7 }, { x: 0.9, y: 0.6, rotation: 257.1 }, { x: 0.6, y: 0.7, rotation: 308.6 }],
        secondsToMature: 600,
        baseTileScale: 1.6,
        rotateSlotOffsetsRandomly: true
      },
      crop: { tileRef: tileRefsPlants.DragonFruit, name: "Dragon Fruit", baseSellPrice: 24500, baseWeight: 8.4, baseTileScale: 0.4, maxScale: 2 }
    },
    Lychee: {
      seed: {
        tileRef: tileRefsSeeds.Lychee,
        name: "Lychee Pit",
        coinPrice: 25e6,
        creditPrice: 819,
        rarity: rarity.Divine,
        img64: "",
        spawnRule: { type: "suffix", value: "2" }
      },
      plant: {
        tileRef: tileRefsPlants.BushyTree,
        name: "Lychee Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.1, y: 0.4, rotation: 85 }, { x: 0.8, y: 0.3, rotation: 195 }, { x: 0.2, y: 0.72, rotation: 340 }, { x: 0.7, y: 0.7, rotation: 280 }, { x: 0.51, y: 0.4, rotation: 0 }, { x: 0.3, y: 0.2, rotation: 280 }],
        secondsToMature: 1440 * 60,
        baseTileScale: 1.2,
        rotateSlotOffsetsRandomly: true
      },
      crop: { tileRef: tileRefsPlants.Lychee, name: "Lychee Fruit", baseSellPrice: 5e4, baseWeight: 9, baseTileScale: 0.2, maxScale: 2 }
    },
    Sunflower: {
      seed: { tileRef: tileRefsSeeds.Sunflower, name: "Sunflower Seed", coinPrice: 1e8, creditPrice: 900, rarity: rarity.Divine, img64: "" },
      plant: {
        tileRef: tileRefsPlants.StemFlower,
        name: "Sunflower Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.51, y: -0.1, rotation: 0 }],
        secondsToMature: 1440 * 60,
        rotateSlotOffsetsRandomly: true,
        tileTransformOrigin: "bottom",
        baseTileScale: 0.8,
        nudgeY: 0.15
      },
      crop: { tileRef: tileRefsPlants.Sunflower, name: "Sunflower", baseSellPrice: 75e4, baseWeight: 10, baseTileScale: 0.5, maxScale: 2.5 }
    },
    Starweaver: {
      seed: { tileRef: tileRefsSeeds.Starweaver, name: "Starweaver Pod", coinPrice: 1e9, creditPrice: 1e3, rarity: rarity.Celestial, img64: "" },
      plant: {
        tileRef: tileRefsPlants.StarweaverPlant,
        name: "Starweaver Plant",
        harvestType: harvestType.Multiple,
        slotOffsets: [{ x: 0.5, y: -0.158, rotation: 0 }],
        secondsToMature: 1440 * 60,
        baseTileScale: 1.5,
        rotateSlotOffsetsRandomly: false,
        nudgeY: 0.25
      },
      crop: { tileRef: tileRefsPlants.Starweaver, name: "Starweaver Fruit", baseSellPrice: 1e7, baseWeight: 10, baseTileScale: 0.6, maxScale: 2 }
    },
    DawnCelestial: {
      seed: { tileRef: tileRefsSeeds.DawnCelestial, name: "Sunbriar Pod", coinPrice: 1e10, creditPrice: 1129, rarity: rarity.Celestial, img64: "" },
      plant: { tileRef: tileRefsPlants.DawnCelestialPlant, name: "Sunbriar", harvestType: harvestType.Multiple, secondsToMature: 1440 * 60, baseTileScale: 2.3 },
      crop: { tileRef: tileRefsPlants.DawnCelestial, name: "Sunbriar Bulb", baseSellPrice: 11e6, baseWeight: 6, baseTileScale: 0.4, maxScale: 2.5 }
    },
    MoonCelestial: {
      seed: { tileRef: tileRefsSeeds.MoonCelestial, name: "Mooncatcher Pod", coinPrice: 5e10, creditPrice: 1249, rarity: rarity.Celestial, img64: "" },
      plant: { tileRef: tileRefsPlants.MoonCelestialPlant, name: "Mooncatcher", harvestType: harvestType.Multiple, secondsToMature: 1440 * 60, baseTileScale: 2.5 },
      crop: { tileRef: tileRefsPlants.MoonCelestial, name: "Mooncatcher Bulb", baseSellPrice: 11e6, baseWeight: 2, baseTileScale: 0.4, maxScale: 2 }
    }
  };
  var mutationCatalog = {
    Gold: { name: "Gold", baseChance: 0.01, coinMultiplier: 25 },
    Rainbow: { name: "Rainbow", baseChance: 1e-3, coinMultiplier: 50 },
    Wet: { name: "Wet", baseChance: 0, coinMultiplier: 2, tileRef: tileRefsMutations.Wet },
    Chilled: { name: "Chilled", baseChance: 0, coinMultiplier: 2, tileRef: tileRefsMutations.Chilled },
    Frozen: { name: "Frozen", baseChance: 0, coinMultiplier: 10, tileRef: tileRefsMutations.Frozen },
    Dawnlit: { name: "Dawnlit", baseChance: 0, coinMultiplier: 2, tileRef: tileRefsMutations.Dawnlit },
    Ambershine: { name: "Amberlit", baseChance: 0, coinMultiplier: 5, tileRef: tileRefsMutations.Ambershine },
    Dawncharged: { name: "Dawn Radiant", baseChance: 0, coinMultiplier: 3, tileRef: tileRefsMutations.Dawncharged },
    Ambercharged: { name: "Amber Radiant", baseChance: 0, coinMultiplier: 6, tileRef: tileRefsMutations.Ambercharged }
  };
  var eggCatalog = {
    CommonEgg: { tileRef: tileRefsPets.CommonEgg, name: "Common Egg", coinPrice: 1e5, creditPrice: 19, rarity: rarity.Common, initialTileScale: 0.3, baseTileScale: 0.8, secondsToHatch: 600, faunaSpawnWeights: { Worm: 60, Snail: 35, Bee: 5 }, img64: "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" },
    UncommonEgg: { tileRef: tileRefsPets.UncommonEgg, name: "Uncommon Egg", coinPrice: 1e6, creditPrice: 48, rarity: rarity.Uncommon, initialTileScale: 0.3, baseTileScale: 0.8, secondsToHatch: 3600, faunaSpawnWeights: { Chicken: 65, Bunny: 25, Dragonfly: 10 }, img64: "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" },
    RareEgg: { tileRef: tileRefsPets.RareEgg, name: "Rare Egg", coinPrice: 1e7, creditPrice: 99, rarity: rarity.Rare, initialTileScale: 0.3, baseTileScale: 0.8, secondsToHatch: 21600, faunaSpawnWeights: { Pig: 90, Cow: 10 }, img64: "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" },
    LegendaryEgg: { tileRef: tileRefsPets.LegendaryEgg, name: "Legendary Egg", coinPrice: 1e8, creditPrice: 249, rarity: rarity.Legendary, initialTileScale: 0.3, baseTileScale: 0.8, secondsToHatch: 43200, faunaSpawnWeights: { Squirrel: 60, Turtle: 30, Goat: 10 }, img64: "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" },
    MythicalEgg: { tileRef: tileRefsPets.MythicalEgg, name: "Mythical Egg", coinPrice: 1e9, creditPrice: 599, rarity: rarity.Mythic, initialTileScale: 0.3, baseTileScale: 0.8, secondsToHatch: 86400, faunaSpawnWeights: { Butterfly: 75, Capybara: 5, Peacock: 20 }, img64: "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" }
  };
  var petCatalog = {
    Worm: {
      tileRef: tileRefsPets.Worm,
      name: "Worm",
      description: "",
      coinsToFullyReplenishHunger: 500,
      innateAbilityWeights: { SeedFinderI: 50, ProduceEater: 50 },
      baseTileScale: 0.6,
      maxScale: 2,
      maturitySellPrice: 5e3,
      matureWeight: 0.1,
      moveProbability: 0.1,
      hoursToMature: 12,
      rarity: rarity.Common,
      tileTransformOrigin: "bottom",
      nudgeY: 0.25,
      diet: ["Carrot", "Strawberry", "Aloe", "Tomato", "Apple"]
    },
    Snail: {
      tileRef: tileRefsPets.Snail,
      name: "Snail",
      description: "",
      coinsToFullyReplenishHunger: 1e3,
      innateAbilityWeights: { CoinFinderI: 100 },
      baseTileScale: 0.6,
      maxScale: 2,
      maturitySellPrice: 5e3,
      matureWeight: 0.15,
      moveProbability: 0.01,
      hoursToMature: 12,
      rarity: rarity.Common,
      tileTransformOrigin: "bottom",
      nudgeY: -0.25,
      diet: ["Blueberry", "Tomato", "Corn", "Daffodil"]
    },
    Bee: {
      tileRef: tileRefsPets.Bee,
      name: "Bee",
      coinsToFullyReplenishHunger: 1500,
      innateAbilityWeights: { ProduceScaleBoost: 50, ProduceMutationBoost: 50 },
      baseTileScale: 0.6,
      maxScale: 2.5,
      maturitySellPrice: 3e4,
      matureWeight: 0.2,
      moveProbability: 0.5,
      hoursToMature: 12,
      rarity: rarity.Common,
      diet: ["Strawberry", "Blueberry", "OrangeTulip", "Daffodil", "Lily"]
    },
    Chicken: {
      tileRef: tileRefsPets.Chicken,
      name: "Chicken",
      coinsToFullyReplenishHunger: 3e3,
      innateAbilityWeights: { EggGrowthBoost: 80, PetRefund: 20 },
      baseTileScale: 0.8,
      maxScale: 2,
      maturitySellPrice: 5e4,
      matureWeight: 3,
      moveProbability: 0.2,
      hoursToMature: 24,
      rarity: rarity.Uncommon,
      tileTransformOrigin: "bottom",
      nudgeY: -0.2,
      diet: ["Aloe", "Corn", "Watermelon", "Pumpkin"]
    },
    Bunny: {
      tileRef: tileRefsPets.Bunny,
      name: "Bunny",
      coinsToFullyReplenishHunger: 750,
      innateAbilityWeights: { CoinFinderII: 60, SellBoostI: 40 },
      baseTileScale: 0.7,
      maxScale: 2,
      maturitySellPrice: 75e3,
      matureWeight: 2,
      moveProbability: 0.3,
      hoursToMature: 24,
      rarity: rarity.Uncommon,
      tileTransformOrigin: "bottom",
      nudgeY: -0.2,
      diet: ["Carrot", "Strawberry", "Blueberry", "Echeveria"]
    },
    Dragonfly: {
      tileRef: tileRefsPets.Dragonfly,
      name: "Dragonfly",
      coinsToFullyReplenishHunger: 250,
      innateAbilityWeights: { HungerRestore: 70, PetMutationBoost: 30 },
      baseTileScale: 0.6,
      maxScale: 2.5,
      maturitySellPrice: 15e4,
      matureWeight: 0.2,
      moveProbability: 0.7,
      hoursToMature: 24,
      rarity: rarity.Uncommon,
      tileTransformOrigin: "center",
      diet: ["Apple", "OrangeTulip", "Echeveria"]
    },
    Pig: {
      tileRef: tileRefsPets.Pig,
      name: "Pig",
      coinsToFullyReplenishHunger: 5e4,
      innateAbilityWeights: { SellBoostII: 30, PetAgeBoost: 30, PetHatchSizeBoost: 30 },
      baseTileScale: 1,
      maxScale: 2.5,
      maturitySellPrice: 5e5,
      matureWeight: 200,
      moveProbability: 0.2,
      hoursToMature: 72,
      rarity: rarity.Rare,
      tileTransformOrigin: "bottom",
      nudgeY: -0.15,
      diet: ["Watermelon", "Pumpkin", "Mushroom", "Bamboo"]
    },
    Cow: {
      tileRef: tileRefsPets.Cow,
      name: "Cow",
      coinsToFullyReplenishHunger: 25e3,
      innateAbilityWeights: { SeedFinderII: 30, HungerBoost: 30, PlantGrowthBoost: 30 },
      baseTileScale: 1.1,
      maxScale: 2.5,
      maturitySellPrice: 1e6,
      matureWeight: 600,
      moveProbability: 0.1,
      hoursToMature: 72,
      rarity: rarity.Rare,
      tileTransformOrigin: "bottom",
      nudgeY: -0.15,
      diet: ["Coconut", "Banana", "BurrosTail", "Mushroom"]
    },
    Squirrel: {
      tileRef: tileRefsPets.Squirrel,
      name: "Squirrel",
      coinsToFullyReplenishHunger: 15e3,
      innateAbilityWeights: { CoinFinderIII: 70, SellBoostIII: 20, PetMutationBoostII: 10 },
      baseTileScale: 0.6,
      maxScale: 2,
      maturitySellPrice: 5e6,
      matureWeight: 0.5,
      moveProbability: 0.4,
      hoursToMature: 100,
      rarity: rarity.Legendary,
      tileTransformOrigin: "bottom",
      nudgeY: -0.1,
      diet: ["Pumpkin", "Banana", "Grape"]
    },
    Turtle: {
      tileRef: tileRefsPets.Turtle,
      name: "Turtle",
      coinsToFullyReplenishHunger: 1e5,
      innateAbilityWeights: { HungerRestoreII: 25, HungerBoostII: 25, PlantGrowthBoostII: 25, EggGrowthBoostII: 25 },
      baseTileScale: 1,
      maxScale: 2.5,
      maturitySellPrice: 1e7,
      matureWeight: 150,
      moveProbability: 0.05,
      hoursToMature: 100,
      rarity: rarity.Legendary,
      tileTransformOrigin: "bottom",
      nudgeY: -0.15,
      diet: ["Watermelon", "BurrosTail", "Bamboo", "Pepper"]
    },
    Goat: {
      tileRef: tileRefsPets.Goat,
      name: "Goat",
      coinsToFullyReplenishHunger: 2e4,
      innateAbilityWeights: { PetHatchSizeBoostII: 10, PetAgeBoostII: 40, PetXpBoost: 40 },
      baseTileScale: 1,
      maxScale: 2,
      maturitySellPrice: 2e7,
      matureWeight: 100,
      moveProbability: 0.2,
      hoursToMature: 100,
      rarity: rarity.Legendary,
      tileTransformOrigin: "bottom",
      nudgeY: -0.1,
      diet: ["Pumpkin", "Coconut", "Cactus", "Pepper"]
    },
    Butterfly: {
      tileRef: tileRefsPets.Butterfly,
      name: "Butterfly",
      coinsToFullyReplenishHunger: 25e3,
      innateAbilityWeights: { ProduceScaleBoostII: 40, ProduceMutationBoostII: 40, SeedFinderIII: 20 },
      baseTileScale: 0.6,
      maxScale: 2.5,
      maturitySellPrice: 5e7,
      matureWeight: 0.2,
      moveProbability: 0.6,
      hoursToMature: 144,
      rarity: rarity.Mythic,
      tileTransformOrigin: "center",
      diet: ["Daffodil", "Lily", "Grape", "Lemon", "Sunflower"]
    },
    Capybara: {
      tileRef: tileRefsPets.Capybara,
      name: "Capybara",
      coinsToFullyReplenishHunger: 15e4,
      innateAbilityWeights: { DoubleHarvest: 50, ProduceRefund: 50 },
      baseTileScale: 1,
      maxScale: 2.5,
      maturitySellPrice: 2e8,
      matureWeight: 50,
      moveProbability: 0.2,
      hoursToMature: 144,
      rarity: rarity.Mythic,
      tileTransformOrigin: "bottom",
      nudgeY: -0.1,
      diet: ["Lemon", "PassionFruit", "DragonFruit", "Lychee"]
    },
    Peacock: {
      tileRef: tileRefsPets.Peacock,
      name: "Peacock",
      coinsToFullyReplenishHunger: 1e5,
      innateAbilityWeights: { SellBoostIV: 40, PetXpBoostII: 50, PetRefundII: 10 },
      baseTileScale: 1.2,
      maxScale: 2.5,
      maturitySellPrice: 1e8,
      matureWeight: 5,
      moveProbability: 0.2,
      hoursToMature: 144,
      rarity: rarity.Mythic,
      tileTransformOrigin: "bottom",
      nudgeY: -0.1,
      diet: ["Cactus", "Sunflower", "Lychee"]
    }
  };
  var petAbilities = {
    ProduceScaleBoost: {
      name: "Crop Size Boost I",
      description: "Increases the scale of garden crops",
      trigger: "continuous",
      baseProbability: 0.3,
      baseParameters: { cropScaleIncreasePercentage: 6 }
    },
    ProduceScaleBoostII: {
      name: "Crop Size Boost II",
      description: "Increases the scale of garden crops",
      trigger: "continuous",
      baseProbability: 0.4,
      baseParameters: { cropScaleIncreasePercentage: 10 }
    },
    DoubleHarvest: {
      name: "Double Harvest",
      description: "Chance to duplicate harvested crops",
      trigger: "harvest",
      baseProbability: 5,
      baseParameters: {}
    },
    ProduceEater: {
      name: "Crop Eater",
      description: "Harvests non-mutated crops and sells them",
      trigger: "continuous",
      baseProbability: 60,
      baseParameters: { cropSellPriceIncreasePercentage: 150 }
    },
    SellBoostI: {
      name: "Sell Boost I",
      description: "Receive bonus coins when selling crops",
      trigger: "sellAllCrops",
      baseProbability: 10,
      baseParameters: { cropSellPriceIncreasePercentage: 20 }
    },
    SellBoostII: {
      name: "Sell Boost II",
      description: "Receive bonus coins when selling crops",
      trigger: "sellAllCrops",
      baseProbability: 12,
      baseParameters: { cropSellPriceIncreasePercentage: 30 }
    },
    SellBoostIII: {
      name: "Sell Boost III",
      description: "Receive bonus coins when selling crops",
      trigger: "sellAllCrops",
      baseProbability: 14,
      baseParameters: { cropSellPriceIncreasePercentage: 40 }
    },
    SellBoostIV: {
      name: "Sell Boost IV",
      description: "Receive bonus coins when selling crops",
      trigger: "sellAllCrops",
      baseProbability: 16,
      baseParameters: { cropSellPriceIncreasePercentage: 50 }
    },
    ProduceRefund: {
      name: "Crop Refund",
      description: "Chance to get crops back when selling",
      trigger: "sellAllCrops",
      baseProbability: 20,
      baseParameters: {}
    },
    PlantGrowthBoost: {
      name: "Plant Growth Boost I",
      description: "Reduces the time for plants to grow",
      trigger: "continuous",
      baseProbability: 24,
      baseParameters: { plantGrowthReductionMinutes: 3 }
    },
    PlantGrowthBoostII: {
      name: "Plant Growth Boost II",
      description: "Reduces the time for plants to grow",
      trigger: "continuous",
      baseProbability: 27,
      baseParameters: { plantGrowthReductionMinutes: 5 }
    },
    ProduceMutationBoost: {
      name: "Crop Mutation Boost I",
      description: "Increases the chance of garden crops gaining mutations",
      trigger: "continuous",
      baseParameters: { mutationChanceIncreasePercentage: 10 }
    },
    ProduceMutationBoostII: {
      name: "Crop Mutation Boost II",
      description: "Increases the chance of garden crops gaining mutations",
      trigger: "continuous",
      baseParameters: { mutationChanceIncreasePercentage: 15 }
    },
    PetMutationBoost: {
      name: "Pet Mutation Boost I",
      description: "Increases the chance of hatched pets gaining mutations",
      trigger: "hatchEgg",
      baseParameters: { mutationChanceIncreasePercentage: 7 }
    },
    PetMutationBoostII: {
      name: "Pet Mutation Boost II",
      description: "Increases the chance of hatched pets gaining mutations",
      trigger: "hatchEgg",
      baseParameters: { mutationChanceIncreasePercentage: 10 }
    },
    GoldGranter: {
      name: "Gold Granter",
      description: "Grants the Gold mutation to a garden crop",
      trigger: "continuous",
      baseProbability: 0.72,
      baseParameters: { grantedMutations: ["Gold"] }
    },
    RainbowGranter: {
      name: "Rainbow Granter",
      description: "Grants the Rainbow mutation to a garden crop",
      trigger: "continuous",
      baseProbability: 0.72,
      baseParameters: { grantedMutations: ["Rainbow"] }
    },
    EggGrowthBoost: {
      name: "Egg Growth Boost I",
      description: "Reduces the time for eggs to hatch",
      trigger: "continuous",
      baseProbability: 21,
      baseParameters: { eggGrowthTimeReductionMinutes: 7 }
    },
    EggGrowthBoostII: {
      name: "Egg Growth Boost II",
      description: "Reduces the time for eggs to hatch",
      trigger: "continuous",
      baseProbability: 24,
      baseParameters: { eggGrowthTimeReductionMinutes: 10 }
    },
    // NEW
    EggGrowthBoostIII: {
      name: "Egg Growth Boost III",
      description: "Reduces the time for eggs to hatch",
      trigger: "continuous",
      baseProbability: 27,
      baseParameters: { eggGrowthTimeReductionMinutes: 13 }
    },
    PetAgeBoost: {
      name: "Hatch XP Boost I",
      description: "Hatched pets start with bonus XP",
      trigger: "hatchEgg",
      baseProbability: 50,
      baseParameters: { bonusXp: 8e3 }
    },
    PetAgeBoostII: {
      name: "Hatch XP Boost II",
      description: "Hatched pets start with bonus XP",
      trigger: "hatchEgg",
      baseProbability: 60,
      baseParameters: { bonusXp: 12e3 }
    },
    PetHatchSizeBoost: {
      name: "Max Strength Boost I",
      description: "Increases the maximum strength of hatched pets",
      trigger: "hatchEgg",
      baseProbability: 12,
      baseParameters: { maxStrengthIncreasePercentage: 2.4 }
    },
    PetHatchSizeBoostII: {
      name: "Max Strength Boost II",
      description: "Increases the maximum strength of hatched pets",
      trigger: "hatchEgg",
      baseProbability: 14,
      baseParameters: { maxStrengthIncreasePercentage: 3.5 }
    },
    PetXpBoost: {
      name: "XP Boost I",
      description: "Gives bonus XP to active pets",
      trigger: "continuous",
      baseProbability: 30,
      baseParameters: { bonusXp: 300 }
    },
    PetXpBoostII: {
      name: "XP Boost II",
      description: "Gives bonus XP to active pets",
      trigger: "continuous",
      baseProbability: 35,
      baseParameters: { bonusXp: 400 }
    },
    HungerRestore: {
      name: "Hunger Restore I",
      description: "Restores the hunger of a random active pet",
      trigger: "continuous",
      baseProbability: 12,
      baseParameters: { hungerRestorePercentage: 30 }
    },
    // NEW
    HungerRestoreII: {
      name: "Hunger Restore II",
      description: "Restores the hunger of a random active pet",
      trigger: "continuous",
      baseProbability: 14,
      baseParameters: { hungerRestorePercentage: 35 }
    },
    HungerBoost: {
      name: "Hunger Boost I",
      description: "Reduces the hunger depletion rate of active pets",
      trigger: "continuous",
      baseParameters: { hungerDepletionRateDecreasePercentage: 12 }
    },
    HungerBoostII: {
      name: "Hunger Boost II",
      description: "Reduces the hunger depletion rate of active pets",
      trigger: "continuous",
      baseParameters: { hungerDepletionRateDecreasePercentage: 16 }
    },
    PetRefund: {
      name: "Pet Refund I",
      description: "Chance to receive the pet back as an egg when sold",
      trigger: "sellPet",
      baseProbability: 5,
      baseParameters: {}
    },
    // NEW
    PetRefundII: {
      name: "Pet Refund II",
      description: "Chance to receive the pet back as an egg when sold",
      trigger: "sellPet",
      baseProbability: 7,
      baseParameters: {}
    },
    Copycat: {
      name: "Copycat",
      description: "Chance to copy the ability of another active pet",
      trigger: "continuous",
      baseProbability: 1,
      baseParameters: {}
    },
    CoinFinderI: {
      name: "Coin Finder I",
      description: "Finds coins in your garden",
      trigger: "continuous",
      baseProbability: 35,
      baseParameters: { baseMaxCoinsFindable: 12e4 }
    },
    CoinFinderII: {
      name: "Coin Finder II",
      description: "Finds coins in your garden",
      trigger: "continuous",
      baseProbability: 13,
      baseParameters: { baseMaxCoinsFindable: 12e5 }
    },
    CoinFinderIII: {
      name: "Coin Finder III",
      description: "Finds coins in your garden",
      trigger: "continuous",
      baseProbability: 6,
      baseParameters: { baseMaxCoinsFindable: 1e7 }
    },
    SeedFinderI: {
      name: "Seed Finder I",
      description: "Finds common and uncommon seeds in your garden",
      trigger: "continuous",
      baseProbability: 40,
      baseParameters: {}
    },
    SeedFinderII: {
      name: "Seed Finder II",
      description: "Finds rare and legendary seeds in your garden",
      trigger: "continuous",
      baseProbability: 16,
      baseParameters: {}
    },
    SeedFinderIII: {
      name: "Seed Finder III",
      description: "Finds mythical seeds in your garden",
      trigger: "continuous",
      baseProbability: 9,
      baseParameters: {}
    },
    SeedFinderIV: {
      name: "Seed Finder IV",
      description: "Finds divine and celestial seeds in your garden",
      trigger: "continuous",
      baseProbability: 0.01,
      baseParameters: {}
    }
  };
  var toolCatalog = {
    WateringCan: {
      tileRef: tileRefsItems.WateringCan,
      name: "Watering Can",
      coinPrice: 5e3,
      creditPrice: 2,
      rarity: rarity.Common,
      description: "Speeds up growth of plant by 5 minutes. SINGLE USE.",
      isOneTimePurchase: false,
      baseTileScale: 0.6,
      maxInventoryQuantity: 99,
      img64: ""
    },
    PlanterPot: {
      tileRef: tileRefsItems.PlanterPot,
      name: "Planter Pot",
      coinPrice: 25e3,
      creditPrice: 5,
      rarity: rarity.Common,
      description: "Extract a plant to your inventory (can be replanted). SINGLE USE.",
      isOneTimePurchase: false,
      baseTileScale: 0.8,
      img64: ""
    },
    Shovel: {
      tileRef: tileRefsItems.Shovel,
      name: "Shovel",
      coinPrice: 1e6,
      creditPrice: 100,
      rarity: rarity.Uncommon,
      description: "Remove plants from your garden. UNLIMITED USES.",
      isOneTimePurchase: true,
      baseTileScale: 0.7,
      img64: "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"
    },
    RainbowPotion: {
      tileRef: tileRefsItems.RainbowPotion,
      name: "Rainbow Potion",
      coinPrice: 1 / 0,
      creditPrice: 1 / 0,
      rarity: rarity.Celestial,
      description: "Adds the Rainbow mutation to a crop in your garden. SINGLE USE.",
      isOneTimePurchase: true,
      baseTileScale: 1,
      img64: ""
    }
  };
  var decorCatalog = {
    // Rochers
    SmallRock: {
      tileRef: tileRefsDecor.SmallRock,
      name: "Small Garden Rock",
      coinPrice: 1e3,
      creditPrice: 2,
      rarity: rarity.Common,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.3,
      img64: "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"
    },
    MediumRock: {
      tileRef: tileRefsDecor.MediumRock,
      name: "Medium Garden Rock",
      coinPrice: 2500,
      creditPrice: 5,
      rarity: rarity.Common,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.21,
      img64: ""
    },
    LargeRock: {
      tileRef: tileRefsDecor.LargeRock,
      name: "Large Garden Rock",
      coinPrice: 5e3,
      creditPrice: 10,
      rarity: rarity.Common,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.1,
      img64: ""
    },
    // Bois
    WoodBench: {
      tileRef: tileRefsDecor.WoodBench,
      name: "Wood Bench",
      coinPrice: 1e4,
      creditPrice: 15,
      rarity: rarity.Common,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.3,
      avatarNudgeY: -0.18,
      img64: ""
    },
    WoodArch: {
      tileRef: tileRefsDecor.WoodArch,
      name: "Wood Arch",
      coinPrice: 2e4,
      creditPrice: 25,
      rarity: rarity.Common,
      baseTileScale: 1.53,
      isOneTimePurchase: false,
      nudgeY: -0.5,
      img64: ""
    },
    WoodBridge: {
      tileRef: tileRefsDecor.WoodBridge,
      name: "Wood Bridge",
      coinPrice: 4e4,
      creditPrice: 35,
      rarity: rarity.Common,
      baseTileScale: 1.22,
      isOneTimePurchase: false,
      nudgeY: -0.35,
      avatarNudgeY: -0.44,
      img64: ""
    },
    WoodLampPost: {
      tileRef: tileRefsDecor.WoodLampPost,
      name: "Wood Lamp Post",
      coinPrice: 8e4,
      creditPrice: 49,
      rarity: rarity.Common,
      baseTileScale: 1.5,
      isOneTimePurchase: false,
      nudgeY: -0.6,
      img64: "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"
    },
    WoodOwl: {
      tileRef: tileRefsDecor.WoodOwl,
      name: "Wood Owl",
      coinPrice: 9e4,
      creditPrice: 59,
      rarity: rarity.Common,
      baseTileScale: 1.3,
      isOneTimePurchase: false,
      nudgeY: -0.4,
      img64: ""
    },
    WoodBirdhouse: {
      tileRef: tileRefsDecor.Birdhouse,
      name: "Wood Birdhouse",
      coinPrice: 1e5,
      creditPrice: 69,
      rarity: rarity.Common,
      baseTileScale: 1.5,
      isOneTimePurchase: false,
      nudgeY: -0.6,
      img64: "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"
    },
    // Pierre
    StoneBench: {
      tileRef: tileRefsDecor.StoneBench,
      name: "Stone Bench",
      coinPrice: 1e6,
      creditPrice: 75,
      rarity: rarity.Uncommon,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.3,
      avatarNudgeY: -0.18,
      img64: "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"
    },
    StoneArch: {
      tileRef: tileRefsDecor.StoneArch,
      name: "Stone Arch",
      coinPrice: 4e6,
      creditPrice: 124,
      rarity: rarity.Uncommon,
      baseTileScale: 1.53,
      isOneTimePurchase: false,
      nudgeY: -0.5,
      img64: "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"
    },
    StoneBridge: {
      tileRef: tileRefsDecor.StoneBridge,
      name: "Stone Bridge",
      coinPrice: 5e6,
      creditPrice: 179,
      rarity: rarity.Uncommon,
      baseTileScale: 1.22,
      isOneTimePurchase: false,
      nudgeY: -0.35,
      avatarNudgeY: -0.44,
      img64: ""
    },
    StoneLampPost: {
      tileRef: tileRefsDecor.StoneLampPost,
      name: "Stone Lamp Post",
      coinPrice: 8e6,
      creditPrice: 199,
      rarity: rarity.Uncommon,
      baseTileScale: 1.5,
      isOneTimePurchase: false,
      nudgeY: -0.6,
      img64: ""
    },
    StoneGnome: {
      tileRef: tileRefsDecor.StoneGnome,
      name: "Stone Gnome",
      coinPrice: 9e6,
      creditPrice: 219,
      rarity: rarity.Uncommon,
      baseTileScale: 1.3,
      isOneTimePurchase: false,
      nudgeY: -0.4,
      img64: ""
    },
    StoneBirdbath: {
      tileRef: tileRefsDecor.StoneBirdbath,
      name: "Stone Birdbath",
      coinPrice: 1e7,
      creditPrice: 249,
      rarity: rarity.Uncommon,
      baseTileScale: 1.2,
      isOneTimePurchase: false,
      nudgeY: -0.46,
      img64: ""
    },
    // Marbre
    MarbleBench: {
      tileRef: tileRefsDecor.MarbleBench,
      name: "Marble Bench",
      coinPrice: 75e6,
      creditPrice: 349,
      rarity: rarity.Rare,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.3,
      avatarNudgeY: -0.18,
      img64: ""
    },
    MarbleArch: {
      tileRef: tileRefsDecor.MarbleArch,
      name: "Marble Arch",
      coinPrice: 1e8,
      creditPrice: 399,
      rarity: rarity.Rare,
      baseTileScale: 1.53,
      isOneTimePurchase: false,
      nudgeY: -0.5,
      img64: "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"
    },
    MarbleBridge: {
      tileRef: tileRefsDecor.MarbleBridge,
      name: "Marble Bridge",
      coinPrice: 15e7,
      creditPrice: 429,
      rarity: rarity.Rare,
      baseTileScale: 1.22,
      isOneTimePurchase: false,
      nudgeY: -0.35,
      avatarNudgeY: -0.44,
      img64: ""
    },
    MarbleLampPost: {
      tileRef: tileRefsDecor.MarbleLampPost,
      name: "Marble Lamp Post",
      coinPrice: 2e8,
      creditPrice: 449,
      rarity: rarity.Rare,
      baseTileScale: 1.5,
      isOneTimePurchase: false,
      nudgeY: -0.6,
      img64: ""
    },
    MarbleBlobling: {
      tileRef: tileRefsDecor.MarbleBlobling,
      name: "Marble Blobling",
      coinPrice: 3e8,
      creditPrice: 499,
      rarity: rarity.Rare,
      baseTileScale: 1.5,
      isOneTimePurchase: false,
      nudgeY: -0.56,
      img64: ""
    },
    // Spéciaux
    MiniFairyCottage: {
      tileRef: tileRefsDecor.MiniFairyCottage,
      name: "Mini Fairy Cottage",
      coinPrice: 5e8,
      creditPrice: 549,
      rarity: rarity.Rare,
      baseTileScale: 1.1,
      isOneTimePurchase: false,
      nudgeY: -0.37,
      img64: "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"
    },
    StrawScarecrow: {
      tileRef: tileRefsDecor.StrawScarecrow,
      name: "Straw Scarecrow",
      coinPrice: 1e9,
      creditPrice: 599,
      rarity: rarity.Legendary,
      baseTileScale: 1.8,
      isOneTimePurchase: false,
      nudgeY: -0.65,
      img64: ""
    },
    MiniFairyForge: {
      tileRef: tileRefsDecor.MiniFairyForge,
      name: "Mini Fairy Forge",
      coinPrice: 5e9,
      creditPrice: 979,
      rarity: rarity.Legendary,
      baseTileScale: 1,
      isOneTimePurchase: false,
      nudgeY: -0.3,
      img64: ""
    },
    MiniFairyKeep: {
      tileRef: tileRefsDecor.MiniFairyKeep,
      name: "Mini Fairy Keep",
      coinPrice: 25e9,
      creditPrice: 1249,
      rarity: rarity.Mythic,
      baseTileScale: 1.05,
      isOneTimePurchase: false,
      nudgeY: -0.33,
      img64: ""
    }
  };

  // src/services/fakeAtoms.ts
  var _fakeRegistry = /* @__PURE__ */ new Map();
  function _atomsByExactLabel(label2) {
    try {
      return findAtomsByLabel(new RegExp("^" + label2 + "$"));
    } catch {
      return [];
    }
  }
  function _findReadKey(atom) {
    if (atom && typeof atom.read === "function") return "read";
    for (const k of Object.keys(atom || {})) {
      const v = atom[k];
      if (typeof v === "function" && k !== "write" && k !== "onMount" && k !== "toString") {
        const ar = v.length;
        if (ar === 1 || ar === 2) return k;
      }
    }
    throw new Error("Impossible de localiser la fonction read() de l'atom");
  }
  function _getState(label2) {
    return _fakeRegistry.get(label2) || null;
  }
  async function _forceRepaintViaGate(gate) {
    if (!gate?.closeAction || !gate?.openAction) return;
    await gate.closeAction();
    await new Promise((r) => setTimeout(r, 0));
    await gate.openAction();
  }
  async function _ensureFakeInstalled(config) {
    const key2 = config.label;
    const existing = _fakeRegistry.get(key2);
    if (existing?.installed) return existing;
    const atoms = _atomsByExactLabel(config.label);
    if (!atoms.length) throw new Error(`${config.label} introuvable`);
    const state2 = existing ?? {
      config,
      enabled: false,
      payload: null,
      patched: /* @__PURE__ */ new Map(),
      installed: false
    };
    let gateAtom = null;
    if (config.gate?.label) gateAtom = getAtomByLabel(config.gate.label);
    for (const a of atoms) {
      const readKey = _findReadKey(a);
      const orig = a[readKey];
      a[readKey] = (get) => {
        try {
          if (gateAtom) get(gateAtom);
        } catch {
        }
        for (const dep of config.extraDeps || []) {
          try {
            const d = getAtomByLabel(dep);
            d && get(d);
          } catch {
          }
        }
        const real = orig(get);
        if (!state2.enabled || state2.payload == null) return real;
        return config.merge ? config.merge(real, state2.payload) : state2.payload;
      };
      state2.patched.set(a, { readKey, orig });
    }
    if (gateAtom && config.gate?.autoDisableOnClose) {
      state2.unsubGate = await jSub(gateAtom, async () => {
        let v;
        try {
          v = await jGet(gateAtom);
        } catch {
          v = null;
        }
        const isOpen = config.gate?.isOpen ? config.gate.isOpen(v) : !!v;
        if (!isOpen && state2.enabled) state2.enabled = false;
      });
    }
    state2.installed = true;
    _fakeRegistry.set(key2, state2);
    return state2;
  }
  async function fakeShow(config, payload, options) {
    await ensureStore();
    const st = await _ensureFakeInstalled(config);
    st.payload = payload;
    st.enabled = true;
    if (options?.merge && !config.merge) {
      config.merge = (_real, fake) => fake;
    }
    if (options?.openGate && config.gate?.openAction) await config.gate.openAction();
    if (st.autoTimer) {
      clearTimeout(st.autoTimer);
      st.autoTimer = null;
    }
    if (options?.autoRestoreMs && options.autoRestoreMs > 0) {
      st.autoTimer = setTimeout(() => {
        void fakeHide(config.label);
      }, options.autoRestoreMs);
    }
  }
  async function fakeHide(label2) {
    const st = _getState(label2);
    if (!st) return;
    st.enabled = false;
    st.payload = null;
    if (st.autoTimer) {
      clearTimeout(st.autoTimer);
      st.autoTimer = null;
    }
    await _forceRepaintViaGate(st.config.gate);
  }

  // src/services/fakeModal.ts
  async function openModal(modalId) {
    try {
      await Atoms.ui.activeModal.set(modalId);
    } catch {
    }
  }
  async function closeModal(_modalId) {
    try {
      await Atoms.ui.activeModal.set(null);
    } catch {
    }
  }
  function isModalOpen(value, modalId) {
    return value === modalId;
  }
  async function isModalOpenAsync(modalId) {
    try {
      const v = await Atoms.ui.activeModal.get();
      return isModalOpen(v, modalId);
    } catch {
      return false;
    }
  }
  async function waitModalClosed(modalId, timeoutMs = 12e4) {
    const t0 = performance.now();
    while (performance.now() - t0 < timeoutMs) {
      try {
        const v = await Atoms.ui.activeModal.get();
        if (!isModalOpen(v, modalId)) return true;
      } catch {
        return true;
      }
      await new Promise((r) => setTimeout(r, 80));
    }
    return false;
  }
  var SHARED_MYDATA_PATCH = {
    label: Atoms.data.myData.label,
    merge: (real, patch) => {
      const base = real && typeof real === "object" ? real : {};
      const add = patch && typeof patch === "object" ? patch : {};
      return { ...base, ...add };
    },
    gate: {
      label: Atoms.ui.activeModal.label,
      isOpen: (v) => v === "inventory" || v === "journal",
      autoDisableOnClose: true
    }
  };
  var INVENTORY_ATOM_PATCH = {
    label: Atoms.inventory.myInventory.label,
    merge: (_real, fake) => fake,
    gate: {
      label: Atoms.ui.activeModal.label,
      isOpen: (v) => v === "inventory",
      autoDisableOnClose: true
    }
  };
  var INVENTORY_MODAL_ID = "inventory";
  async function openInventoryPanel() {
    return openModal(INVENTORY_MODAL_ID);
  }
  async function closeInventoryPanel() {
    return closeModal(INVENTORY_MODAL_ID);
  }
  function isInventoryOpen(v) {
    return isModalOpen(v, INVENTORY_MODAL_ID);
  }
  async function isInventoryPanelOpen() {
    return isModalOpenAsync(INVENTORY_MODAL_ID);
  }
  async function waitInventoryPanelClosed(timeoutMs = 12e4) {
    return waitModalClosed(INVENTORY_MODAL_ID, timeoutMs);
  }
  async function fakeInventoryShow(payload, opts) {
    const shouldOpen = opts?.open !== false;
    await fakeShow(SHARED_MYDATA_PATCH, { inventory: payload }, {
      openGate: false,
      autoRestoreMs: opts?.autoRestoreMs
    });
    await fakeShow(INVENTORY_ATOM_PATCH, payload, {
      openGate: false,
      autoRestoreMs: opts?.autoRestoreMs
    });
    if (shouldOpen) await openInventoryPanel();
  }
  async function fakeInventoryHide() {
    await fakeHide(INVENTORY_ATOM_PATCH.label);
    await fakeHide(SHARED_MYDATA_PATCH.label);
    await closeInventoryPanel();
  }
  var JOURNAL_MODAL_ID = "journal";
  async function openJournalModal() {
    return openModal(JOURNAL_MODAL_ID);
  }
  async function isJournalModalOpen() {
    return isModalOpenAsync(JOURNAL_MODAL_ID);
  }
  async function waitJournalModalClosed(timeoutMs = 12e4) {
    return waitModalClosed(JOURNAL_MODAL_ID, timeoutMs);
  }
  async function fakeJournalShow(payload, opts) {
    const shouldOpen = opts?.open !== false;
    await fakeHide(INVENTORY_ATOM_PATCH.label);
    await fakeShow(SHARED_MYDATA_PATCH, { journal: payload ?? {} }, {
      openGate: false,
      autoRestoreMs: opts?.autoRestoreMs
    });
    if (shouldOpen) await openJournalModal();
  }

  // src/ui/menu.ts
  var Menu = class {
    constructor(opts = {}) {
      this.opts = opts;
      // NOTE: je rends root public pour pouvoir faire ui.root.appendChild(...) côté menus
      __publicField(this, "root");
      __publicField(this, "tabBar");
      __publicField(this, "views");
      __publicField(this, "tabs", /* @__PURE__ */ new Map());
      __publicField(this, "events", /* @__PURE__ */ new Map());
      __publicField(this, "currentId", null);
      __publicField(this, "lsKeyActive");
      __publicField(this, "_altDown", false);
      __publicField(this, "_hovering", false);
      __publicField(this, "_onKey", (e) => {
        const alt = e.altKey;
        if (alt !== this._altDown) {
          this._altDown = alt;
          this._updateAltCursor();
        }
      });
      __publicField(this, "_onBlur", () => {
        this._altDown = false;
        this._updateAltCursor();
      });
      __publicField(this, "_onEnter", () => {
        this._hovering = true;
        this._updateAltCursor();
      });
      __publicField(this, "_onLeave", () => {
        this._hovering = false;
        this._updateAltCursor();
      });
      this.lsKeyActive = `menu:${opts.id || "default"}:activeTab`;
    }
    /** Monte le menu dans un conteneur */
    mount(container) {
      this.ensureStyles();
      container.innerHTML = "";
      this.root = el("div", `qmm ${this.opts.classes || ""} ${this.opts.compact ? "qmm-compact" : ""}`);
      if (this.opts.startHidden) this.root.style.display = "none";
      this.tabBar = el("div", "qmm-tabs");
      this.views = el("div", "qmm-views");
      this.root.appendChild(this.tabBar);
      this.root.appendChild(this.views);
      container.appendChild(this.root);
      if (this.tabs.size) {
        for (const [id, def] of this.tabs) this.createTabView(id, def);
        this.restoreActive();
      }
      this.updateTabsBarVisibility();
      this.root.addEventListener("pointerenter", this._onEnter);
      this.root.addEventListener("pointerleave", this._onLeave);
      window.addEventListener("keydown", this._onKey, true);
      window.addEventListener("keyup", this._onKey, true);
      window.addEventListener("blur", this._onBlur);
      document.addEventListener("visibilitychange", this._onBlur);
      if (this.opts.startWindowHidden) this.setWindowVisible(false);
      this.emit("mounted");
    }
    /** Démonte le menu (optionnel) */
    unmount() {
      this.root?.removeEventListener("pointerenter", this._onEnter);
      this.root?.removeEventListener("pointerleave", this._onLeave);
      window.removeEventListener("keydown", this._onKey, true);
      window.removeEventListener("keyup", this._onKey, true);
      window.removeEventListener("blur", this._onBlur);
      document.removeEventListener("visibilitychange", this._onBlur);
      if (this.root?.parentElement) this.root.parentElement.removeChild(this.root);
      this.emit("unmounted");
    }
    /** Retourne l'élément fenêtre englobant (barre – / ×) */
    getWindowEl() {
      if (!this.root) return null;
      const sel = this.opts.windowSelector || ".qws-win";
      return this.root.closest(sel);
    }
    /** Affiche/masque la FENÊTRE (barre incluse) */
    setWindowVisible(visible) {
      const win = this.getWindowEl();
      if (!win) return;
      win.classList.toggle("is-hidden", !visible);
      this.emit(visible ? "window:show" : "window:hide");
    }
    /** Bascule l’état de la fenêtre. Retourne true si maintenant visible. */
    toggleWindow() {
      const win = this.getWindowEl();
      if (!win) return false;
      const willShow = win.classList.contains("is-hidden");
      this.setWindowVisible(willShow);
      return willShow;
    }
    /** Donne l’état courant de la fenêtre (true = visible) */
    isWindowVisible() {
      const win = this.getWindowEl();
      if (!win) return true;
      return !win.classList.contains("is-hidden") && getComputedStyle(win).display !== "none";
    }
    /** Affiche/masque le root */
    setVisible(visible) {
      if (!this.root) return;
      this.root.style.display = visible ? "" : "none";
      this.emit(visible ? "show" : "hide");
    }
    toggle() {
      if (!this.root) return false;
      const v = this.root.style.display === "none";
      this.setVisible(v);
      return v;
    }
    /** Ajoute un onglet (peut être appelé avant ou après mount) */
    addTab(id, title, render) {
      this.tabs.set(id, { title, render, badge: null });
      if (this.root) {
        this.createTabView(id, this.tabs.get(id));
        this.updateTabsBarVisibility();
      }
      return this;
    }
    /** Ajoute plusieurs onglets en une fois */
    addTabs(defs) {
      defs.forEach((d) => this.addTab(d.id, d.title, d.render));
      return this;
    }
    /** Met à jour le titre de l’onglet (ex: compteur, libellé) */
    setTabTitle(id, title) {
      const def = this.tabs.get(id);
      if (!def) return;
      def.title = title;
      if (def.btn) {
        const label2 = def.btn.querySelector(".label");
        if (label2) label2.textContent = title;
      }
    }
    /** Ajoute/retire un badge à droite du titre (ex: “3”, “NEW”, “!”) */
    setTabBadge(id, text) {
      const def = this.tabs.get(id);
      if (!def || !def.btn) return;
      if (!def.badge) {
        def.badge = document.createElement("span");
        def.badge.className = "badge";
        def.btn.appendChild(def.badge);
      }
      if (text == null || text === "") {
        def.badge.style.display = "none";
      } else {
        def.badge.textContent = text;
        def.badge.style.display = "";
      }
    }
    /** Force le re-render d’un onglet (ré-exécute son render) */
    refreshTab(id) {
      const def = this.tabs.get(id);
      if (!def?.view) return;
      const scroller = this.findScrollableAncestor(def.view);
      const st = scroller ? scroller.scrollTop : null;
      const sl = scroller ? scroller.scrollLeft : null;
      const activeId = document.activeElement?.id || null;
      def.view.innerHTML = "";
      try {
        def.render(def.view, this);
      } catch (e) {
        def.view.textContent = String(e);
      }
      if (this.currentId === id) this.switchTo(id);
      this.emit("tab:render", id);
      if (scroller && st != null) {
        requestAnimationFrame(() => {
          try {
            scroller.scrollTop = st;
            scroller.scrollLeft = sl ?? 0;
          } catch {
          }
          if (activeId) {
            const n = document.getElementById(activeId);
            if (n && n.focus) try {
              n.focus();
            } catch {
            }
          }
        });
      }
    }
    findScrollableAncestor(start) {
      function isScrollable(el3) {
        const s = getComputedStyle(el3);
        const oy = s.overflowY || s.overflow;
        return /(auto|scroll)/.test(oy) && el3.scrollHeight > el3.clientHeight;
      }
      let el2 = start;
      while (el2) {
        if (isScrollable(el2)) return el2;
        el2 = el2.parentElement;
      }
      return document.querySelector(".qws-win");
    }
    firstTabId() {
      const it = this.tabs.keys().next();
      return it.done ? null : it.value ?? null;
    }
    _updateAltCursor() {
      if (!this.root) return;
      this.root.classList.toggle("qmm-alt-drag", this._altDown && this._hovering);
    }
    /** Récupère la vue DOM d’un onglet (pratique pour updates ciblées) */
    getTabView(id) {
      return this.tabs.get(id)?.view ?? null;
    }
    /** Retire un onglet */
    removeTab(id) {
      const def = this.tabs.get(id);
      if (!def) return;
      this.tabs.delete(id);
      const btn = this.tabBar?.querySelector(`button[data-id="${cssq(id)}"]`);
      if (btn && btn.parentElement) btn.parentElement.removeChild(btn);
      if (def.view && def.view.parentElement) def.view.parentElement.removeChild(def.view);
      if (this.currentId === id) {
        const first = this.tabs.keys().next().value || null;
        this.switchTo(first);
      }
      this.updateTabsBarVisibility();
    }
    /** Active un onglet (id=null => affiche toutes les vues) */
    switchTo(id) {
      this.currentId = id;
      [...this.tabBar.children].forEach((ch) => ch.classList.toggle("active", ch.dataset.id === id || id === null));
      [...this.views.children].forEach((ch) => ch.classList.toggle("active", ch.dataset.id === id || id === null));
      this.persistActive();
      this.emit("tab:change", id);
    }
    /** Événements */
    on(event, handler) {
      if (!this.events.has(event)) this.events.set(event, /* @__PURE__ */ new Set());
      this.events.get(event).add(handler);
      return () => this.off(event, handler);
    }
    off(event, handler) {
      this.events.get(event)?.delete(handler);
    }
    emit(event, ...args) {
      this.events.get(event)?.forEach((h) => {
        try {
          h(...args);
        } catch {
        }
      });
    }
    // ---------- Helpers UI publics (réutilisables dans tes tabs) ----------
    btn(label2, onClick) {
      const b = el("button", "qmm-btn", `<span class="label">${escapeHtml(label2)}</span>`);
      b.onclick = onClick;
      return b;
    }
    label(text) {
      const l = el("label", "qmm-label");
      l.textContent = text;
      return l;
    }
    row(...children) {
      const r = el("div", "qmm-row");
      children.forEach((c) => r.appendChild(c));
      return r;
    }
    section(title) {
      const s = el("div", "qmm-section");
      s.appendChild(el("div", "qmm-section-title", escapeHtml(title)));
      return s;
    }
    inputNumber(min = 0, max = 9999, step = 1, value = 0) {
      const wrap = el("div", "qmm-input-number");
      const i = el("input", "qmm-input qmm-input-number-input");
      i.type = "number";
      i.min = String(min);
      i.max = String(max);
      i.step = String(step);
      i.value = String(value);
      i.inputMode = "numeric";
      const spin = el("div", "qmm-spin");
      const up = el("button", "qmm-step qmm-step--up", "\u25B2");
      const down = el("button", "qmm-step qmm-step--down", "\u25BC");
      up.type = down.type = "button";
      const clamp = () => {
        const n = Number(i.value);
        if (Number.isFinite(n)) {
          const lo = Number(i.min), hi = Number(i.max);
          const clamped = Math.max(lo, Math.min(hi, n));
          if (clamped !== n) i.value = String(clamped);
        }
      };
      const bump = (dir) => {
        if (dir < 0) i.stepDown();
        else i.stepUp();
        clamp();
        i.dispatchEvent(new Event("input", { bubbles: true }));
        i.dispatchEvent(new Event("change", { bubbles: true }));
      };
      const addSpin = (btn, dir) => {
        let pressTimer = null;
        let repeatTimer = null;
        let suppressNextClick = false;
        const start = (ev) => {
          suppressNextClick = false;
          pressTimer = window.setTimeout(() => {
            suppressNextClick = true;
            bump(dir);
            repeatTimer = window.setInterval(() => bump(dir), 60);
          }, 300);
          btn.setPointerCapture?.(ev.pointerId);
        };
        const stop = () => {
          if (pressTimer != null) {
            clearTimeout(pressTimer);
            pressTimer = null;
          }
          if (repeatTimer != null) {
            clearInterval(repeatTimer);
            repeatTimer = null;
          }
        };
        btn.addEventListener("pointerdown", start);
        ["pointerup", "pointercancel", "pointerleave", "blur"].forEach(
          (ev) => btn.addEventListener(ev, stop)
        );
        btn.addEventListener("click", (e) => {
          if (suppressNextClick) {
            e.preventDefault();
            e.stopPropagation();
            suppressNextClick = false;
            return;
          }
          bump(dir);
        });
      };
      addSpin(up, 1);
      addSpin(down, -1);
      i.addEventListener("change", clamp);
      spin.append(up, down);
      wrap.append(i, spin);
      i.wrap = wrap;
      return i;
    }
    inputText(placeholder = "", value = "") {
      const i = el("input", "qmm-input");
      i.type = "text";
      i.placeholder = placeholder;
      i.value = value;
      return i;
    }
    checkbox(checked = false) {
      const i = el("input", "qmm-check");
      i.type = "checkbox";
      i.checked = checked;
      return i;
    }
    radio(name, value, checked = false) {
      const i = el("input", "qmm-radio");
      i.type = "radio";
      i.name = name;
      i.value = value;
      i.checked = checked;
      return i;
    }
    slider(min = 0, max = 100, step = 1, value = 0) {
      const i = el("input", "qmm-range");
      i.type = "range";
      i.min = String(min);
      i.max = String(max);
      i.step = String(step);
      i.value = String(value);
      return i;
    }
    switch(checked = false) {
      const i = this.checkbox(checked);
      i.classList.add("qmm-switch");
      return i;
    }
    // Helpers “tableau simple” pour lister les items
    table(headers, opts) {
      const wrap = document.createElement("div");
      wrap.className = "qmm-table-wrap";
      if (opts?.minimal) wrap.classList.add("qmm-table-wrap--minimal");
      const scroller = document.createElement("div");
      scroller.className = "qmm-table-scroll";
      if (opts?.maxHeight) scroller.style.maxHeight = opts.maxHeight;
      wrap.appendChild(scroller);
      const t = document.createElement("table");
      t.className = "qmm-table";
      if (opts?.minimal) t.classList.add("qmm-table--minimal");
      if (opts?.compact) t.classList.add("qmm-table--compact");
      if (opts?.fixed) t.style.tableLayout = "fixed";
      const thead = document.createElement("thead");
      const trh = document.createElement("tr");
      headers.forEach((h) => {
        const th = document.createElement("th");
        if (typeof h === "string") {
          th.textContent = h;
        } else {
          th.textContent = h.label ?? "";
          if (h.align) th.classList.add(`is-${h.align}`);
          if (h.width) th.style.width = h.width;
        }
        trh.appendChild(th);
      });
      thead.appendChild(trh);
      const tbody = document.createElement("tbody");
      t.append(thead, tbody);
      scroller.appendChild(t);
      return { root: wrap, tbody };
    }
    segmented(items, selected, onChange, opts) {
      const root = document.createElement("div");
      root.className = "qmm-seg";
      if (opts?.fullWidth) root.classList.add("qmm-seg--full");
      if (opts?.id) root.id = opts.id;
      root.setAttribute("role", "radiogroup");
      if (opts?.ariaLabel) root.setAttribute("aria-label", opts.ariaLabel);
      const rail = document.createElement("div");
      rail.className = "qmm-seg__indicator";
      root.appendChild(rail);
      let value = selected;
      const btns = [];
      const setSelected = (v, focus = false) => {
        value = v;
        for (const b of btns) {
          const active = b.dataset.value === v;
          b.setAttribute("aria-checked", active ? "true" : "false");
          b.tabIndex = active ? 0 : -1;
          b.classList.toggle("active", active);
          if (active && focus) b.focus();
        }
        moveIndicator();
        onChange?.(value);
      };
      const moveIndicator = () => {
        const active = btns.find((b) => b.dataset.value === value);
        if (!active) return;
        const i = btns.indexOf(active);
        const n = btns.length;
        const cs = getComputedStyle(root);
        const gap = parseFloat(cs.gap || cs.columnGap || "0") || 0;
        const bL = parseFloat(cs.borderLeftWidth || "0") || 0;
        const bR = parseFloat(cs.borderRightWidth || "0") || 0;
        const rRoot = root.getBoundingClientRect();
        const rBtn = active.getBoundingClientRect();
        let left = rBtn.left - rRoot.left - bL;
        let width = rBtn.width;
        const padW = rRoot.width - bL - bR;
        if (n === 1) {
          left = 0;
          width = padW;
        } else if (i === 0) {
          const rightEdge = left + width + gap / 2;
          left = 0;
          width = rightEdge - left;
        } else if (i === n - 1) {
          left = left - gap / 2;
          width = padW - left;
        } else {
          left = left - gap / 2;
          width = width + gap;
        }
        const dpr = window.devicePixelRatio || 1;
        const snap = (x) => Math.round(x * dpr) / dpr;
        rail.style.transform = `translate3d(${snap(left)}px,0,0)`;
        rail.style.width = `${snap(width)}px`;
      };
      items.forEach(({ value: v, label: label2, disabled }) => {
        const b = document.createElement("button");
        b.type = "button";
        b.className = "qmm-seg__btn";
        b.dataset.value = String(v);
        b.setAttribute("role", "radio");
        b.setAttribute("aria-checked", v === selected ? "true" : "false");
        b.tabIndex = v === selected ? 0 : -1;
        b.disabled = !!disabled;
        b.textContent = label2;
        b.addEventListener("click", () => {
          if (!b.disabled) setSelected(v, false);
        });
        b.addEventListener("keydown", (e) => {
          if (!["ArrowRight", "ArrowLeft", "Home", "End"].includes(e.key)) return;
          e.preventDefault();
          const idx = items.findIndex((it) => it.value === value);
          if (e.key === "Home") {
            setSelected(items[0].value, true);
            return;
          }
          if (e.key === "End") {
            setSelected(items[items.length - 1].value, true);
            return;
          }
          const dir = e.key === "ArrowRight" ? 1 : -1;
          let j = idx;
          for (let k = 0; k < items.length; k++) {
            j = (j + dir + items.length) % items.length;
            if (!items[j].disabled) {
              setSelected(items[j].value, true);
              break;
            }
          }
        });
        btns.push(b);
        root.appendChild(b);
      });
      const ro = window.ResizeObserver ? new ResizeObserver(moveIndicator) : null;
      if (ro) ro.observe(root);
      window.addEventListener("resize", moveIndicator);
      queueMicrotask(moveIndicator);
      root.get = () => value;
      root.set = (v) => setSelected(v, false);
      return root;
    }
    radioGroup(name, options, selected, onChange) {
      const wrap = el("div", "qmm-radio-group");
      for (const { value, label: label2 } of options) {
        const r = this.radio(name, value, selected === value);
        const lab = document.createElement("label");
        lab.className = "qmm-radio-label";
        lab.appendChild(r);
        lab.appendChild(document.createTextNode(label2));
        r.onchange = () => {
          if (r.checked) onChange(value);
        };
        wrap.appendChild(lab);
      }
      return wrap;
    }
    /** Bind LS: sauvegarde automatique via toStr/parse */
    bindLS(key2, read, write, parse, toStr) {
      try {
        const raw = localStorage.getItem(key2);
        if (raw != null) write(parse(raw));
      } catch {
      }
      return { save: () => {
        try {
          localStorage.setItem(key2, toStr(read()));
        } catch {
        }
      } };
    }
    /* -------------------------- split2 helper -------------------------- */
    /** Crée un layout 2 colonnes (gauche/droite) en CSS Grid.
     *  leftWidth: ex "200px" | "18rem" | "minmax(160px, 30%)" */
    split2(leftWidth = "260px") {
      const root = el("div", "qmm-split");
      root.style.gridTemplateColumns = "minmax(160px, max-content) 1fr";
      const left = el("div", "qmm-split-left");
      const right = el("div", "qmm-split-right");
      root.appendChild(left);
      root.appendChild(right);
      return { root, left, right };
    }
    /* -------------------------- VTabs factory -------------------------- */
    /** Crée des “tabs verticaux” génériques (liste sélectionnable + filtre). */
    vtabs(options = {}) {
      return new VTabs(this, options);
    }
    hotkeyButton(initial, onChange, opts) {
      const emptyLabel = opts?.emptyLabel ?? "None";
      const listeningLabel = opts?.listeningLabel ?? "Press a key\u2026";
      const clearable = opts?.clearable ?? true;
      let hk = initial ?? null;
      let recording = false;
      if (opts?.storageKey) {
        try {
          hk = stringToHotkey(localStorage.getItem(opts.storageKey) || "") ?? initial ?? null;
        } catch {
        }
      }
      const btn = document.createElement("button");
      btn.type = "button";
      btn.className = "qmm-hotkey";
      btn.setAttribute("aria-live", "polite");
      const render = () => {
        btn.classList.toggle("is-recording", recording);
        btn.classList.toggle("is-empty", !hk);
        if (recording) {
          btn.textContent = listeningLabel;
          btn.title = "Listening\u2026 press a key (Esc to cancel, Backspace to clear)";
        } else if (!hk) {
          btn.textContent = emptyLabel;
          btn.title = "No key assigned";
        } else {
          btn.textContent = hotkeyToString(hk);
          btn.title = "Click to rebind \u2022 Right-click to clear";
        }
      };
      const stopRecording = (commit) => {
        recording = false;
        if (!commit) {
          render();
          return;
        }
        render();
      };
      const save = () => {
        if (opts?.storageKey) {
          const str = hotkeyToString(hk);
          try {
            if (str) localStorage.setItem(opts.storageKey, str);
            else localStorage.removeItem(opts.storageKey);
          } catch {
          }
        }
        onChange?.(hk, opts?.storageKey ? hotkeyToString(hk) : void 0);
      };
      const handleKeyDown = (e) => {
        if (!recording) return;
        e.preventDefault();
        e.stopPropagation();
        if (e.key === "Escape") {
          stopRecording(false);
          window.removeEventListener("keydown", handleKeyDown, true);
          return;
        }
        if ((e.key === "Backspace" || e.key === "Delete") && clearable) {
          hk = null;
          save();
          stopRecording(true);
          window.removeEventListener("keydown", handleKeyDown, true);
          return;
        }
        const next = eventToHotkey(e);
        if (!next) {
          return;
        }
        hk = next;
        save();
        stopRecording(true);
        window.removeEventListener("keydown", handleKeyDown, true);
      };
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        if (!recording) {
          recording = true;
          render();
          window.addEventListener("keydown", handleKeyDown, true);
          btn.focus();
        }
      });
      if (clearable) {
        btn.addEventListener("contextmenu", (e) => {
          e.preventDefault();
          if (hk) {
            hk = null;
            save();
            render();
          }
        });
      }
      render();
      return btn;
    }
    // ---------- internes ----------
    createTabView(id, def) {
      const b = document.createElement("button");
      b.className = "qmm-tab";
      b.dataset.id = id;
      b.innerHTML = `<span class="label">${escapeHtml(def.title)}</span><span class="badge" style="display:none"></span>`;
      const badgeEl = b.querySelector(".badge");
      def.btn = b;
      def.badge = badgeEl;
      b.onclick = () => this.switchTo(id);
      this.tabBar.appendChild(b);
      const view = el("div", "qmm-view");
      view.dataset.id = id;
      def.view = view;
      this.views.appendChild(view);
      try {
        def.render(view, this);
      } catch (e) {
        view.textContent = String(e);
      }
      if (!this.currentId) this.switchTo(id);
    }
    persistActive() {
      if (!this.currentId) return;
      try {
        localStorage.setItem(this.lsKeyActive, this.currentId);
      } catch {
      }
    }
    restoreActive() {
      let id = null;
      try {
        id = localStorage.getItem(this.lsKeyActive);
      } catch {
      }
      if (id && this.tabs.has(id)) this.switchTo(id);
      else if (this.tabs.size) this.switchTo(this.firstTabId());
    }
    updateTabsBarVisibility() {
      if (!this.tabBar || !this.root) return;
      const hasTabs = this.tabs.size > 0;
      if (hasTabs) {
        if (!this.tabBar.parentElement) {
          this.root.insertBefore(this.tabBar, this.views);
        }
        this.tabBar.style.display = "flex";
        this.root.classList.remove("qmm-no-tabs");
      } else {
        if (this.tabBar.parentElement) {
          this.tabBar.parentElement.removeChild(this.tabBar);
        }
        this.root.classList.add("qmm-no-tabs");
      }
    }
    ensureStyles() {
      if (document.getElementById("__qmm_css__")) return;
      const css = `
    /* ================= Modern UI for qmm ================= */
.qmm{
  --qmm-bg:        #0f1318;
  --qmm-bg-soft:   #0b0f13;
  --qmm-panel:     #111823cc;
  --qmm-border:    #ffffff22;
  --qmm-border-2:  #ffffff14;
  --qmm-accent:    #7aa2ff;
  --qmm-accent-2:  #92b2ff;
  --qmm-text:      #e7eef7;
  --qmm-text-dim:  #b9c3cf;
  --qmm-shadow:    0 6px 20px rgba(0,0,0,.35);
  --qmm-blur:      8px;

  display:flex; flex-direction:column; gap:10px; color:var(--qmm-text);
}
.qmm-compact{ gap:6px }

/* ---------- Tabs (pill + underline) ---------- */
.qmm-tabs{
  display:flex; gap:6px; flex-wrap:wrap; align-items:flex-end;
  padding:0 6px 2px 6px; position:relative; isolation:isolate;
  border-bottom:1px solid var(--qmm-border);
  background:linear-gradient(180deg, rgba(255,255,255,.04), transparent);
  border-top-left-radius:10px; border-top-right-radius:10px;
}
.qmm-no-tabs .qmm-views{ margin-top:0 }

.qmm-tab{
  flex:1 1 0; min-width:0; cursor:pointer;
  display:inline-flex; justify-content:center; align-items:center; gap:8px;
  padding:8px 12px; color:var(--qmm-text);
  background:transparent; border:1px solid transparent; border-bottom:none;
  border-top-left-radius:10px; border-top-right-radius:10px;
  position:relative; margin:0; margin-bottom:-1px;
  transition:background .18s ease, color .18s ease, box-shadow .18s ease, transform .12s ease;
}
.qmm-compact .qmm-tab{ padding:6px 10px }
.qmm-tab:hover{ background:rgba(255,255,255,.06) }
.qmm-tab:active{ transform:translateY(1px) }
.qmm-tab:focus-visible{ outline:2px solid var(--qmm-accent); outline-offset:2px; border-radius:10px }

.qmm-tab .badge{
  font-size:11px; line-height:1; padding:2px 6px; border-radius:999px;
  background:#ffffff1a; border:1px solid #ffffff22;
}

.qmm-tab.active{
  background:linear-gradient(180deg, rgba(255,255,255,.08), rgba(255,255,255,.03));
  color:#fff; box-shadow:inset 0 -1px 0 #0007;
}
.qmm-tab.active::after{
  content:""; position:absolute; left:10%; right:10%; bottom:-1px; height:2px;
  background:linear-gradient(90deg, transparent, var(--qmm-accent), transparent);
  border-radius:2px; box-shadow:0 0 12px var(--qmm-accent-2);
}

/* ---------- Views panel ---------- */
.qmm-views{
  border:1px solid var(--qmm-border); border-radius:12px; padding:12px;
  background:var(--qmm-panel); backdrop-filter:blur(var(--qmm-blur));
  display:flex; flex-direction:column;
  min-width:0; min-height:0; overflow:auto; box-shadow:var(--qmm-shadow);
}
.qmm-compact .qmm-views{ padding:8px }
.qmm-tabs + .qmm-views{ margin-top:-1px }

.qmm-view{ display:none; min-width:0; min-height:0; }
.qmm-view.active{ display:block; }

/* ---------- Basic controls ---------- */
.qmm-row{ display:flex; gap:10px; align-items:center; flex-wrap:wrap; margin:6px 0 }
.qmm-section{ margin-top:8px }
.qmm-section-title{ font-weight:650; margin:2px 0 8px 0; color:var(--qmm-text) }

.qmm-label{ opacity:.9 }
.qmm-val{ min-width:24px; text-align:center }

/* Buttons */
.qmm-btn{
  cursor:pointer; border-radius:10px; border:1px solid var(--qmm-border);
  padding:8px 12px; background:linear-gradient(180deg, #ffffff10, #ffffff06);
  color:#fff; box-shadow:0 1px 0 #000 inset, 0 1px 16px rgba(0,0,0,.2);
  transition:transform .1s ease, box-shadow .18s ease, background .18s ease, border-color .18s ease;
}
.qmm-compact .qmm-btn{ padding:6px 10px }
.qmm-btn:hover{ background:linear-gradient(180deg, #ffffff16, #ffffff08); border-color:#ffffff40 }
.qmm-btn:active{ transform:translateY(1px) }
.qmm-btn:focus-visible{ outline:2px solid var(--qmm-accent); outline-offset:2px; }

/* Button variants (optional utility) */
.qmm-btn.qmm-primary{ background:linear-gradient(180deg, rgba(122,162,255,.35), rgba(122,162,255,.15)); border-color:#9db7ff55 }
.qmm-btn.qmm-danger{  background:linear-gradient(180deg, rgba(255,86,86,.28), rgba(255,86,86,.12));  border-color:#ff6a6a55 }
.qmm-btn.active{
  background:#79a6ff22;
  border-color:#79a6ff66;
  box-shadow: inset 0 0 0 1px #79a6ff33;
}

/* Inputs */
.qmm-input{
  min-width:90px; background:rgba(0,0,0,.42); color:#fff;
  border:1px solid var(--qmm-border); border-radius:10px;
  padding:8px 10px; box-shadow:inset 0 1px 0 rgba(255,255,255,.06);
  transition:border-color .18s ease, background .18s ease, box-shadow .18s ease;
}
.qmm-input::placeholder{ color:#cbd6e780 }
.qmm-input:focus{ outline:none; border-color:var(--qmm-accent); background:#0f1521; box-shadow:0 0 0 2px #7aa2ff33 }

/* Number input + spinner (unchanged API) */
.qmm-input-number{ display:inline-flex; align-items:center; gap:6px }
.qmm-input-number-input{ width:70px; text-align:center; padding-right:8px }
.qmm-spin{ display:inline-flex; flex-direction:column; gap:2px }
.qmm-step{
  width:22px; height:16px; font-size:11px; line-height:1;
  display:inline-flex; align-items:center; justify-content:center;
  border-radius:6px; border:1px solid var(--qmm-border);
  background:rgba(255,255,255,.08); color:#fff; cursor:pointer; user-select:none;
  transition:background .18s ease, border-color .18s ease, transform .08s ease;
}
.qmm-step:hover{ background:#ffffff18; border-color:#ffffff40 }
.qmm-step:active{ transform:translateY(1px) }

/* Switch (checkbox) */
.qmm-switch{
  appearance:none; width:42px; height:24px; background:#6c7488aa; border-radius:999px;
  position:relative; outline:none; cursor:pointer; transition:background .18s ease, box-shadow .18s ease;
  box-shadow:inset 0 1px 0 rgba(255,255,255,.12);
}
.qmm-switch::before{
  content:""; position:absolute; top:2px; left:2px; width:20px; height:20px;
  background:#fff; border-radius:50%; transition:transform .2s ease;
  box-shadow:0 2px 8px rgba(0,0,0,.35);
}
.qmm-switch:checked{ background:linear-gradient(180deg, rgba(122,162,255,.9), rgba(122,162,255,.6)) }
.qmm-switch:checked::before{ transform:translateX(18px) }
.qmm-switch:focus-visible{ outline:2px solid var(--qmm-accent); outline-offset:2px }

/* Checkbox & radio (native inputs skinned lightly) */
.qmm-check, .qmm-radio{ transform:scale(1.1); accent-color: var(--qmm-accent) }

/* Slider */
.qmm-range{
  width:180px; appearance:none; background:transparent; height:22px;
}
.qmm-range:focus{ outline:none }
.qmm-range::-webkit-slider-runnable-track{
  height:6px; background:linear-gradient(90deg, var(--qmm-accent), #7aa2ff44);
  border-radius:999px; box-shadow:inset 0 1px 0 rgba(255,255,255,.14);
}
.qmm-range::-moz-range-track{
  height:6px; background:linear-gradient(90deg, var(--qmm-accent), #7aa2ff44);
  border-radius:999px; box-shadow:inset 0 1px 0 rgba(255,255,255,.14);
}
.qmm-range::-webkit-slider-thumb{
  appearance:none; width:16px; height:16px; border-radius:50%; margin-top:-5px;
  background:#fff; box-shadow:0 2px 10px rgba(0,0,0,.35), 0 0 0 2px #ffffff66 inset;
  transition:transform .1s ease;
}
.qmm-range:active::-webkit-slider-thumb{ transform:scale(1.04) }
.qmm-range::-moz-range-thumb{
  width:16px; height:16px; border-radius:50%; background:#fff; border:none;
  box-shadow:0 2px 10px rgba(0,0,0,.35), 0 0 0 2px #ffffff66 inset;
}

/* ---------- Minimal table ---------- */
/* container */
.qmm-table-wrap--minimal{
  border:1px solid #263040; border-radius:8px; background:#0b0f14; box-shadow:none;
}
/* scroller (height cap) */
.qmm-table-scroll{
  overflow:auto; max-height:44vh; /* override via opts.maxHeight */
}

/* base */
.qmm-table--minimal{
  width:100%;
  border-collapse:collapse;
  background:transparent;
  font-size:13px; line-height:1.35; color:var(--qmm-text, #cdd6e3);
}

/* header */
.qmm-table--minimal thead th{
  position:sticky; top:0; z-index:1;
  text-align:left; font-weight:600;
  padding:8px 10px;
  color:#cbd5e1; background:#0f1318;
  border-bottom:1px solid #263040;
  text-transform:none; letter-spacing:0;
}
.qmm-table--minimal thead th.is-center { text-align: center; }
.qmm-table--minimal thead th.is-left   { text-align: left; }   /* d\xE9j\xE0 pr\xE9sent, ok */
.qmm-table--minimal thead th.is-right  { text-align: right; }
.qmm-table--minimal thead th,
.qmm-table--minimal td { vertical-align: middle; }

/* cells */
.qmm-table--minimal td{
  padding:8px 10px; border-bottom:1px solid #1f2937; vertical-align:middle;
}
.qmm-table--minimal tbody tr:hover{ background:#0f1824; }

/* compact variant */
.qmm-table--compact thead th,
.qmm-table--compact td{ padding:6px 8px; font-size:12px }

/* utils */
.qmm-table--minimal td.is-num{ text-align:right; font-variant-numeric:tabular-nums }
.qmm-table--minimal td.is-center{ text-align:center }
.qmm-ellipsis{ overflow:hidden; text-overflow:ellipsis; white-space:nowrap }
.qmm-prewrap{ white-space:pre-wrap; word-break:break-word }


/* ---------- Split panels ---------- */
.qmm-split{
  display:grid; gap:12px;
  grid-template-columns:minmax(180px,260px) minmax(0,1fr);
  align-items:start;
}
.qmm-split-left{ display:flex; flex-direction:column; gap:10px }
.qmm-split-right{
  border:1px solid var(--qmm-border); border-radius:12px; padding:12px;
  display:flex; flex-direction:column; gap:12px;
  background:var(--qmm-panel); backdrop-filter:blur(var(--qmm-blur));
  box-shadow:var(--qmm-shadow);
}

/* ---------- VTabs (vertical list + filter) ---------- */
.qmm-vtabs{ display:flex; flex-direction:column; gap:8px; min-width:0 }
.qmm-vtabs .filter{ display:block }
.qmm-vtabs .filter input{ width:100% }

.qmm-vlist{
  flex:0 0 auto; overflow:visible;
  border:1px solid var(--qmm-border); border-radius:12px; padding:6px;
  background:linear-gradient(180deg, rgba(255,255,255,.03), rgba(255,255,255,.01));
  box-shadow:inset 0 1px 0 rgba(255,255,255,.04);
}

.qmm-vtab{
  width:100%; text-align:left; cursor:pointer;
  display:grid; grid-template-columns:28px 1fr auto; align-items:center; gap:10px;
  padding:8px 10px; border-radius:10px; border:1px solid #ffffff18;
  background:rgba(255,255,255,.03); color:inherit;
  transition:background .18s ease, border-color .18s ease, transform .08s ease;
}
.qmm-vtab:hover{ background:rgba(255,255,255,.07); border-color:#ffffff34 }
.qmm-vtab:active{ transform:translateY(1px) }
.qmm-vtab.active{
  background:linear-gradient(180deg, rgba(122,162,255,.18), rgba(122,162,255,.08));
  border-color:#9db7ff55;
  box-shadow:0 1px 14px rgba(122,162,255,.18) inset;
}

.qmm-dot{ width:10px; height:10px; border-radius:50%; justify-self:center; box-shadow:0 0 0 1px #0006 inset }
.qmm-chip{ display:flex; align-items:center; gap:8px; min-width:0 }
.qmm-chip img{
  width:20px; height:20px; border-radius:50%; object-fit:cover; border:1px solid #4446;
  box-shadow:0 1px 0 rgba(255,255,255,.08) inset;
}
.qmm-chip .t{ white-space:nowrap; overflow:hidden; text-overflow:ellipsis }
.qmm-tag{
  font-size:11px; line-height:1; padding:3px 7px; border-radius:999px;
  background:#ffffff14; border:1px solid #ffffff26;
}

/* ---------- Small helpers (optional) ---------- */
.qmm .qmm-card{
  border:1px solid var(--qmm-border); border-radius:12px; padding:12px;
  background:var(--qmm-panel); backdrop-filter:blur(var(--qmm-blur)); box-shadow:var(--qmm-shadow);
}
  .qmm .qmm-help{ font-size:12px; color:var(--qmm-text-dim) }
  .qmm .qmm-sep{ height:1px; background:var(--qmm-border); width:100%; opacity:.6; }

/* ta poign\xE9e, inchang\xE9 */
.qmm-grab { margin-left:auto; opacity:.8; cursor:grab; user-select:none; }
.qmm-grab:active { cursor:grabbing; }
.qmm-dragging { opacity:.6; }

/* items animables */
.qmm-team-item {
  will-change: transform;
  transition: transform 160ms ease;
}
.qmm-team-item.drag-ghost {
  opacity: .4;
}

.qmm.qmm-alt-drag { cursor: grab; }
.qmm.qmm-alt-drag:active { cursor: grabbing; }

.qws-win.is-hidden { display: none !important; }

.qmm-hotkey{
  cursor:pointer; user-select:none;
  border:1px solid var(--qmm-border); border-radius:10px;
  padding:8px 12px;
  background:linear-gradient(180deg, #ffffff10, #ffffff06);
  color:var(--qmm-text);
  box-shadow:0 1px 0 #000 inset, 0 1px 16px rgba(0,0,0,.18);
  transition:
    background .18s ease,
    border-color .18s ease,
    box-shadow .18s ease,
    transform .08s ease,
    color .18s ease;
}
.qmm-hotkey{
  display:inline-flex;
  align-items:center;
  justify-content:center;
  white-space:nowrap;
  width: var(--qmm-hotkey-w, 180px); 
}
.qmm-hotkey:hover{ background:linear-gradient(180deg, #ffffff16, #ffffff08); border-color:#ffffff40 }
.qmm-hotkey:active{ transform:translateY(1px) }

.qmm-hotkey:focus-visible{ outline:none }

.qmm-hotkey.is-empty{
  color:var(--qmm-text-dim);
  font-style:italic;
}

.qmm-hotkey.is-recording{
  outline:2px solid var(--qmm-accent);
  outline-offset:2px;
  border-color: var(--qmm-accent);
  background:linear-gradient(180deg, rgba(122,162,255,.25), rgba(122,162,255,.10));
  animation: qmm-hotkey-breathe 1.2s ease-in-out infinite;
}
  
@keyframes qmm-hotkey-breathe{
  0%   { box-shadow: 0 0 0 0 rgba(122,162,255,.55), 0 1px 16px rgba(0,0,0,.25); }
  60%  { box-shadow: 0 0 0 12px rgba(122,162,255,0), 0 1px 16px rgba(0,0,0,.25); }
  100% { box-shadow: 0 0 0 0 rgba(122,162,255,0),  0 1px 16px rgba(0,0,0,.25); }
}

/* ---------- Segmented (minimal, modern) ---------- */
.qmm-seg{
  --seg-pad: 8px;
  --seg-radius: 999px;
  --seg-stroke: 1.2px;      /* \xE9paisseur du trait */
  --seg-nudge-x: 0px;       /* micro-ajustements optionnels */
  --seg-nudge-w: 0px;
  --seg-fill: rgba(122,162,255,.05);           
  --seg-stroke-color: rgba(122,162,255,.60);

  position: relative;
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: var(--seg-pad);
  border-radius: var(--seg-radius);
  background: var(--qmm-bg-soft);
  border: 1px solid var(--qmm-border-2);
  box-shadow: inset 0 1px 0 rgba(255,255,255,.06);
  overflow: hidden;
  background-clip: padding-box; /* important pour que le fond ne passe pas sous la bordure */
}

.qmm-seg--full{ display:flex; width:100% }

.qmm-seg__btn{
  position: relative;
  z-index: 1;
  appearance: none; background: transparent; border: 0; cursor: pointer;
  padding: 8px 14px;
  border-radius: 999px;
  color: var(--qmm-text-dim);
  font: inherit; line-height: 1; white-space: nowrap;
  transition: color .15s ease, transform .06s ease;
}
.qmm-compact .qmm-seg__btn{ padding: 6px 10px }
.qmm-seg__btn:hover{ color: var(--qmm-text); }
.qmm-seg__btn.active{ color:#fff; font-weight:600; }
.qmm-seg__btn:active{ transform: translateY(1px); }
.qmm-seg__btn[disabled]{ opacity:.5; cursor:not-allowed; }

.qmm-seg__indicator{
  position: absolute;
  top: 0; left: 0;
  height: 100%;
  width: 40px;                      /* maj en JS */
  border-radius: inherit;
  background: var(--seg-fill);              /* \u2B05\uFE0F applique la couleur */
  outline: var(--seg-stroke,1.2px) solid var(--seg-stroke-color);
  outline-offset: calc(-1 * var(--seg-stroke));

  box-shadow: 0 1px 4px rgba(122,162,255,.10);
  transition: transform .18s cubic-bezier(.2,.8,.2,1),
              width .18s cubic-bezier(.2,.8,.2,1);
  pointer-events: none;
}

/* Accessibilit\xE9 */
@media (prefers-reduced-motion: reduce){
  .qmm-seg__indicator, .qmm-seg__btn { transition: none; }
}  /* \u2190 manquait cette accolade */

    `;
      const st = document.createElement("style");
      st.id = "__qmm_css__";
      st.textContent = css;
      (document.documentElement || document.body).appendChild(st);
    }
  };
  var VTabs = class {
    constructor(api, opts = {}) {
      this.api = api;
      this.opts = opts;
      __publicField(this, "root");
      __publicField(this, "filterWrap", null);
      __publicField(this, "filterInput", null);
      __publicField(this, "list");
      __publicField(this, "items", []);
      __publicField(this, "selectedId", null);
      __publicField(this, "onSelectCb");
      __publicField(this, "renderItemCustom");
      __publicField(this, "emptyText");
      this.root = el("div", "qmm-vtabs");
      this.root.style.minWidth = "0";
      this.emptyText = opts.emptyText || "Aucun \xE9l\xE9ment.";
      this.renderItemCustom = opts.renderItem;
      if (opts.filterPlaceholder) {
        this.filterWrap = el("div", "filter");
        this.filterInput = document.createElement("input");
        this.filterInput.type = "search";
        this.filterInput.placeholder = opts.filterPlaceholder;
        this.filterInput.className = "qmm-input";
        this.filterInput.oninput = () => this.renderList();
        this.filterWrap.appendChild(this.filterInput);
        this.root.appendChild(this.filterWrap);
      }
      this.list = el("div", "qmm-vlist");
      this.list.style.minWidth = "0";
      if (opts.maxHeightPx) {
        this.list.style.maxHeight = `${opts.maxHeightPx}px`;
        this.list.style.overflow = "auto";
        this.list.style.flex = "1 1 auto";
      }
      this.root.appendChild(this.list);
      this.selectedId = opts.initialId ?? null;
      this.onSelectCb = opts.onSelect;
    }
    setItems(items) {
      this.items = Array.isArray(items) ? items.slice() : [];
      if (this.selectedId && !this.items.some((i) => i.id === this.selectedId)) {
        this.selectedId = this.items[0]?.id ?? null;
      }
      this.renderList();
    }
    getSelected() {
      return this.items.find((i) => i.id === this.selectedId) ?? null;
    }
    select(id) {
      this.selectedId = id;
      this.renderList();
      this.onSelectCb?.(this.selectedId, this.getSelected());
    }
    onSelect(cb) {
      this.onSelectCb = cb;
    }
    setBadge(id, text) {
      const btn = this.list.querySelector(`button[data-id="${cssq(id)}"]`);
      if (!btn) return;
      let tag = btn.querySelector(".qmm-tag");
      if (!tag && text != null) {
        tag = el("span", "qmm-tag");
        btn.appendChild(tag);
      }
      if (!tag) return;
      if (text == null || text === "") tag.style.display = "none";
      else {
        tag.textContent = text;
        tag.style.display = "";
      }
    }
    getFilter() {
      return (this.filterInput?.value || "").trim().toLowerCase();
    }
    renderList() {
      const keepScroll = this.list.scrollTop;
      this.list.innerHTML = "";
      const q = this.getFilter();
      const filtered = q ? this.items.filter((it) => (it.title || "").toLowerCase().includes(q) || (it.subtitle || "").toLowerCase().includes(q)) : this.items;
      if (!filtered.length) {
        const empty = document.createElement("div");
        empty.style.opacity = "0.75";
        empty.textContent = this.emptyText;
        this.list.appendChild(empty);
        return;
      }
      const ul = document.createElement("ul");
      ul.style.listStyle = "none";
      ul.style.margin = "0";
      ul.style.padding = "0";
      ul.style.display = "flex";
      ul.style.flexDirection = "column";
      ul.style.gap = "4px";
      for (const it of filtered) {
        const li = document.createElement("li");
        const btn = document.createElement("button");
        btn.className = "qmm-vtab";
        btn.dataset.id = it.id;
        btn.disabled = !!it.disabled;
        if (this.renderItemCustom) {
          this.renderItemCustom(it, btn);
        } else {
          const dot = el("div", "qmm-dot");
          dot.style.background = it.statusColor || "#999a";
          const chip = el("div", "qmm-chip");
          const img = document.createElement("img");
          img.src = it.avatarUrl || "";
          img.alt = it.title;
          const wrap = document.createElement("div");
          wrap.style.display = "flex";
          wrap.style.flexDirection = "column";
          wrap.style.gap = "2px";
          const t = el("div", "t");
          t.textContent = it.title;
          const sub = document.createElement("div");
          sub.textContent = it.subtitle || "";
          sub.style.opacity = "0.7";
          sub.style.fontSize = "12px";
          if (!it.subtitle) sub.style.display = "none";
          wrap.appendChild(t);
          wrap.appendChild(sub);
          chip.appendChild(img);
          chip.appendChild(wrap);
          btn.appendChild(dot);
          btn.appendChild(chip);
          if (it.badge != null) {
            const tag = el("span", "qmm-tag", escapeHtml(String(it.badge)));
            btn.appendChild(tag);
          } else {
            const spacer = document.createElement("div");
            spacer.style.width = "0";
            btn.appendChild(spacer);
          }
        }
        btn.classList.toggle("active", it.id === this.selectedId);
        btn.onclick = () => this.select(it.id);
        li.appendChild(btn);
        ul.appendChild(li);
      }
      this.list.appendChild(ul);
      this.list.scrollTop = keepScroll;
    }
  };
  function el(tag, cls, html) {
    const e = document.createElement(tag);
    if (cls) e.className = cls;
    if (html != null) e.innerHTML = html;
    return e;
  }
  function cssq(s) {
    return s.replace(/"/g, '\\"');
  }
  function escapeHtml(s) {
    return s.replace(/[&<>"']/g, (m) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" })[m]);
  }
  var _MOD_CODES = /* @__PURE__ */ new Set([
    "ShiftLeft",
    "ShiftRight",
    "ControlLeft",
    "ControlRight",
    "AltLeft",
    "AltRight",
    "MetaLeft",
    "MetaRight"
  ]);
  function eventToHotkey(e) {
    if (_MOD_CODES.has(e.code) || e.key === "Shift" || e.key === "Control" || e.key === "Alt" || e.key === "Meta") {
      return null;
    }
    return {
      code: e.code,
      ctrl: e.ctrlKey,
      alt: e.altKey,
      shift: e.shiftKey,
      meta: e.metaKey
    };
  }
  function matchHotkey(e, h) {
    if (!h) return false;
    if (!!h.ctrl !== e.ctrlKey) return false;
    if (!!h.shift !== e.shiftKey) return false;
    if (!!h.alt !== e.altKey) return false;
    if (!!h.meta !== e.metaKey) return false;
    return e.code === h.code;
  }
  function hotkeyToString(hk) {
    if (!hk) return "";
    const parts = [];
    if (hk.ctrl) parts.push("Ctrl");
    if (hk.shift) parts.push("Shift");
    if (hk.alt) parts.push("Alt");
    if (hk.meta) parts.push("Meta");
    if (hk.code) parts.push(hk.code);
    return parts.join("+");
  }
  function stringToHotkey(s) {
    if (!s) return null;
    const parts = s.split("+").map((p) => p.trim()).filter(Boolean);
    if (!parts.length) return null;
    const code = parts.pop() || "";
    const hk = { code };
    for (const p of parts) {
      const P = p.toLowerCase();
      if (P === "ctrl" || P === "control") hk.ctrl = true;
      else if (P === "shift") hk.shift = true;
      else if (P === "alt") hk.alt = true;
      else if (P === "meta" || P === "cmd" || P === "command") hk.meta = true;
    }
    return hk.code ? hk : null;
  }

  // src/services/pets.ts
  var LS_TEAMS_KEY = "qws:pets:teams:v1";
  var LS_TEAM_SEARCH_KEY = "qws:pets:teamSearch:v1";
  var LS_TEAM_HK_PREFIX = "qws:hk:petteam:use:";
  var TEAM_HK_MAP = /* @__PURE__ */ new Map();
  var hkKeyForTeam = (id) => `${LS_TEAM_HK_PREFIX}${id}`;
  function setTeamsForHotkeys(teams) {
    TEAM_HK_MAP.clear();
    for (const t of teams) {
      const hk = stringToHotkey(localStorage.getItem(hkKeyForTeam(t.id)) || "");
      if (hk) TEAM_HK_MAP.set(t.id, hk);
    }
  }
  function refreshTeamFromLS(teamId) {
    const hk = stringToHotkey(localStorage.getItem(hkKeyForTeam(teamId)) || "");
    if (hk) TEAM_HK_MAP.set(teamId, hk);
    else TEAM_HK_MAP.delete(teamId);
  }
  function shouldIgnoreKeydown(e) {
    const el2 = e.target;
    if (!el2) return false;
    return el2.isContentEditable || el2.tagName === "INPUT" || el2.tagName === "TEXTAREA" || el2.tagName === "SELECT";
  }
  function installPetTeamHotkeysOnce(onUseTeam) {
    const FLAG = "__qws_pet_team_hk_installed";
    if (window[FLAG]) return;
    window.addEventListener(
      "keydown",
      (e) => {
        if (shouldIgnoreKeydown(e)) return;
        for (const [teamId, hk] of TEAM_HK_MAP) {
          if (matchHotkey(e, hk)) {
            e.preventDefault();
            e.stopPropagation();
            onUseTeam(teamId);
            break;
          }
        }
      },
      true
    );
    window[FLAG] = true;
  }
  window.addEventListener("storage", (e) => {
    if (!e.key || !e.key.startsWith(LS_TEAM_HK_PREFIX)) return;
    const teamId = e.key.slice(LS_TEAM_HK_PREFIX.length);
    refreshTeamFromLS(teamId);
  });
  var _AB = petAbilities ?? {};
  function _abilityName(id) {
    const key2 = String(id ?? "");
    const raw = typeof _AB?.[key2]?.name === "string" && _AB[key2].name.trim() ? _AB[key2].name : key2;
    return String(raw);
  }
  function _abilityNameWithoutLevel(id) {
    const key2 = String(id ?? "");
    const raw = typeof _AB?.[key2]?.name === "string" && _AB[key2].name.trim() ? _AB[key2].name : key2;
    return String(raw).replace(/(?:\s+|-)?(?:I|II|III|IV|V|VI|VII|VIII|IX|X)\s*$/, "").trim();
  }
  function _parseTeamSearch(raw) {
    const s = String(raw || "").trim();
    const m = s.match(/^(ab|sp):\s*(.*)$/i);
    if (!m) return { mode: "text", value: s };
    return { mode: m[1].toLowerCase() === "ab" ? "ability" : "species", value: (m[2] || "").trim() };
  }
  async function _abilityNameToPresentIds(name) {
    await _ensureInventoryWatchersStarted();
    const target = String(name || "").toLowerCase().trim().replace(/(?:\s+|-)?(?:i|ii|iii|iv|v|vi|vii|viii|ix|x)\s*$/i, "");
    const ids = /* @__PURE__ */ new Set();
    if (!target) return ids;
    for (const p of _invPetsCache) {
      const abs = Array.isArray(p.abilities) ? p.abilities : [];
      for (const id of abs) {
        if (_abilityNameWithoutLevel(id).toLowerCase() === target) {
          ids.add(id);
        }
      }
    }
    return ids;
  }
  var _s = (v) => (v ?? "").toLowerCase();
  var _sOpt = (v) => typeof v === "string" ? v : null;
  var _n = (v) => Number.isFinite(v) ? v : 0;
  var _sArr = (v) => Array.isArray(v) ? v.filter((x) => typeof x === "string") : [];
  function _canonicalSpecies(s) {
    if (!s) return s;
    if (petCatalog[s]) return s;
    const t = s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();
    return petCatalog[t] ? t : s;
  }
  function _invPetToRawItem(p) {
    return {
      id: p.id,
      itemType: "Pet",
      petSpecies: _canonicalSpecies(p.petSpecies),
      name: p.name ?? null,
      xp: p.xp,
      hunger: p.hunger,
      mutations: Array.isArray(p.mutations) ? p.mutations.slice() : [],
      targetScale: p.targetScale,
      abilities: Array.isArray(p.abilities) ? p.abilities.slice() : []
    };
  }
  var _invRaw = null;
  var _activeRaw = [];
  var _invPetsCache = [];
  var _invUnsub = null;
  var _activeUnsub = null;
  var _invSig = null;
  var _activeSig = null;
  function _inventoryItemToPet(x) {
    if (!x || x.itemType !== "Pet") return null;
    const id = _s(x.id);
    if (!id) return null;
    return {
      id,
      itemType: "Pet",
      petSpecies: _s(x.petSpecies ?? x.data?.petSpecies),
      name: _sOpt(x.name ?? x.data?.name ?? null),
      xp: _n(x.xp ?? x.data?.xp),
      hunger: _n(x.hunger ?? x.data?.hunger),
      mutations: _sArr(x.mutations ?? x.data?.mutations),
      targetScale: Number.isFinite(x.targetScale ?? x.data?.targetScale) ? Number(x.targetScale ?? x.data?.targetScale) : void 0,
      abilities: _sArr(x.abilities ?? x.data?.abilities)
    };
  }
  function _activeSlotToPet(entry) {
    const slot = entry?.slot;
    if (!slot || typeof slot !== "object") return null;
    const id = _s(slot.id);
    if (!id) return null;
    return {
      id,
      itemType: "Pet",
      petSpecies: _s(slot.petSpecies),
      name: _sOpt(slot.name ?? null),
      xp: _n(slot.xp),
      hunger: _n(slot.hunger),
      mutations: _sArr(slot.mutations),
      targetScale: Number.isFinite(slot.targetScale) ? Number(slot.targetScale) : void 0,
      abilities: _sArr(slot.abilities)
    };
  }
  function _petSigStableNoXpNoHunger(p) {
    return JSON.stringify({
      id: p.id,
      itemType: "Pet",
      petSpecies: p.petSpecies,
      name: p.name ?? null,
      mutations: Array.isArray(p.mutations) ? p.mutations : [],
      targetScale: Number.isFinite(p.targetScale) ? p.targetScale : null,
      abilities: Array.isArray(p.abilities) ? p.abilities : []
    });
  }
  function _buildInvSigFromInventory(inv) {
    const out = /* @__PURE__ */ new Map();
    const items = Array.isArray(inv?.items) ? inv.items : Array.isArray(inv) ? inv : [];
    for (const it of items) {
      const p = _inventoryItemToPet(it);
      if (p) out.set(p.id, _petSigStableNoXpNoHunger(p));
    }
    return out;
  }
  function _buildActiveSig(list) {
    const out = /* @__PURE__ */ new Map();
    const arr = Array.isArray(list) ? list : [];
    for (const e of arr) {
      const p = _activeSlotToPet(e);
      if (p) out.set(p.id, _petSigStableNoXpNoHunger(p));
    }
    return out;
  }
  function _mapsEqual(a, b) {
    if (!a) return false;
    if (a.size !== b.size) return false;
    for (const [k, v] of b) if (a.get(k) !== v) return false;
    return true;
  }
  function _rebuildInvPets() {
    const map2 = /* @__PURE__ */ new Map();
    const items = Array.isArray(_invRaw?.items) ? _invRaw.items : Array.isArray(_invRaw) ? _invRaw : [];
    for (const it of items) {
      const p = _inventoryItemToPet(it);
      if (p && p.id) map2.set(p.id, p);
    }
    const act = Array.isArray(_activeRaw) ? _activeRaw : [];
    for (const e of act) {
      const p = _activeSlotToPet(e);
      if (p && p.id) map2.set(p.id, p);
    }
    _invPetsCache = Array.from(map2.values());
  }
  async function _startInventoryWatcher() {
    const unsub = await (async () => {
      try {
        const cur2 = await Atoms.inventory.myInventory.get();
        _invSig = _buildInvSigFromInventory(cur2);
        _invRaw = cur2;
        _rebuildInvPets();
      } catch {
      }
      return Atoms.inventory.myInventory.onChange((inv) => {
        const nextSig = _buildInvSigFromInventory(inv);
        if (_mapsEqual(_invSig, nextSig)) return;
        _invSig = nextSig;
        _invRaw = inv;
        _rebuildInvPets();
      });
    })();
    _invUnsub = () => {
      try {
        unsub();
      } catch {
      }
    };
  }
  async function _startActivePetsWatcher() {
    const unsub = await (async () => {
      try {
        const cur2 = await Atoms.pets.myPetInfos.get();
        _activeSig = _buildActiveSig(cur2);
        _activeRaw = Array.isArray(cur2) ? cur2 : [];
        _rebuildInvPets();
      } catch {
      }
      return Atoms.pets.myPetInfos.onChange((list) => {
        const nextSig = _buildActiveSig(list);
        if (_mapsEqual(_activeSig, nextSig)) return;
        _activeSig = nextSig;
        _activeRaw = Array.isArray(list) ? list : [];
        _rebuildInvPets();
      });
    })();
    _activeUnsub = () => {
      try {
        unsub();
      } catch {
      }
    };
  }
  async function _ensureInventoryWatchersStarted() {
    if (!_invUnsub) await _startInventoryWatcher();
    if (!_activeUnsub) await _startActivePetsWatcher();
    if (!_invPetsCache.length) {
      try {
        const [inv, active] = await Promise.all([
          Atoms.inventory.myInventory.get(),
          Atoms.pets.myPetInfos.get()
        ]);
        _invSig = _buildInvSigFromInventory(inv);
        _activeSig = _buildActiveSig(active);
        _invRaw = inv;
        _activeRaw = Array.isArray(active) ? active : [];
        _rebuildInvPets();
      } catch {
      }
    }
  }
  async function clearHandSelection() {
    try {
      await Atoms.inventory.setSelectedIndexToEnd.set(null);
    } catch {
    }
    try {
      await Atoms.inventory.myPossiblyNoLongerValidSelectedItemIndex.set(null);
    } catch {
    }
    try {
      await PlayerService.setSelectedItem(null);
    } catch {
    }
    try {
      await PlayerService.dropObject();
    } catch {
    }
  }
  async function _waitValidatedInventoryIndex(timeoutMs = 2e4) {
    await clearHandSelection();
    const t0 = performance.now();
    while (performance.now() - t0 < timeoutMs) {
      try {
        const modalVal = await Atoms.ui.activeModal.get();
        if (!isInventoryOpen(modalVal)) return null;
      } catch {
        return null;
      }
      try {
        const v = await Atoms.inventory.myValidatedSelectedItemIndex.get();
        if (typeof v === "number" && Number.isInteger(v) && v >= 0) return v;
      } catch {
      }
      await new Promise((r) => setTimeout(r, 80));
    }
    return null;
  }
  function loadTeams() {
    try {
      const raw = localStorage.getItem(LS_TEAMS_KEY);
      if (!raw) return [];
      const arr = JSON.parse(raw);
      if (!Array.isArray(arr)) return [];
      return arr.map((t) => ({
        id: String(t?.id || ""),
        name: String(t?.name || "Team"),
        slots: Array.isArray(t?.slots) ? t.slots.slice(0, 3).map((x) => x ? String(x) : null) : [null, null, null]
      })).filter((t) => t.id);
    } catch {
      return [];
    }
  }
  function saveTeams(arr) {
    try {
      localStorage.setItem(LS_TEAMS_KEY, JSON.stringify(arr));
    } catch {
    }
  }
  function _uid() {
    try {
      return crypto.randomUUID();
    } catch {
      return `t_${Date.now().toString(36)}_${Math.random().toString(16).slice(2)}`;
    }
  }
  var _teams = loadTeams();
  function _loadTeamSearchMap() {
    try {
      const raw = localStorage.getItem(LS_TEAM_SEARCH_KEY);
      const obj = raw ? JSON.parse(raw) : {};
      return obj && typeof obj === "object" ? obj : {};
    } catch {
      return {};
    }
  }
  function _saveTeamSearchMap(map2) {
    try {
      localStorage.setItem(LS_TEAM_SEARCH_KEY, JSON.stringify(map2));
    } catch {
    }
  }
  var _teamSearch = _loadTeamSearchMap();
  var PetsService = {
    /* ----- Player-facing (UI) ----- */
    getPets() {
      return PlayerService.getPets();
    },
    getAbilityName(id) {
      return _abilityName(id);
    },
    getAbilityNameWithoutLevel(id) {
      return _abilityNameWithoutLevel(id);
    },
    async chooseSlotPet(teamId, slotIndex, searchOverride) {
      const idx = Math.max(0, Math.min(2, Math.floor(slotIndex || 0)));
      const team = this.getTeamById(teamId);
      if (!team) return null;
      const exclude = /* @__PURE__ */ new Set();
      team.slots.forEach((id, i) => {
        if (i !== idx && id) exclude.add(String(id));
      });
      const payload = searchOverride && searchOverride.trim().length ? await this.buildFilteredInventoryByQuery(searchOverride, { excludeIds: exclude }) : await this.buildFilteredInventoryForTeam(teamId, { excludeIds: exclude });
      const items = Array.isArray(payload?.items) ? payload.items : [];
      if (!items.length) return null;
      await fakeInventoryShow(payload, { open: true });
      const selIndex = await _waitValidatedInventoryIndex(2e4);
      await closeInventoryPanel();
      if (selIndex == null || selIndex < 0 || selIndex >= items.length) return null;
      const chosenPet = _inventoryItemToPet(items[selIndex]);
      if (!chosenPet) return null;
      const next = team.slots.slice(0, 3);
      next[idx] = String(chosenPet.id);
      this.saveTeam({ id: team.id, slots: next });
      try {
        await clearHandSelection();
      } catch {
      }
      return chosenPet;
    },
    async getInventoryPets() {
      await _ensureInventoryWatchersStarted();
      return _invPetsCache.slice();
    },
    /* ----- Teams (UI) ----- */
    _teams: loadTeams(),
    _teamSubs: /* @__PURE__ */ new Set(),
    _notifyTeamSubs() {
      const snap = this.getTeams();
      this._teamSubs.forEach((fn) => {
        try {
          fn(snap);
        } catch {
        }
      });
    },
    getTeams() {
      return Array.isArray(this._teams) ? this._teams.map((t) => ({ ...t, slots: t.slots.slice(0, 3) })) : [];
    },
    onTeamsChange(cb) {
      this._teamSubs.add(cb);
      try {
        cb(this.getTeams());
      } catch {
      }
      return () => {
        this._teamSubs.delete(cb);
      };
    },
    async onTeamsChangeNow(cb) {
      const unsub = this.onTeamsChange(cb);
      try {
        cb(this.getTeams());
      } catch {
      }
      return unsub;
    },
    createTeam(name) {
      const t = { id: _uid(), name: name?.trim() || `Team ${this._teams.length + 1}`, slots: [null, null, null] };
      this._teams.push(t);
      saveTeams(this._teams);
      this._notifyTeamSubs();
      return t;
    },
    deleteTeam(teamId) {
      const i = this._teams.findIndex((t) => t.id === teamId);
      if (i < 0) return false;
      this._teams.splice(i, 1);
      saveTeams(this._teams);
      this._notifyTeamSubs();
      return true;
    },
    saveTeam(patch) {
      const i = this._teams.findIndex((t) => t.id === patch.id);
      if (i < 0) return null;
      const cur2 = this._teams[i];
      const next = {
        id: cur2.id,
        name: typeof patch.name === "string" ? patch.name : cur2.name,
        slots: Array.isArray(patch.slots) ? patch.slots.slice(0, 3) : cur2.slots
      };
      this._teams[i] = next;
      saveTeams(this._teams);
      this._notifyTeamSubs();
      return next;
    },
    setTeamsOrder(ids) {
      const byId = new Map(this._teams.map((t) => [t.id, t]));
      const next = [];
      for (const id of ids) {
        const t = byId.get(id);
        if (t) {
          next.push(t);
          byId.delete(id);
        }
      }
      for (const rest of byId.values()) next.push(rest);
      this._teams = next;
      saveTeams(this._teams);
      this._notifyTeamSubs();
    },
    getTeamById(teamId) {
      const t = this._teams.find((t2) => t2.id === teamId) || null;
      return t ? { ...t, slots: t.slots.slice(0, 3) } : null;
    },
    getTeamSearch(teamId) {
      return _teamSearch[teamId] || "";
    },
    setTeamSearch(teamId, q) {
      _teamSearch[teamId] = (q || "").trim();
      _saveTeamSearchMap(_teamSearch);
    },
    /* ----- Inventory filters for fake-inventory picker ----- */
    async buildFilteredInventoryForTeam(teamId, opts) {
      await _ensureInventoryWatchersStarted();
      const { mode, value } = _parseTeamSearch(this.getTeamSearch(teamId) || "");
      let list = await this.getInventoryPets();
      if (mode === "ability" && value) {
        const idSet = await _abilityNameToPresentIds(value);
        list = idSet.size ? list.filter((p) => Array.isArray(p.abilities) && p.abilities.some((a) => idSet.has(a))) : [];
      } else if (mode === "species" && value) {
        const vv = value.toLowerCase();
        list = list.filter((p) => (p.petSpecies || "").toLowerCase() === vv);
      } else if (value) {
        const q = value.toLowerCase();
        list = list.filter(
          (p) => _s(p.id).includes(q) || _s(p.petSpecies).includes(q) || _s(p.name).includes(q) || Array.isArray(p.abilities) && p.abilities.some((a) => _s(a).includes(q) || _s(_abilityName(a)).includes(q)) || Array.isArray(p.mutations) && p.mutations.some((m) => _s(m).includes(q))
        );
      }
      if (opts?.excludeIds?.size) {
        const ex = opts.excludeIds;
        list = list.filter((p) => !ex.has(p.id));
      }
      const items = list.map(_invPetToRawItem);
      let favoritedItemIds = [];
      try {
        const favAll = await Atoms.inventory.favoriteIds.get().catch(() => []);
        const keep = new Set(list.map((p) => p.id));
        favoritedItemIds = (favAll || []).filter((id) => keep.has(id));
      } catch {
      }
      return { items, favoritedItemIds };
    },
    async buildFilteredInventoryByQuery(query, opts) {
      await _ensureInventoryWatchersStarted();
      const q = (query || "").toLowerCase().trim();
      let list = await this.getInventoryPets();
      if (q) {
        list = list.filter(
          (p) => _s(p.id).includes(q) || _s(p.petSpecies).includes(q) || _s(p.name).includes(q) || Array.isArray(p.abilities) && p.abilities.some((a) => _s(a).includes(q) || _s(_abilityName(a)).includes(q)) || Array.isArray(p.mutations) && p.mutations.some((m) => _s(m).includes(q))
        );
      }
      if (opts?.excludeIds?.size) {
        const ex = opts.excludeIds;
        list = list.filter((p) => !ex.has(p.id));
      }
      const items = list.map(_invPetToRawItem);
      let favoritedItemIds = [];
      try {
        const favAll = await Atoms.inventory.favoriteIds.get().catch(() => []);
        const keep = new Set(list.map((p) => p.id));
        favoritedItemIds = (favAll || []).filter((id) => keep.has(id));
      } catch {
      }
      return { items, favoritedItemIds };
    },
    /* ----- Team switching ----- */
    async useTeam(teamId) {
      const t = this.getTeams().find((tt) => tt.id === teamId) || null;
      if (!t) throw new Error("Team not found");
      const targetInvIds = (t.slots || []).filter((x) => typeof x === "string" && x.length > 0).slice(0, 3);
      return _applyTeam(targetInvIds);
    },
    /* ----- Ability Logs (UI Logs tab) ----- */
    _logs: [],
    _logsMax: 500,
    _seenPerfByPet: /* @__PURE__ */ new Map(),
    // petId -> last performedAt pushed
    _logSubs: /* @__PURE__ */ new Set(),
    _logsCutoffMs: 0,
    _logsCutoffSkewMs: 1500,
    async startAbilityLogsWatcher() {
      await _ensureInventoryWatchersStarted();
      const indexInfosByPetId = (list) => {
        const out = {};
        const arr = Array.isArray(list) ? list : [];
        for (const e of arr) {
          const id = String(e?.slot?.id ?? e?.id ?? "");
          if (id) out[id] = e;
        }
        return out;
      };
      let myInfosMap = {};
      try {
        const curInfos = await Atoms.pets.myPetInfos.get();
        myInfosMap = indexInfosByPetId(curInfos);
      } catch {
      }
      let stopInfos = null;
      try {
        stopInfos = await Atoms.pets.myPetInfos.onChange((list) => {
          try {
            myInfosMap = indexInfosByPetId(list);
          } catch {
          }
        });
      } catch {
      }
      const extractFlat = (src) => {
        const out = {};
        if (!src || typeof src !== "object") return out;
        const obj = src;
        for (const petId of Object.keys(obj)) {
          const entry = obj[petId] ?? {};
          const lat = entry.lastAbilityTrigger ?? null;
          let rawH = entry.hungerPct ?? entry.hunger_percentage ?? entry.hunger ?? entry.stats?.hungerPct ?? entry.stats?.hunger?.pct ?? entry.stats?.hunger?.percent ?? null;
          if (rawH == null) {
            const info = myInfosMap[petId];
            rawH = info?.hungerPct ?? info?.hunger_percentage ?? info?.hunger ?? info?.slot?.hungerPct ?? info?.slot?.hunger ?? info?.stats?.hungerPct ?? info?.stats?.hunger?.pct ?? info?.stats?.hunger?.percent ?? null;
          }
          let hungerPct = Number.isFinite(Number(rawH)) ? Number(rawH) : null;
          if (hungerPct != null && hungerPct > 0 && hungerPct <= 1) hungerPct *= 100;
          out[petId] = {
            petId,
            abilityId: lat?.abilityId ?? null,
            performedAt: Number.isFinite(lat?.performedAt) ? lat.performedAt : null,
            data: lat?.data ?? null,
            position: entry.position ?? null,
            hungerPct
          };
        }
        return out;
      };
      try {
        const cur2 = await Atoms.pets.myPetSlotInfos.get();
        this._ingestAbilityMap(extractFlat(cur2));
      } catch {
      }
      const stopSlots = await Atoms.pets.myPetSlotInfos.onChange((src) => {
        try {
          this._ingestAbilityMap(extractFlat(src));
        } catch {
        }
      });
      return () => {
        try {
          stopSlots();
        } catch {
        }
        try {
          stopInfos?.();
        } catch {
        }
      };
    },
    getAbilityLogs(opts) {
      const ids = opts?.abilityIds && opts.abilityIds.length ? new Set(opts.abilityIds) : null;
      const since = Number.isFinite(opts?.since) ? opts.since : 0;
      const lim = Math.max(0, Math.floor(opts?.limit ?? 0));
      let arr = this._logs.filter(
        (e) => (since ? e.performedAt >= since : true) && (ids ? ids.has(e.abilityId) : true)
      );
      arr = arr.sort((a, b) => b.performedAt - a.performedAt);
      return lim ? arr.slice(0, lim) : arr;
    },
    onAbilityLogs(cb) {
      this._logSubs.add(cb);
      try {
        cb(this.getAbilityLogs());
      } catch {
      }
      return () => {
        this._logSubs.delete(cb);
      };
    },
    getSeenAbilityIds() {
      const set2 = /* @__PURE__ */ new Set();
      for (const e of this._logs) set2.add(e.abilityId);
      return Array.from(set2).sort();
    },
    clearAbilityLogs() {
      this._logs.length = 0;
      this._seenPerfByPet.clear();
      this._logsCutoffMs = Date.now();
      this._notifyLogSubs();
    },
    _notifyLogSubs() {
      const snap = this.getAbilityLogs();
      this._logSubs.forEach((fn) => {
        try {
          fn(snap);
        } catch {
        }
      });
    },
    _pushLog(e) {
      this._logs.push(e);
      if (this._logs.length > this._logsMax) {
        this._logs.splice(0, this._logs.length - this._logsMax);
      }
      this._notifyLogSubs();
    },
    _ingestAbilityMap(map2) {
      if (!map2 || typeof map2 !== "object") return;
      const abilityDisplayName = (abilityId) => {
        const def = petAbilities[abilityId];
        return def?.name && def.name.trim() || abilityId;
      };
      const fmtTime12 = (ms) => new Date(ms).toLocaleTimeString("en-US", { hour: "numeric", minute: "2-digit", hour12: true });
      const fmtInt = (n) => Number.isFinite(Number(n)) ? Math.round(Number(n)).toLocaleString("en-US") : "0";
      const fmtPct0 = (n) => `${Number.isFinite(Number(n)) ? Number(n).toFixed(0) : "0"}%`;
      const fmtMin1 = (n) => `${Number.isFinite(Number(n)) ? Number(n).toFixed(1) : "0.0"} min`;
      const formatDetails = (abilityId, data) => {
        const d = data ?? {};
        const base = petAbilities[abilityId]?.baseParameters ?? {};
        switch (abilityId) {
          case "CoinFinderI":
          case "CoinFinderII":
          case "CoinFinderIII": {
            const coins = d["coinsFound"] ?? base["baseMaxCoinsFindable"];
            return `+${fmtInt(coins)} coins`;
          }
          case "SeedFinderI":
          case "SeedFinderII":
          case "SeedFinderIII":
          case "SeedFinderIV":
            return `Seed found: ${d["seedName"] ?? "\u2014"}`;
          case "SellBoostI":
          case "SellBoostII":
          case "SellBoostIII":
          case "SellBoostIV": {
            if (d["bonusCoins"] != null) return `Sale bonus: +${fmtInt(d["bonusCoins"])} coins`;
            const pct = base["cropSellPriceIncreasePercentage"];
            return pct != null ? `Sale bonus: +${fmtPct0(pct)}` : "Sale bonus";
          }
          case "ProduceRefund": {
            const n = d["numItemsRefunded"];
            return n != null ? `Refunded: ${fmtInt(n)} item(s)` : `Crops refunded`;
          }
          case "DoubleHarvest":
            return `Harvest duplicated`;
          case "ProduceEater": {
            const name = d["cropName"] ?? "\u2014";
            if (d["sellPrice"] != null) return `Eaten: ${name} (value ${fmtInt(d["sellPrice"])})`;
            const pct = base["cropSellPriceIncreasePercentage"];
            return pct != null ? `Eaten: ${name} (+${fmtPct0(pct)} price)` : `Eaten: ${name}`;
          }
          case "EggGrowthBoost":
          case "EggGrowthBoostII":
          case "EggGrowthBoostIII": {
            const mins = d["eggGrowthTimeReductionMinutes"] ?? base["eggGrowthTimeReductionMinutes"];
            return `Eggs faster: -${fmtMin1(mins)}`;
          }
          case "PlantGrowthBoost":
          case "PlantGrowthBoostII": {
            const mins = d["reductionMinutes"] ?? base["plantGrowthReductionMinutes"];
            return `Plants faster: -${fmtMin1(mins)}`;
          }
          case "GoldGranter": {
            const target = d["cropName"] ?? "\u2014";
            return `Gold mutation: ${target}`;
          }
          case "RainbowGranter": {
            const target = d["cropName"] ?? "\u2014";
            return `Rainbow mutation: ${target}`;
          }
          case "ProduceMutationBoost":
          case "ProduceMutationBoostII":
          case "PetMutationBoost":
          case "PetMutationBoostII":
            return "\u2014";
          case "PetXpBoost":
          case "PetXpBoostII": {
            const xp = d["bonusXp"] ?? base["bonusXp"];
            return `+${fmtInt(xp)} XP`;
          }
          case "PetAgeBoost":
          case "PetAgeBoostII": {
            const xp = d["bonusXp"] ?? base["bonusXp"];
            const who = d["petName"] ?? "pet";
            return `+${fmtInt(xp)} XP (${who})`;
          }
          case "PetHatchSizeBoost":
          case "PetHatchSizeBoostII": {
            const who = d["petName"] ?? "pet";
            if (d["strengthIncrease"] != null) return `+${fmtInt(d["strengthIncrease"])} strength (${who})`;
            const pct = base["maxStrengthIncreasePercentage"];
            return pct != null ? `Max strength +${fmtPct0(pct)} (${who})` : `Strength increased (${who})`;
          }
          case "HungerRestore":
          case "HungerRestoreII": {
            const pct = d["hungerRestoredPercentage"] ?? base["hungerRestorePercentage"];
            const who = d["petName"] ?? "pet";
            return `Hunger restored (${who}): ${fmtPct0(pct)}`;
          }
          case "HungerBoost":
          case "HungerBoostII": {
            const pct = base["hungerDepletionRateDecreasePercentage"];
            return pct != null ? `Hunger depletion rate: -${fmtPct0(pct)}` : "Hunger reduced";
          }
          case "PetRefund":
          case "PetRefundII": {
            const egg = d["eggName"] ?? null;
            return egg ? `Refunded: ${egg}` : `Pet refunded as egg`;
          }
          case "Copycat":
            return "\u2014";
          default: {
            const meta = petAbilities[abilityId];
            if (d && typeof d === "object" && Object.keys(d).length) return JSON.stringify(d);
            return meta?.description || "\u2014";
          }
        }
      };
      const EPS = 1e-6;
      for (const petId of Object.keys(map2)) {
        const entry = map2[petId];
        if (!entry || typeof entry !== "object") continue;
        const abilityId = entry.abilityId ?? null;
        const performedAtNum = Number(entry.performedAt) || 0;
        if (!abilityId || !performedAtNum) continue;
        const prev = this._seenPerfByPet.get(petId) || 0;
        if (performedAtNum <= prev) continue;
        if (this._logsCutoffMs && performedAtNum < this._logsCutoffMs - this._logsCutoffSkewMs) {
          this._seenPerfByPet.set(petId, performedAtNum);
          continue;
        }
        let hungerPct = Number.isFinite(Number(entry.hungerPct)) ? Number(entry.hungerPct) : null;
        if (hungerPct != null && hungerPct > 0 && hungerPct <= 1) hungerPct *= 100;
        if (hungerPct != null && hungerPct <= EPS) {
          this._seenPerfByPet.set(petId, performedAtNum);
          continue;
        }
        const pet = _invPetsCache.find((p) => String(p.id) === String(petId)) || null;
        const abilityIdStr = String(abilityId);
        const logLine = {
          petId,
          species: pet?.petSpecies || void 0,
          name: pet?.name ?? void 0,
          abilityId: abilityIdStr,
          abilityName: abilityDisplayName(abilityId),
          data: formatDetails(abilityIdStr, entry.data),
          performedAt: performedAtNum,
          time12: fmtTime12(performedAtNum)
        };
        this._seenPerfByPet.set(petId, performedAtNum);
        this._pushLog(logLine);
      }
    }
  };
  async function _getActivePetSlotIds() {
    try {
      const arr = await PlayerService.getPets();
      const list = Array.isArray(arr) ? arr : [];
      return list.map((p) => String(p?.slot?.id || "")).filter((id) => !!id).slice(0, 3);
    } catch {
      return [];
    }
  }
  async function _applyTeam(targetInvIds) {
    let activeSlots = await _getActivePetSlotIds();
    const targetSet = new Set(targetInvIds);
    const extras = activeSlots.filter((id) => !targetSet.has(id));
    const mustStore = Math.max(0, activeSlots.length - targetInvIds.length);
    if (mustStore > 0) {
      const toStore = extras.slice(0, mustStore);
      for (const itemId of toStore) {
        try {
          await PlayerService.storePet(itemId);
          activeSlots = activeSlots.filter((id) => id !== itemId);
        } catch {
        }
      }
    }
    const alreadyActive = /* @__PURE__ */ new Set();
    for (const invId of targetInvIds) {
      if (activeSlots.includes(invId)) alreadyActive.add(invId);
    }
    let swapped = 0, placed = 0, skipped = 0;
    if (alreadyActive.size) {
      activeSlots = activeSlots.filter((slotId) => !alreadyActive.has(slotId));
      skipped = alreadyActive.size;
    }
    const toDo = targetInvIds.filter((id) => !alreadyActive.has(id));
    for (const invId of toDo) {
      const slotId = activeSlots.shift();
      try {
        if (slotId) {
          await PlayerService.swapPet(slotId, invId);
          swapped++;
        } else {
          await PlayerService.placePet(invId, { x: 0, y: 0 }, "Boardwalk", 64);
          placed++;
        }
      } catch {
      }
    }
    return { swapped, placed, skipped };
  }

  // src/services/notifier.ts
  var LS_PREFS_KEY = "qws:shop:notifs:v1";
  var DISPLAY_RARITY = {
    [rarity.Common]: "Common",
    [rarity.Uncommon]: "Uncommon",
    [rarity.Rare]: "Rare",
    [rarity.Legendary]: "Legendary",
    [rarity.Mythic]: "Mythical",
    [rarity.Divine]: "Divine",
    [rarity.Celestial]: "Celestial"
  };
  var norm = (s) => String(s ?? "").toLowerCase();
  var _staticMeta = null;
  function buildStaticMeta() {
    if (_staticMeta) return _staticMeta;
    const map2 = /* @__PURE__ */ new Map();
    for (const [species, entry] of Object.entries(plantCatalog)) {
      if (entry?.seed) {
        const id = `Seed:${species}`;
        map2.set(id, {
          type: "Seed",
          name: entry.seed.name,
          rarity: DISPLAY_RARITY[entry.seed.rarity] ?? entry.seed.rarity
        });
      }
    }
    for (const [eggId, entry] of Object.entries(eggCatalog)) {
      const id = `Egg:${eggId}`;
      map2.set(id, {
        type: "Egg",
        name: entry.name,
        rarity: DISPLAY_RARITY[entry.rarity] ?? entry.rarity
      });
    }
    for (const [toolId, entry] of Object.entries(toolCatalog)) {
      const id = `Tool:${toolId}`;
      map2.set(id, {
        type: "Tool",
        name: entry.name,
        rarity: DISPLAY_RARITY[entry.rarity] ?? entry.rarity
      });
    }
    for (const [decorId, entry] of Object.entries(decorCatalog)) {
      const id = `Decor:${decorId}`;
      map2.set(id, {
        type: "Decor",
        name: entry.name,
        rarity: DISPLAY_RARITY[entry.rarity] ?? entry.rarity
      });
    }
    _staticMeta = map2;
    return map2;
  }
  var _prefs = /* @__PURE__ */ new Map();
  function _loadPrefs() {
    try {
      const raw = localStorage.getItem(LS_PREFS_KEY);
      const obj = raw ? JSON.parse(raw) : {};
      const m = /* @__PURE__ */ new Map();
      if (obj && typeof obj === "object") {
        for (const [k, v] of Object.entries(obj)) {
          const n = Number(v) | 0;
          const popupBits = n & 1;
          if (k && popupBits !== void 0) m.set(String(k), popupBits);
        }
      }
      _prefs = m;
    } catch {
      _prefs = /* @__PURE__ */ new Map();
    }
  }
  function _savePrefs() {
    try {
      const obj = {};
      for (const [k, v] of _prefs) obj[k] = v & 1;
      localStorage.setItem(LS_PREFS_KEY, JSON.stringify(obj));
    } catch {
    }
  }
  var _getPrefBits = (id) => (_prefs.get(id) ?? 0) & 1;
  var _setPrefBits = (id, bits) => {
    if (!id) return;
    const masked = bits & 1;
    if (masked) _prefs.set(id, masked);
    else _prefs.delete(id);
    _savePrefs();
    _recomputeFromCacheAndNotify();
  };
  var _rowsById = /* @__PURE__ */ new Map();
  var _lastSig = "";
  var _state = null;
  var _unsubShops = null;
  var _unsubPurchases = null;
  var _subs = /* @__PURE__ */ new Set();
  var _toolInv = /* @__PURE__ */ new Map();
  var _unsubToolInv = null;
  var TOOL_CAPS = {
    Shovel: 1,
    WateringCan: 99
  };
  function _isToolCapReached(toolId) {
    const cap = TOOL_CAPS[toolId];
    if (!cap) return false;
    const q = _toolInv.get(toolId) || 0;
    return q >= cap;
  }
  function _updateToolInv(raw) {
    try {
      const arr = Array.isArray(raw) ? raw : [];
      _toolInv = new Map(arr.map((it) => [String(it.toolId), Number(it.quantity) || 0]));
    } catch {
      _toolInv = /* @__PURE__ */ new Map();
    }
    _recomputeFromCacheAndNotify();
  }
  function _resolveToolInvAtom() {
    const a = Atoms;
    return a.inventory?.myToolInventory ?? a.shop?.myToolInventory ?? a.myToolInventoryAtom ?? null;
  }
  function _computeSig(ids) {
    return ids.slice().sort().join("|");
  }
  var _purchasesSubs = /* @__PURE__ */ new Set();
  function _coercePurchases(raw) {
    const co = (sec) => ({
      createdAt: Number(sec?.createdAt) || 0,
      purchases: sec?.purchases && typeof sec.purchases === "object" ? sec.purchases : {}
    });
    return {
      seed: co(raw?.seed),
      egg: co(raw?.egg),
      tool: co(raw?.tool),
      decor: co(raw?.decor)
    };
  }
  function _notifyPurchases(raw) {
    const snap = _coercePurchases(raw);
    _purchasesSubs.forEach((fn) => {
      try {
        fn(snap);
      } catch {
      }
    });
  }
  var _shopsSubs = /* @__PURE__ */ new Set();
  function _coerceSnap(raw) {
    const co = (sec) => ({
      inventory: Array.isArray(sec?.inventory) ? sec.inventory : [],
      secondsUntilRestock: Number(sec?.secondsUntilRestock) || 0
    });
    return {
      seed: co(raw?.seed),
      egg: co(raw?.egg),
      tool: co(raw?.tool),
      decor: co(raw?.decor)
    };
  }
  function _notifyShops(raw) {
    const snap = _coerceSnap(raw);
    _shopsSubs.forEach((fn) => {
      try {
        fn(snap);
      } catch {
      }
    });
  }
  function _recomputeFromRaw(raw) {
    const staticMeta = buildStaticMeta();
    const sections = [
      { key: "seed", type: "Seed" },
      { key: "egg", type: "Egg" },
      { key: "tool", type: "Tool" },
      { key: "decor", type: "Decor" }
    ];
    const seen = /* @__PURE__ */ new Set();
    for (const { key: key2, type } of sections) {
      const sec = raw?.[key2] ?? {};
      const inv = Array.isArray(sec?.inventory) ? sec.inventory : [];
      for (const entry of inv) {
        const id = type === "Seed" ? `Seed:${entry.species}` : type === "Egg" ? `Egg:${entry.eggId}` : type === "Tool" ? `Tool:${entry.toolId}` : `Decor:${entry.decorId}`;
        seen.add(id);
        const meta = staticMeta.get(id);
        const bits = _getPrefBits(id);
        const popup = !!(bits & 1);
        const row = {
          id,
          type,
          name: meta?.name ?? id.split(":")[1] ?? id,
          rarity: meta?.rarity,
          popup,
          followed: popup
          // compat
        };
        _rowsById.set(id, row);
      }
    }
    for (const id of Array.from(_rowsById.keys())) {
      if (!seen.has(id)) _rowsById.delete(id);
    }
    const rows = Array.from(_rowsById.values());
    const followed = rows.reduce((n, r) => n + (r.followed ? 1 : 0), 0);
    const next = {
      updatedAt: Date.now(),
      rows,
      counts: { items: rows.length, followed }
    };
    const sig = _computeSig(rows.map((r) => r.id));
    const changed = sig !== _lastSig;
    _state = next;
    if (changed) {
      _lastSig = sig;
      _notify();
    }
  }
  function _recomputeFromCacheAndNotify() {
    if (!_state) return;
    for (const [id, row] of _rowsById) {
      const bits = _getPrefBits(id);
      let popup = !!(bits & 1);
      if (id.startsWith("Tool:")) {
        const toolId = id.slice(5);
        if (_isToolCapReached(toolId)) {
          popup = false;
        }
      }
      row.popup = popup;
      row.followed = popup;
    }
    const rows = Array.from(_rowsById.values());
    const followed = rows.reduce((n, r) => n + (r.followed ? 1 : 0), 0);
    _state = {
      ..._state,
      updatedAt: Date.now(),
      rows,
      counts: { items: rows.length, followed }
    };
    _notify();
  }
  function _notify() {
    if (!_state) return;
    const snap = { ..._state, rows: _state.rows.slice() };
    _subs.forEach((fn) => {
      try {
        fn(snap);
      } catch {
      }
    });
  }
  var _started = false;
  async function _ensureStarted() {
    if (_started) return;
    _started = true;
    _loadPrefs();
    try {
      const cur2 = await Atoms.shop.shops.get();
      _recomputeFromRaw(cur2);
      _notifyShops(cur2);
    } catch {
    }
    try {
      _unsubShops = await Atoms.shop.shops.onChange((next) => {
        try {
          _recomputeFromRaw(next);
        } catch {
        }
        try {
          _notifyShops(next);
        } catch {
        }
      });
    } catch {
    }
    try {
      const curP = await Atoms.shop.myShopPurchases.get();
      _notifyPurchases(curP);
    } catch {
    }
    try {
      _unsubPurchases = await Atoms.shop.myShopPurchases.onChange((next) => {
        try {
          _notifyPurchases(next);
        } catch {
        }
      });
    } catch {
    }
    try {
      const invAtom = _resolveToolInvAtom();
      if (invAtom) {
        try {
          _updateToolInv(await invAtom.get());
        } catch {
        }
        try {
          _unsubToolInv = await invAtom.onChange((next) => {
            try {
              _updateToolInv(next);
            } catch {
            }
          });
        } catch {
        }
      }
    } catch {
    }
  }
  function _stop() {
    try {
      _unsubShops?.();
    } catch {
    }
    _unsubShops = null;
    try {
      _unsubPurchases?.();
    } catch {
    }
    _unsubPurchases = null;
    try {
      _unsubToolInv?.();
    } catch {
    }
    _unsubToolInv = null;
    _started = false;
  }
  var NotifierService = {
    // lifecycle
    async start() {
      await _ensureStarted();
      return () => _stop();
    },
    async get() {
      await _ensureStarted();
      if (!_state) {
        _recomputeFromRaw(await Atoms.shop.shops.get().catch(() => null));
      }
      return _state;
    },
    onChange(cb) {
      _subs.add(cb);
      return () => {
        _subs.delete(cb);
      };
    },
    async onChangeNow(cb) {
      await _ensureStarted();
      if (_state) cb(_state);
      else {
        try {
          _recomputeFromRaw(await Atoms.shop.shops.get());
        } catch {
        }
        if (_state) cb(_state);
      }
      return this.onChange(cb);
    },
    onShopsChange(cb) {
      _shopsSubs.add(cb);
      return () => {
        _shopsSubs.delete(cb);
      };
    },
    async onShopsChangeNow(cb) {
      await _ensureStarted();
      try {
        cb(_coerceSnap(await Atoms.shop.shops.get()));
      } catch {
      }
      return this.onShopsChange(cb);
    },
    onPurchasesChange(cb) {
      _purchasesSubs.add(cb);
      return () => {
        _purchasesSubs.delete(cb);
      };
    },
    async onPurchasesChangeNow(cb) {
      await _ensureStarted();
      try {
        cb(_coercePurchases(await Atoms.shop.myShopPurchases.get()));
      } catch {
      }
      return this.onPurchasesChange(cb);
    },
    // prefs (popup only)
    getPref(id) {
      if (id.startsWith("Tool:")) {
        const toolId = id.slice(5);
        if (_isToolCapReached(toolId)) {
          return { popup: false, followed: false };
        }
      }
      const bits = _getPrefBits(id);
      const popup = !!(bits & 1);
      return { popup, followed: popup };
    },
    setPopup(id, enabled) {
      if (enabled && id.startsWith("Tool:") && _isToolCapReached(id.slice(5))) {
        return;
      }
      const bits = _getPrefBits(id);
      const next = enabled ? bits | 1 : bits & ~1;
      _setPrefBits(id, next);
    },
    setPrefs(id, prefs) {
      const bits = _getPrefBits(id);
      let next = bits;
      if (typeof prefs.popup === "boolean") next = prefs.popup ? next | 1 : next & ~1;
      _setPrefBits(id, next);
    },
    clearPrefs(id) {
      _setPrefBits(id, 0);
    },
    isIdCapped(id) {
      if (!id.startsWith("Tool:")) return false;
      return _isToolCapReached(id.slice(5));
    },
    // pure filter util (no side-effects)
    filterRows(rows, f) {
      let arr = rows.slice();
      const ft = f.type ?? "all";
      if (ft && ft !== "all") {
        arr = arr.filter((r) => r.type.toLowerCase() === ft);
      }
      const fr = f.rarity ?? "all";
      if (fr !== "all") {
        arr = arr.filter((r) => norm(r.rarity) === fr);
      }
      return arr;
    }
  };

  // src/utils/audio.ts
  var AudioNotifier = class {
    constructor(opts = {}) {
      __publicField(this, "audioCtx", null);
      __publicField(this, "customBuffer", null);
      __publicField(this, "lastPlayAt", 0);
      __publicField(this, "minPlayGapMs");
      __publicField(this, "volume");
      __publicField(this, "enabled", true);
      __publicField(this, "unlockBound", false);
      __publicField(this, "unlockHandlers", []);
      __publicField(this, "notificationSound64", null);
      this.minPlayGapMs = Math.max(0, opts.minPlayGapMs ?? 1200);
      this.volume = Math.min(1, Math.max(0, opts.volume ?? 0.6));
      this.notificationSound64 = "";
      if (opts.unlockOnGesture !== false) {
        this.unlockBound = false;
      }
    }
    // ---------- Public API ----------
    setNotificationBase64(b64OrDataUri) {
      this.notificationSound64 = b64OrDataUri?.trim() || null;
      this.customBuffer = null;
    }
    /** Lecture principale : charge this.notificationSound64 si pas encore décodé, puis joue. */
    async notify() {
      if (!this.customBuffer && this.notificationSound64) {
        const s = this.notificationSound64.trim();
        if (s.startsWith("data:")) {
          await this.setCustomSoundFromDataURI(s);
        } else {
          await this.setCustomSoundFromBase64MP3(s);
        }
      }
      await this.playNotify();
    }
    setEnabled(on) {
      this.enabled = !!on;
    }
    setVolume(v) {
      this.volume = Math.min(1, Math.max(0, v));
    }
    setMinGap(ms) {
      this.minPlayGapMs = Math.max(0, ms | 0);
    }
    async setCustomSoundFromBase64MP3(b64) {
      const ctx = await this.ensureAudio();
      const ab = this.base64ToArrayBuffer(b64);
      this.customBuffer = await this.decodeWithCompat(ctx, ab);
    }
    async setCustomSoundFromDataURI(uri) {
      const ctx = await this.ensureAudio();
      if (uri.startsWith("data:")) {
        const comma = uri.indexOf(",");
        const b64 = comma >= 0 ? uri.slice(comma + 1) : uri;
        const ab = this.base64ToArrayBuffer(b64);
        this.customBuffer = await this.decodeWithCompat(ctx, ab);
      } else {
        const res = await fetch(uri);
        const ab = await res.arrayBuffer();
        this.customBuffer = await this.decodeWithCompat(ctx, ab);
      }
    }
    async setCustomSoundFromURL(url) {
      const ctx = await this.ensureAudio();
      const res = await fetch(url);
      const ab = await res.arrayBuffer();
      this.customBuffer = await this.decodeWithCompat(ctx, ab);
    }
    clearCustomSound() {
      this.customBuffer = null;
    }
    /** Play the custom sound (if present) with throttling; else fallback beep. */
    async playNotify() {
      if (!this.enabled) return;
      const now = performance.now();
      if (now - this.lastPlayAt < this.minPlayGapMs) return;
      this.lastPlayAt = now;
      try {
        const ctx = await this.ensureAudio();
        if (this.customBuffer) {
          const src = ctx.createBufferSource();
          const gain = ctx.createGain();
          src.buffer = this.customBuffer;
          gain.gain.value = this.volume;
          src.connect(gain).connect(ctx.destination);
          src.start();
          return;
        }
      } catch {
      }
      this.beep(880, 0.25);
    }
    /** Very short, gentle sine beep (fallback). */
    async beep(freq = 880, duration = 0.25) {
      try {
        const ctx = await this.ensureAudio();
        const osc = ctx.createOscillator();
        const gain = ctx.createGain();
        osc.type = "sine";
        osc.frequency.value = freq;
        gain.gain.value = 1e-4;
        osc.connect(gain).connect(ctx.destination);
        const t0 = ctx.currentTime;
        gain.gain.setValueAtTime(1e-4, t0);
        gain.gain.exponentialRampToValueAtTime(Math.max(0.05, this.volume * 0.2), t0 + 0.02);
        gain.gain.exponentialRampToValueAtTime(1e-4, t0 + Math.max(0.08, duration));
        osc.start(t0);
        osc.stop(t0 + Math.max(0.1, duration + 0.02));
      } catch {
      }
    }
    /** Clean up listeners; does not close the AudioContext to avoid state errors. */
    destroy() {
      this.detachUnlockListeners();
      this.audioCtx = null;
      this.customBuffer = null;
    }
    // ---------- Internals ----------
    async ensureAudio() {
      if (!this.audioCtx) {
        this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        this.attachUnlockListeners();
      }
      try {
        await this.audioCtx.resume();
      } catch {
      }
      return this.audioCtx;
    }
    attachUnlockListeners() {
      if (this.unlockBound || !this.audioCtx) return;
      const resume = async () => {
        try {
          await this.audioCtx.resume();
        } catch {
        }
      };
      const once = () => {
        this.detachUnlockListeners();
        resume();
      };
      const onPointer = () => once();
      const onKey = () => once();
      window.addEventListener("pointerdown", onPointer, { once: true });
      window.addEventListener("keydown", onKey, { once: true });
      this.unlockHandlers = [
        () => window.removeEventListener("pointerdown", onPointer),
        () => window.removeEventListener("keydown", onKey)
      ];
      this.unlockBound = true;
    }
    detachUnlockListeners() {
      if (!this.unlockBound) return;
      for (const off of this.unlockHandlers) {
        try {
          off();
        } catch {
        }
      }
      this.unlockHandlers = [];
      this.unlockBound = false;
    }
    base64ToArrayBuffer(b64) {
      const clean = b64.trim();
      const binStr = atob(clean);
      const len = binStr.length;
      const bytes = new Uint8Array(len);
      for (let i = 0; i < len; i++) bytes[i] = binStr.charCodeAt(i);
      return bytes.buffer;
    }
    decodeWithCompat(ctx, ab) {
      return new Promise((resolve, reject) => {
        const anyCtx = ctx;
        try {
          if (anyCtx.decodeAudioData.length === 1) {
            anyCtx.decodeAudioData(ab).then(resolve, reject);
          } else {
            anyCtx.decodeAudioData(ab, resolve, reject);
          }
        } catch (e) {
          reject(e);
        }
      });
    }
  };

  // src/utils/catalogIndex.ts
  var norm2 = (s) => String(s || "").toLowerCase().replace(/['’`]/g, "").replace(/\s+/g, " ").trim();
  var tileRefKey = (tr) => {
    const raw = String(tr ?? "");
    const last = raw.split(/[./]/).pop() || raw;
    return norm2(last);
  };
  var _toDataURI = (s) => s ? s.startsWith("data:") ? s : `data:image/png;base64,${s}` : void 0;
  var _seedImgCache = /* @__PURE__ */ new Map();
  var _eggImgCache = /* @__PURE__ */ new Map();
  var _toolImgCache = /* @__PURE__ */ new Map();
  var _decorImgCache = /* @__PURE__ */ new Map();
  function seedImageFromSpecies(species, cat = plantCatalog) {
    const key2 = String(species || "").toLowerCase();
    if (_seedImgCache.has(key2)) return _seedImgCache.get(key2);
    const entry = cat[species];
    const src = _toDataURI(entry?.seed?.img64);
    _seedImgCache.set(key2, src);
    return src;
  }
  var _eggIndexes = null;
  function getEggIndexes(cat) {
    if (!_eggIndexes) _eggIndexes = /* @__PURE__ */ new WeakMap();
    const hit = _eggIndexes.get(cat);
    if (hit) return hit;
    const byLowerId = /* @__PURE__ */ new Map();
    const byTileRef = /* @__PURE__ */ new Map();
    for (const [id, e] of Object.entries(cat)) {
      const lc = id.toLowerCase();
      if (!byLowerId.has(lc)) byLowerId.set(lc, id);
      const tr = e?.tileRef;
      if (tr != null) {
        const k1 = String(tr).toLowerCase();
        const k2 = tileRefKey(tr);
        if (!byTileRef.has(k1)) byTileRef.set(k1, id);
        if (!byTileRef.has(k2)) byTileRef.set(k2, id);
      }
      const last = tileRefKey(id);
      if (!byTileRef.has(last)) byTileRef.set(last, id);
    }
    const idx = { byLowerId, byTileRef };
    _eggIndexes.set(cat, idx);
    return idx;
  }
  function eggImageFromEggId(eggId, cat = eggCatalog) {
    const key2 = String(eggId || "");
    if (!key2) return void 0;
    const ck = key2.toLowerCase();
    if (_eggImgCache.has(ck)) return _eggImgCache.get(ck);
    const { byLowerId } = getEggIndexes(cat);
    const canonical = cat[key2] ? key2 : byLowerId.get(ck);
    const src = _toDataURI((canonical ? cat[canonical] : void 0)?.img64);
    _eggImgCache.set(ck, src);
    return src;
  }
  function toolImageFromId(toolId, cat = toolCatalog) {
    const id = String(toolId || "").trim();
    if (!id) return void 0;
    const cacheKey = id.toLowerCase();
    if (_toolImgCache.has(cacheKey)) return _toolImgCache.get(cacheKey);
    const entry = cat[id] ?? cat[cacheKey];
    const src = _toDataURI(entry?.img64);
    _toolImgCache.set(cacheKey, src);
    return src;
  }
  function decorImageFromId(decorId, cat = decorCatalog) {
    const cacheKey = String(decorId || "").toLowerCase();
    if (_decorImgCache.has(cacheKey)) return _decorImgCache.get(cacheKey);
    const raw = cat?.[decorId]?.img64;
    const src = _toDataURI(raw);
    _decorImgCache.set(cacheKey, src);
    return src;
  }

  // src/ui/menus/notificationOverlay.ts
  var style = (el2, s) => Object.assign(el2.style, s);
  var setProps = (el2, props) => {
    for (const [k, v] of Object.entries(props)) el2.style.setProperty(k, v);
  };
  function iconOf(id, size = 24) {
    const [type, raw] = id.split(":");
    const wrap = document.createElement("div");
    Object.assign(wrap.style, {
      width: `${size}px`,
      height: `${size}px`,
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      flex: `0 0 ${size}px`
    });
    const addImg = (src) => {
      if (!src) return false;
      const img = new Image();
      Object.assign(img, {
        src,
        width: size,
        height: size,
        decoding: "async",
        loading: "lazy",
        draggable: false
      });
      Object.assign(img.style, { width: "100%", height: "100%", objectFit: "contain" });
      wrap.appendChild(img);
      return true;
    };
    const emoji = (s) => {
      const span = document.createElement("span");
      span.textContent = s;
      span.style.fontSize = `${size - 2}px`;
      span.setAttribute("aria-hidden", "true");
      wrap.appendChild(span);
    };
    switch (type) {
      case "Seed":
        if (!addImg(seedImageFromSpecies(raw))) emoji("\u{1F331}");
        break;
      case "Egg":
        if (!addImg(eggImageFromEggId(raw))) emoji("\u{1F95A}");
        break;
      case "Tool":
        if (!addImg(toolImageFromId(raw))) emoji("\u{1F9F0}");
        break;
      case "Decor":
        if (!addImg(decorImageFromId(raw))) emoji("\u{1F3E0}");
        break;
      default:
        emoji("\u{1F514}");
    }
    return wrap;
  }
  function labelOf(id) {
    const [type, raw] = id.split(":");
    return type === "Seed" ? `${raw} Seed` : raw;
  }
  function purchasedCountForId(id, purchases) {
    if (!purchases) return 0;
    const [type, raw] = String(id).split(":");
    const sec = type === "Seed" ? purchases.seed : type === "Egg" ? purchases.egg : type === "Tool" ? purchases.tool : purchases.decor;
    if (!sec || !sec.purchases) return 0;
    const n = sec.purchases[raw];
    return typeof n === "number" && n > 0 ? n : 0;
  }
  var OverlayBarebone = class {
    constructor() {
      __publicField(this, "slot", document.createElement("div"));
      __publicField(this, "btn", document.createElement("button"));
      __publicField(this, "badge", document.createElement("span"));
      __publicField(this, "panel", document.createElement("div"));
      __publicField(this, "lastShops", null);
      __publicField(this, "lastPurch", null);
      // Anti-spam sonore (gap interne dans AudioNotifier)
      __publicField(this, "audio", new AudioNotifier({ minPlayGapMs: 3e3, volume: 0.6 }));
      // Suivi des IDs visibles dans l’overlay (pour déclencher le son sur nouvel entrant)
      __publicField(this, "prevOverlayIds", /* @__PURE__ */ new Set());
      __publicField(this, "soundPrimed", false);
      __publicField(this, "shopUpdates", 0);
      __publicField(this, "purchasesUpdates", 0);
      __publicField(this, "bootArmed", false);
      __publicField(this, "justRestocked", false);
      __publicField(this, "mo", null);
      // Items à afficher dans l’overlay (déjà filtrés)
      __publicField(this, "rows", []);
      this.slot = this.createSlot();
      this.btn = this.createButton();
      this.ensureBellCSS();
      this.badge = this.createBadge();
      this.panel = this.createPanel();
      this.installScrollGuards(this.panel);
      this.btn.onclick = () => {
        const on = this.panel.style.display !== "block";
        this.panel.style.display = on ? "block" : "none";
        if (on) this.renderPanel();
        this.updateBellWiggle();
      };
      this.slot.append(this.btn, this.badge, this.panel);
      this.attachLeftOfTargetCanvas();
      this.observeDomForRelocation();
      window.addEventListener("pointerdown", (e) => {
        if (this.panel.style.display !== "block") return;
        const t = e.target;
        if (!this.slot.contains(t)) this.panel.style.display = "none";
      });
    }
    destroy() {
      try {
        this.mo?.disconnect();
      } catch {
      }
      try {
        this.slot.remove();
      } catch {
      }
    }
    ensureBellCSS() {
      if (document.getElementById("qws-bell-anim-css")) return;
      const style2 = document.createElement("style");
      style2.id = "qws-bell-anim-css";
      style2.textContent = `
@keyframes qwsBellShake {
  0% { transform: rotate(0deg); }
  10% { transform: rotate(-16deg); }
  20% { transform: rotate(12deg); }
  30% { transform: rotate(-10deg); }
  40% { transform: rotate(8deg); }
  50% { transform: rotate(-6deg); }
  60% { transform: rotate(4deg); }
  70% { transform: rotate(-2deg); }
  80% { transform: rotate(1deg); }
  100% { transform: rotate(0deg); }
}

/* Classe appliqu\xE9e sur le span cloche quand il y a des items dans l'overlay */
.qws-bell--wiggle {
  animation: qwsBellShake 1.2s ease-in-out infinite;
  transform-origin: 50% 0%;
  display: inline-block;
}

/* Respecte l'accessibilit\xE9 */
@media (prefers-reduced-motion: reduce) {
  .qws-bell--wiggle { animation: none !important; }
}
`;
      document.head.appendChild(style2);
    }
    /* ========= SETTERS (subs) ========= */
    setShops(s) {
      const prev = this.lastShops;
      this.lastShops = s;
      this.shopUpdates++;
      this.justRestocked = !!(prev && ((prev.seed?.secondsUntilRestock ?? 0) < (s.seed?.secondsUntilRestock ?? 0) || (prev.tool?.secondsUntilRestock ?? 0) < (s.tool?.secondsUntilRestock ?? 0) || (prev.egg?.secondsUntilRestock ?? 0) < (s.egg?.secondsUntilRestock ?? 0) || (prev.decor?.secondsUntilRestock ?? 0) < (s.decor?.secondsUntilRestock ?? 0)));
      this.recompute();
    }
    setPurchases(p) {
      this.lastPurch = p;
      this.purchasesUpdates++;
      this.recompute();
    }
    /* ========= Core compute ========= */
    recompute() {
      if (!this.lastShops || !this.lastPurch) return;
      const out = [];
      const consider = (id, initialStock, canSpawnHere) => {
        if (!canSpawnHere) return;
        const pref = NotifierService.getPref?.(id) || {};
        if (!pref.popup) return;
        const bought = purchasedCountForId(id, this.lastPurch);
        const remaining = Math.max(initialStock - bought, 0);
        if (remaining > 0) out.push({ id, qty: remaining });
      };
      for (const it of this.lastShops.seed.inventory) consider(`Seed:${it.species}`, it.initialStock, it.canSpawnHere);
      for (const it of this.lastShops.tool.inventory) consider(`Tool:${it.toolId}`, it.initialStock, it.canSpawnHere);
      for (const it of this.lastShops.egg.inventory) consider(`Egg:${it.eggId}`, it.initialStock, it.canSpawnHere);
      for (const it of this.lastShops.decor.inventory) consider(`Decor:${it.decorId}`, it.initialStock, it.canSpawnHere);
      this.rows = out;
      this.renderBadge();
      if (this.panel.style.display === "block") this.renderPanel();
      this.updateBellWiggle();
      const overlayIds = new Set(out.map((r) => r.id));
      const shopEmpty = (this.lastShops.seed?.inventory?.length ?? 0) + (this.lastShops.tool?.inventory?.length ?? 0) + (this.lastShops.egg?.inventory?.length ?? 0) + (this.lastShops.decor?.inventory?.length ?? 0) === 0;
      const ready = this.shopUpdates >= 3 && this.purchasesUpdates >= 2 && !shopEmpty;
      if (!this.bootArmed) {
        if (!ready) {
          this.prevOverlayIds = overlayIds;
          return;
        }
        this.bootArmed = true;
        if (overlayIds.size > 0) {
          this.audio.notify().catch(() => {
          });
        }
        this.prevOverlayIds = overlayIds;
        this.justRestocked = false;
        return;
      }
      if (overlayIds.size === 0) {
        this.prevOverlayIds = overlayIds;
        this.justRestocked = false;
        return;
      }
      if (this.justRestocked) {
        this.audio.notify().catch(() => {
        });
        this.prevOverlayIds = overlayIds;
        this.justRestocked = false;
        return;
      }
      let hasNew = false;
      for (const id of overlayIds) {
        if (!this.prevOverlayIds.has(id)) {
          hasNew = true;
          break;
        }
      }
      if (hasNew) {
        this.audio.notify().catch(() => {
        });
      }
      this.prevOverlayIds = overlayIds;
      this.justRestocked = false;
    }
    /* ========= Render ========= */
    renderBadge() {
      const n = this.rows.length;
      this.badge.textContent = n ? String(n) : "";
      style(this.badge, { display: n ? "inline-flex" : "none" });
    }
    renderPanel() {
      this.panel.replaceChildren();
      const head = document.createElement("div");
      head.textContent = "Tracked items available";
      style(head, {
        fontWeight: "700",
        opacity: "0.9",
        padding: "4px 2px",
        borderBottom: "1px solid var(--qws-border-2, #ffffff14)",
        marginBottom: "4px"
      });
      this.panel.appendChild(head);
      if (!this.rows.length) {
        const empty = document.createElement("div");
        empty.textContent = "No tracked items are available.";
        style(empty, { opacity: "0.75", padding: "8px 2px" });
        this.panel.appendChild(empty);
        return;
      }
      for (const r of this.rows) {
        const row = document.createElement("div");
        Object.assign(row.style, {
          display: "grid",
          gridTemplateColumns: "24px 1fr max-content",
          // <-- icône + titre + qty
          alignItems: "center",
          gap: "8px",
          padding: "6px 4px",
          borderBottom: "1px solid var(--qws-border-2, #ffffff14)"
        });
        const icon = iconOf(r.id, 24);
        const title = document.createElement("div");
        title.textContent = labelOf(r.id);
        Object.assign(title.style, {
          fontWeight: "600",
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap",
          color: "var(--qws-text, #e7eef7)"
        });
        const qty = document.createElement("div");
        qty.textContent = `\xD7${r.qty}`;
        Object.assign(qty.style, {
          fontVariantNumeric: "tabular-nums",
          opacity: "0.9",
          color: "var(--qws-text-dim, #b9c3cf)"
        });
        row.append(icon, title, qty);
        this.panel.appendChild(row);
      }
    }
    /* ========= DOM bits ========= */
    createSlot() {
      const d = document.createElement("div");
      d.id = "qws-notifier-slot";
      style(d, {
        position: "relative",
        display: "inline-flex",
        alignItems: "center",
        marginRight: "var(--chakra-space-2, 0.5rem)",
        pointerEvents: "auto",
        fontFamily: "var(--chakra-fonts-body, GreyCliff CF), system-ui, sans-serif",
        color: "var(--chakra-colors-chakra-body-text, #e7eef7)",
        userSelect: "none"
      });
      setProps(d, {
        "-webkit-font-smoothing": "antialiased",
        "-webkit-text-size-adjust": "100%",
        "text-rendering": "optimizeLegibility"
      });
      return d;
    }
    createButton() {
      const btn = document.createElement("button");
      btn.type = "button";
      btn.setAttribute("aria-label", "Notifications");
      const bell = document.createElement("span");
      bell.className = "qws-bell";
      bell.textContent = "\u{1F514}";
      bell.setAttribute("aria-hidden", "true");
      style(btn, {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "6px",
        height: "36px",
        padding: "0 12px",
        borderRadius: "var(--chakra-radii-button, 50px)",
        border: "1px solid var(--chakra-colors-chakra-border-color, #ffffff33)",
        background: "var(--qws-panel, #111823cc)",
        backdropFilter: "blur(var(--qws-blur, 8px))",
        color: "var(--qws-text, #e7eef7)",
        boxShadow: "var(--qws-shadow, 0 10px 36px rgba(0,0,0,.45))",
        cursor: "pointer",
        transition: "border-color var(--chakra-transition-duration-fast,150ms) ease",
        outline: "none",
        position: "relative"
      });
      setProps(btn, {
        "-webkit-backdrop-filter": "blur(var(--qws-blur, 8px))",
        "-webkit-tap-highlight-color": "transparent"
      });
      btn.appendChild(bell);
      btn.addEventListener("mouseenter", () => {
        btn.style.borderColor = "var(--qws-accent, #7aa2ff)";
      });
      btn.addEventListener("mouseleave", () => {
        btn.style.borderColor = "var(--chakra-colors-chakra-border-color, #ffffff33)";
      });
      return btn;
    }
    updateBellWiggle() {
      const bell = this.btn.querySelector(".qws-bell");
      if (!bell) return;
      const shouldWiggle = this.rows.length > 0 && this.panel.style.display !== "block";
      bell.classList.toggle("qws-bell--wiggle", shouldWiggle);
    }
    createBadge() {
      const badge = document.createElement("span");
      style(badge, {
        position: "absolute",
        top: "-6px",
        right: "-6px",
        minWidth: "18px",
        height: "18px",
        padding: "0 6px",
        borderRadius: "999px",
        background: "var(--chakra-colors-Red-Magic, #D02128)",
        color: "var(--chakra-colors-Neutral-TrueWhite, #fff)",
        fontSize: "12px",
        fontWeight: "700",
        display: "none",
        alignItems: "center",
        justifyContent: "center",
        border: "1px solid rgba(0,0,0,.35)",
        lineHeight: "18px",
        pointerEvents: "none"
      });
      return badge;
    }
    createPanel() {
      const panel = document.createElement("div");
      panel.setAttribute("role", "dialog");
      panel.setAttribute("aria-label", "Tracked items available");
      style(panel, {
        position: "absolute",
        top: "calc(100% + var(--chakra-space-2, 0.5rem))",
        right: "0",
        width: "min(280px, 70vw)",
        // ← largeur réduite (était 360px)
        maxHeight: "50vh",
        overflow: "auto",
        overscrollBehavior: "contain",
        // ← empêche le scroll de “remonter” au jeu
        touchAction: "pan-y",
        // ← gestes tactiles = scroll vertical, pas zoom/pan global
        borderRadius: "var(--chakra-radii-card, 12px)",
        border: "1px solid var(--qws-border, #ffffff22)",
        background: "var(--qws-panel, #111823cc)",
        backdropFilter: "blur(var(--qws-blur, 8px))",
        color: "var(--qws-text, #e7eef7)",
        boxShadow: "var(--qws-shadow, 0 10px 36px rgba(0,0,0,.45))",
        padding: "8px",
        display: "none",
        zIndex: "var(--chakra-zIndices-DialogModal, 7010)"
      });
      setProps(panel, { "-webkit-backdrop-filter": "blur(var(--qws-blur, 8px))" });
      return panel;
    }
    installScrollGuards(el2) {
      const stop = (e) => {
        e.stopPropagation();
      };
      el2.addEventListener("wheel", stop, { passive: true, capture: true });
      el2.addEventListener("mousewheel", stop, { passive: true, capture: true });
      el2.addEventListener("DOMMouseScroll", stop, { passive: true, capture: true });
      el2.addEventListener("touchmove", stop, { passive: true, capture: true });
    }
    /* ========= Anchoring ========= */
    findTargetCanvas() {
      try {
        const c1 = document.querySelector("span[tabindex] canvas");
        if (c1) return c1;
        const all = Array.from(document.querySelectorAll("canvas"));
        const candidates = all.map((c) => ({ c, r: c.getBoundingClientRect() })).filter(({ r }) => r.width <= 512 && r.height <= 512 && r.top < 300).sort((a, b) => a.r.left - b.r.left || a.r.top - b.r.top);
        return candidates[0]?.c ?? null;
      } catch {
        return null;
      }
    }
    findAnchorBlockFromCanvas(c) {
      try {
        const tabbable = c.closest("span[tabindex]");
        if (tabbable && tabbable.parentElement) return tabbable.parentElement;
        let cur2 = c;
        while (cur2 && cur2.parentElement) {
          const p = cur2.parentElement;
          const cs = getComputedStyle(p);
          if (cs.display.includes("flex") && p.children.length <= 3) return p;
          cur2 = p;
        }
        return null;
      } catch {
        return null;
      }
    }
    insertLeftOf(block, el2) {
      const parent = block.parentElement;
      if (!parent) return;
      if (!block.isConnected || !parent.isConnected) return;
      const cs = getComputedStyle(parent);
      const isFlex = cs.display.includes("flex");
      const dir = cs.flexDirection || "row";
      try {
        if (isFlex && dir.startsWith("row") && dir.endsWith("reverse")) {
          if (el2 !== block.nextSibling) parent.insertBefore(el2, block.nextSibling);
        } else {
          parent.insertBefore(el2, block);
        }
      } catch {
      }
    }
    attachLeftOfTargetCanvas() {
      try {
        const canvas = this.findTargetCanvas();
        const block = canvas ? this.findAnchorBlockFromCanvas(canvas) : null;
        if (!block || !block.parentElement || !block.isConnected) {
          let fixed = document.getElementById("qws-notifier-fallback");
          if (!fixed) {
            fixed = document.createElement("div");
            fixed.id = "qws-notifier-fallback";
            style(fixed, {
              position: "fixed",
              zIndex: "var(--chakra-zIndices-PresentableOverlay, 5100)",
              top: "calc(10px + var(--sait, 0px))",
              right: "calc(10px + var(--sair, 0px))"
            });
            document.body.appendChild(fixed);
          }
          if (!fixed.contains(this.slot)) fixed.appendChild(this.slot);
          return;
        }
        if (this.slot.parentElement !== block.parentElement || this.slot.nextElementSibling !== block && block.previousElementSibling !== this.slot) {
          this.insertLeftOf(block, this.slot);
        }
      } catch {
      }
    }
    observeDomForRelocation() {
      try {
        this.mo?.disconnect();
        this.mo = new MutationObserver(() => this.attachLeftOfTargetCanvas());
        this.mo.observe(document.body, { childList: true, subtree: true });
        this.attachLeftOfTargetCanvas();
      } catch {
      }
    }
  };
  async function renderOverlay() {
    const overlay = new OverlayBarebone();
    const unsubPurch = await NotifierService.onPurchasesChangeNow((p) => overlay.setPurchases(p));
    const unsubShops = await NotifierService.onShopsChangeNow((s) => overlay.setShops(s));
    window.__qws_cleanup_notifier = () => {
      try {
        unsubShops();
      } catch {
      }
      try {
        unsubPurch();
      } catch {
      }
      try {
        overlay.destroy();
      } catch {
      }
    };
  }

  // src/ui/hud.ts
  function mountHUD(opts) {
    const LS_POS = "qws:pos";
    const LS_COLL = "qws:collapsed";
    const LS_HIDDEN = "qws:hidden";
    const MARGIN = 8;
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => mountHUD(opts), { once: true });
      return;
    }
    const css = `
  :root{
    --qws-bg:        #0f1318;
    --qws-panel:     #111823cc;
    --qws-border:    #ffffff22;
    --qws-border-2:  #ffffff14;
    --qws-accent:    #7aa2ff;
    --qws-text:      #e7eef7;
    --qws-text-dim:  #b9c3cf;
    --qws-blur:      8px;
    --qws-shadow:    0 10px 36px rgba(0,0,0,.45);
  }

  /* ---------- HUD floating box ---------- */
  .qws2{
    position:fixed; right:16px; bottom:16px; z-index:999998;
    font:12px/1.4 system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
    color:var(--qws-text);
    background:var(--qws-panel);
    border:1px solid var(--qws-border);
    border-radius:12px;
    padding:10px 12px;
    box-shadow:var(--qws-shadow);
    backdrop-filter:blur(var(--qws-blur));
    min-width:160px;
    display:flex; flex-direction:column; gap:8px;
  }
  .qws2.hidden{ display:none }
  .qws2 .row{ display:flex; gap:8px; align-items:center; flex-wrap:wrap }
  .qws2 .col{ display:flex; flex-direction:column; gap:4px }
  .qws2 .title{ font-weight:700; letter-spacing:.2px }
  .qws2 .sp{ flex:1 }

  .qws2 .pill{
    display:inline-flex; align-items:center; gap:6px;
    padding:4px 8px; border-radius:999px;
    border:1px solid #ffffff26;
    background:rgba(255,255,255,.06);
    color:var(--qws-text);
    box-shadow:inset 0 1px 0 rgba(255,255,255,.08);
  }
  .qws2 .ok{   background:rgba(36, 161, 72, .20);  border-color:#48d17066 }
  .qws2 .warn{ background:rgba(241, 194, 27, .18); border-color:#ffd65c66 }
  .qws2 .bad{  background:rgba(218, 30, 40, .20);  border-color:#ff7c8666 }

  .qws2 .btn{
    cursor:pointer; border-radius:10px; border:1px solid var(--qws-border);
    padding:6px 10px;
    background:linear-gradient(180deg, #ffffff12, #ffffff06);
    color:#fff;
    transition:transform .1s ease, background .18s ease, border-color .18s ease;
  }
  .qws2 .btn:hover{ background:linear-gradient(180deg, #ffffff18, #ffffff0a); border-color:#ffffff44 }
  .qws2 .btn:active{ transform:translateY(1px) }
  .qws2 .drag{ cursor:move; opacity:.9 }

  .qws2 .mini{ display:none }
  .qws2.min .mini{ display:inline-flex }
  .qws2.min .body{ display:none }

  /* Launcher always shown */
  .qws-launch{ margin-top:4px; border-top:1px solid var(--qws-border); padding-top:6px; display:block }
  .qws-launch .launch-item{ display:flex; align-items:center; gap:8px; margin:4px 0 }
  .qws-launch .launch-item .name{ flex:1; white-space:nowrap; overflow:hidden; text-overflow:ellipsis }
  .qws-launch .launch-item .btn.active{
    background:linear-gradient(180deg, rgba(122,162,255,.28), rgba(122,162,255,.12));
    border-color:#9db7ff66;
  }

  /* ---------- Windows ---------- */
  .qws-win{
    position:fixed; z-index:999999; min-width:260px; max-width:900px; max-height:90vh; overflow:auto;
    background:var(--qws-panel); color:var(--qws-text);
    border:1px solid var(--qws-border); border-radius:12px;
    box-shadow:var(--qws-shadow); backdrop-filter:blur(var(--qws-blur));
  }
  .qws-win .w-head{
    display:flex; align-items:center; gap:8px; padding:10px 12px;
    border-bottom:1px solid var(--qws-border); cursor:move;
    background:linear-gradient(180deg, rgba(255,255,255,.06), rgba(255,255,255,.02));
    border-top-left-radius:12px; border-top-right-radius:12px;
  }
  .qws-win .w-title{ font-weight:700 }
  .qws-win .sp{ flex:1 }
  .qws-win .w-btn{
    cursor:pointer; border-radius:10px; border:1px solid var(--qws-border);
    padding:4px 8px; background:linear-gradient(180deg, #ffffff12, #ffffff06); color:#fff;
  }
  .qws-win .w-btn:hover{ background:linear-gradient(180deg, #ffffff18, #ffffff0a); border-color:#ffffff44 }
  .qws-win .w-body{ padding:12px }

  /* Inputs inside windows */
  .qws-win input[type="text"], .qws-win input[type="number"]{
    width:120px; padding:8px 10px; border-radius:10px;
    border:1px solid var(--qws-border); background:rgba(0,0,0,.42); color:#fff;
    box-shadow:inset 0 1px 0 rgba(255,255,255,.06);
  }
  .qws-win .row{ display:flex; gap:8px; align-items:center; flex-wrap:wrap; margin:6px 0 }
  `;
    const st = document.createElement("style");
    st.textContent = css;
    (document.documentElement || document.body).appendChild(st);
    const box = document.createElement("div");
    box.className = "qws2";
    box.innerHTML = `
    <div class="row drag">
      <div class="title">Arie's Mod</div>
      <div class="sp"></div>
      <span id="qws2-status-mini" class="pill warn mini">\u2026</span>
      <button id="qws2-min" class="btn" title="Minimize/Expand">\u2013</button>
      <button id="qws2-hide" class="btn" title="Hide (Alt+X)">\u2715</button>
    </div>

    <!-- Status & store side-by-side (no mode label) -->
    <div class="row" style="margin:2px 0 2px 0;">
      <span id="qws2-status2" class="pill warn">WS: \u2026</span>
      <span id="qws2-store" class="pill warn">store: \u2026</span>
    </div>

    <div class="body">
      <div id="qws-launch" class="qws-launch"></div>
    </div>
  `;
    (document.documentElement || document.body).appendChild(box);
    function clampRect(el2) {
      const rect = el2.getBoundingClientRect();
      const vw = window.innerWidth, vh = window.innerHeight;
      let r = parseFloat(getComputedStyle(el2).right) || vw - rect.right;
      let b = parseFloat(getComputedStyle(el2).bottom) || vh - rect.bottom;
      const maxRight = Math.max(MARGIN, vw - rect.width - MARGIN);
      const maxBottom = Math.max(MARGIN, vh - rect.height - MARGIN);
      r = Math.min(Math.max(r, MARGIN), maxRight);
      b = Math.min(Math.max(b, MARGIN), maxBottom);
      el2.style.right = r + "px";
      el2.style.bottom = b + "px";
    }
    function ensureOnScreen(el2) {
      clampRect(el2);
      const rect = el2.getBoundingClientRect();
      const head = el2.querySelector(".w-head");
      const hrect = head?.getBoundingClientRect() || rect;
      const vw = window.innerWidth, vh = window.innerHeight;
      const M = MARGIN;
      let r = parseFloat(getComputedStyle(el2).right);
      if (Number.isNaN(r)) r = vw - rect.right;
      let b = parseFloat(getComputedStyle(el2).bottom);
      if (Number.isNaN(b)) b = vh - rect.bottom;
      const maxRight = Math.max(M, vw - rect.width - M);
      const maxBottom = Math.max(M, vh - rect.height - M);
      if (hrect.top < M) {
        const delta = M - hrect.top;
        b = Math.max(M, Math.min(maxBottom, b - delta));
      }
      if (rect.left < M) {
        const deltaL = M - rect.left;
        r = Math.max(M, Math.min(maxRight, r - deltaL));
      }
      el2.style.right = r + "px";
      el2.style.bottom = b + "px";
    }
    function resetWinPosDefault(el2) {
      el2.style.right = "16px";
      el2.style.bottom = "16px";
      ensureOnScreen(el2);
    }
    function withTopLocked(el2, mutate) {
      const before = el2.getBoundingClientRect();
      const vh = window.innerHeight;
      let b = parseFloat(getComputedStyle(el2).bottom);
      if (Number.isNaN(b)) b = vh - before.bottom;
      mutate();
      requestAnimationFrame(() => {
        const after = el2.getBoundingClientRect();
        const deltaTop = after.top - before.top;
        let newBottom = b + deltaTop;
        const maxBottom = Math.max(MARGIN, vh - after.height - MARGIN);
        newBottom = Math.min(Math.max(MARGIN, newBottom), maxBottom);
        el2.style.bottom = newBottom + "px";
        ensureOnScreen(el2);
      });
    }
    function saveHUDPos() {
      try {
        const r = parseFloat(box.style.right) || 16;
        const b = parseFloat(box.style.bottom) || 16;
        localStorage.setItem(LS_POS, JSON.stringify({ r, b }));
      } catch {
      }
    }
    try {
      const pos = JSON.parse(localStorage.getItem(LS_POS) || "null");
      if (pos && typeof pos.r === "number" && typeof pos.b === "number") {
        box.style.right = pos.r + "px";
        box.style.bottom = pos.b + "px";
      }
      if (localStorage.getItem(LS_COLL) === "1") {
        box.classList.add("min");
        const btnMin0 = box.querySelector("#qws2-min");
        if (btnMin0) btnMin0.textContent = "+";
      }
      if (localStorage.getItem(LS_HIDDEN) === "1") box.classList.add("hidden");
      requestAnimationFrame(() => clampRect(box));
      window.addEventListener("resize", () => clampRect(box));
    } catch {
    }
    const header = box.querySelector(".drag");
    const btnMin = box.querySelector("#qws2-min");
    const btnHide = box.querySelector("#qws2-hide");
    const sMini = box.querySelector("#qws2-status-mini");
    const sFull = box.querySelector("#qws2-status2");
    const sStore = box.querySelector("#qws2-store");
    const launch = box.querySelector("#qws-launch");
    if (!header || !btnMin || !btnHide || !sMini || !sFull || !sStore || !launch) {
      console.warn("[QuinoaWS] HUD elements missing, abort init");
      return;
    }
    const launchEl = launch;
    (function makeDraggable2() {
      let sx = 0, sy = 0, or = 0, ob = 0, down = false;
      header.addEventListener("mousedown", (e) => {
        down = true;
        sx = e.clientX;
        sy = e.clientY;
        const rect = box.getBoundingClientRect();
        or = parseFloat(getComputedStyle(box).right) || window.innerWidth - rect.right;
        ob = parseFloat(getComputedStyle(box).bottom) || window.innerHeight - rect.bottom;
        document.body.style.userSelect = "none";
      });
      window.addEventListener("mousemove", (e) => {
        if (!down) return;
        const dx = e.clientX - sx;
        const dy = e.clientY - sy;
        let r = or - dx;
        let b = ob - dy;
        const rect = box.getBoundingClientRect();
        const vw = window.innerWidth, vh = window.innerHeight;
        const maxRight = Math.max(MARGIN, vw - rect.width - MARGIN);
        const maxBottom = Math.max(MARGIN, vh - rect.height - MARGIN);
        r = Math.min(Math.max(r, MARGIN), maxRight);
        b = Math.min(Math.max(b, MARGIN), maxBottom);
        box.style.right = r + "px";
        box.style.bottom = b + "px";
      });
      window.addEventListener("mouseup", () => {
        if (!down) return;
        down = false;
        document.body.style.userSelect = "";
        saveHUDPos();
      });
    })();
    btnMin.onclick = () => {
      withTopLocked(box, () => {
        box.classList.toggle("min");
        btnMin.textContent = box.classList.contains("min") ? "+" : "\u2013";
        try {
          localStorage.setItem(LS_COLL, box.classList.contains("min") ? "1" : "0");
        } catch {
        }
      });
    };
    btnHide.onclick = () => {
      box.classList.add("hidden");
      try {
        localStorage.setItem(LS_HIDDEN, "1");
      } catch {
      }
    };
    window.addEventListener("keydown", (e) => {
      const t = e.target;
      const editing = !!t && (t.isContentEditable || /^(input|textarea|select)$/i.test(t.tagName));
      if (editing) return;
      if (e.repeat) return;
      const isX = e.code === "KeyX" || typeof e.key === "string" && (e.key.toLowerCase() === "x" || e.key === "\u2248");
      if (e.altKey && !e.shiftKey && !e.ctrlKey && !e.metaKey && isX) {
        e.preventDefault();
        const hidden = box.classList.toggle("hidden");
        try {
          localStorage.setItem(LS_HIDDEN, hidden ? "1" : "0");
        } catch {
        }
      }
    }, true);
    const windows = /* @__PURE__ */ new Map();
    let cascade = 0;
    function openWindow(id, title, render) {
      if (windows.has(id)) {
        const w = windows.get(id);
        w.el.style.display = "";
        bumpZ(w.el);
        setLaunchState(id, true);
        return;
      }
      const win = document.createElement("div");
      win.className = "qws-win";
      win.innerHTML = `
      <div class="w-head">
        <div class="w-title"></div>
        <div class="sp"></div>
        <button class="w-btn" data-act="min" title="Minimize/Expand">\u2013</button>
        <button class="w-btn" data-act="close" title="Close">\u2715</button>
      </div>
      <div class="w-body"></div>
    `;
      (document.documentElement || document.body).appendChild(win);
      const head = win.querySelector(".w-head");
      const titleEl = win.querySelector(".w-title");
      const btnMin2 = win.querySelector('[data-act="min"]');
      const btnClose = win.querySelector('[data-act="close"]');
      const body = win.querySelector(".w-body");
      titleEl.textContent = title;
      const offset = cascade++ % 5 * 24;
      win.style.right = 16 + offset + "px";
      win.style.bottom = 16 + offset + "px";
      clampRect(win);
      bumpZ(win);
      (function dragWin() {
        let sx = 0, sy = 0, or = 0, ob = 0, down = false;
        head.addEventListener("mousedown", (e) => {
          const t = e.target;
          if (t.closest(".w-btn")) return;
          down = true;
          sx = e.clientX;
          sy = e.clientY;
          const rect = win.getBoundingClientRect();
          or = parseFloat(getComputedStyle(win).right) || window.innerWidth - rect.right;
          ob = parseFloat(getComputedStyle(win).bottom) || window.innerHeight - rect.bottom;
          document.body.style.userSelect = "none";
          bumpZ(win);
        });
        window.addEventListener("mousemove", (e) => {
          if (!down) return;
          const dx = e.clientX - sx;
          const dy = e.clientY - sy;
          let r = or - dx;
          let b = ob - dy;
          const rect = win.getBoundingClientRect();
          const vw = window.innerWidth, vh = window.innerHeight;
          const maxRight = Math.max(MARGIN, vw - rect.width - MARGIN);
          const maxBottom = Math.max(MARGIN, vh - rect.height - MARGIN);
          r = Math.min(Math.max(r, MARGIN), maxRight);
          b = Math.min(Math.max(b, MARGIN), maxBottom);
          win.style.right = r + "px";
          win.style.bottom = b + "px";
        });
        window.addEventListener("mouseup", () => {
          down = false;
          document.body.style.userSelect = "";
          saveWinPos(id, win);
        });
      })();
      btnMin2.onclick = () => {
        withTopLocked(win, () => {
          const hidden = body.style.display === "none";
          body.style.display = hidden ? "" : "none";
          btnMin2.textContent = hidden ? "\u2013" : "+";
        });
      };
      btnClose.onclick = () => {
        win.style.display = "none";
        setLaunchState(id, false);
      };
      patchInputsKeyTrap(win);
      try {
        render(body);
      } catch (e) {
        body.textContent = String(e);
      }
      saveWinPos(id, win);
      windows.set(id, { id, el: win, head, body });
      setLaunchState(id, true);
    }
    function isShown(el2) {
      return el2.style.display !== "none";
    }
    function toggleWindow(id, title, render) {
      const existing = windows.get(id);
      if (!existing) {
        openWindow(id, title, (root) => {
          const el2 = root.closest(".qws-win");
          if (el2) restoreWinPos(id, el2);
          render(root);
        });
        return true;
      } else {
        if (isShown(existing.el)) {
          existing.el.style.display = "none";
          setLaunchState(id, false);
          return false;
        } else {
          existing.el.style.display = "";
          bumpZ(existing.el);
          ensureOnScreen(existing.el);
          setLaunchState(id, true);
          return true;
        }
      }
    }
    function bumpZ(el2) {
      let maxZ = 999999;
      windows.forEach((w) => {
        const z = parseInt(getComputedStyle(w.el).zIndex || "999999", 10);
        if (z > maxZ) maxZ = z;
      });
      el2.style.zIndex = String(maxZ + 1);
    }
    function saveWinPos(id, el2) {
      try {
        const r = parseFloat(el2.style.right) || 16;
        const b = parseFloat(el2.style.bottom) || 16;
        localStorage.setItem(`qws:win:${id}:pos`, JSON.stringify({ r, b }));
      } catch {
      }
    }
    function restoreWinPos(id, el2) {
      try {
        const raw = localStorage.getItem(`qws:win:${id}:pos`);
        if (!raw) return;
        const pos = JSON.parse(raw);
        if (typeof pos.r === "number") el2.style.right = pos.r + "px";
        if (typeof pos.b === "number") el2.style.bottom = pos.b + "px";
        ensureOnScreen(el2);
      } catch {
      }
    }
    window.addEventListener("resize", () => {
      windows.forEach((w) => ensureOnScreen(w.el));
    });
    function enableAltDragAnywhere() {
      let st2 = null;
      const pickRoot = (node) => {
        const el2 = node;
        if (!el2) return null;
        return el2.closest?.(".qws-win, .qws2") || null;
      };
      const onDown = (e) => {
        if (!e.altKey || e.button !== 0) return;
        const root = pickRoot(e.target);
        if (!root || root.style.display === "none") return;
        const rect = root.getBoundingClientRect();
        const vw = window.innerWidth, vh = window.innerHeight;
        let or = parseFloat(getComputedStyle(root).right);
        let ob = parseFloat(getComputedStyle(root).bottom);
        if (Number.isNaN(or)) or = vw - rect.right;
        if (Number.isNaN(ob)) ob = vh - rect.bottom;
        st2 = { el: root, sx: e.clientX, sy: e.clientY, or, ob };
        document.body.style.userSelect = "none";
        bumpZ(root);
        e.preventDefault();
        e.stopPropagation();
      };
      const onMove = (e) => {
        if (!st2) return;
        const dx = e.clientX - st2.sx;
        const dy = e.clientY - st2.sy;
        let r = st2.or - dx;
        let b = st2.ob - dy;
        const rect = st2.el.getBoundingClientRect();
        const vw = window.innerWidth, vh = window.innerHeight;
        const maxRight = Math.max(MARGIN, vw - rect.width - MARGIN);
        const maxBottom = Math.max(MARGIN, vh - rect.height - MARGIN);
        r = Math.min(Math.max(r, MARGIN), maxRight);
        b = Math.min(Math.max(b, MARGIN), maxBottom);
        st2.el.style.right = `${r}px`;
        st2.el.style.bottom = `${b}px`;
      };
      const stopDrag = () => {
        if (!st2) return;
        document.body.style.userSelect = "";
        clampRect(st2.el);
        const el2 = st2.el;
        let saved = false;
        windows.forEach((w) => {
          if (w.el === el2 && !saved) {
            saveWinPos(w.id, el2);
            saved = true;
          }
        });
        if (!saved && el2 === box) saveHUDPos();
        st2 = null;
      };
      const onUp = () => stopDrag();
      const onKeyUp = (e) => {
        if (e.key === "Alt" || e.key === "AltGraph") stopDrag();
      };
      window.addEventListener("mousedown", onDown, true);
      window.addEventListener("mousemove", onMove, true);
      window.addEventListener("mouseup", onUp, true);
      window.addEventListener("keyup", onKeyUp, true);
    }
    function patchInputsKeyTrap(scope) {
      const isEditable = (el2) => {
        if (!el2 || !(el2 instanceof HTMLElement)) return false;
        if (el2 instanceof HTMLTextAreaElement) return true;
        if (el2 instanceof HTMLInputElement) {
          const t = (el2.type || "").toLowerCase();
          return t === "text" || t === "number" || t === "search";
        }
        return el2.isContentEditable === true;
      };
      const handler = (ev) => {
        const target = ev.target;
        const active = document.activeElement;
        const inScope = (node) => !!(node && (scope.contains(node) || node.closest?.(".qws-win") || node.closest?.(".qws2")));
        if (!(inScope(target) && isEditable(target) || inScope(active) && isEditable(active))) return;
        ev.stopPropagation();
        ev.stopImmediatePropagation?.();
      };
      const types = ["keydown", "keypress", "keyup"];
      types.forEach((t) => {
        window.addEventListener(t, handler, { capture: true });
        document.addEventListener(t, handler, { capture: true });
        scope.addEventListener(t, handler, { capture: true });
      });
      return () => {
        types.forEach((t) => {
          window.removeEventListener(t, handler, { capture: true });
          document.removeEventListener(t, handler, { capture: true });
          scope.removeEventListener(t, handler, { capture: true });
        });
      };
    }
    const registry2 = [];
    const launchButtons = /* @__PURE__ */ new Map();
    function setLaunchState(id, open) {
      const btn = launchButtons.get(id);
      if (!btn) return;
      btn.textContent = open ? "Close" : "Open";
      btn.dataset.open = open ? "1" : "0";
      if (open) btn.classList.add("active");
      else btn.classList.remove("active");
    }
    function register(id, title, render) {
      registry2.push({ id, title, render });
      addLaunchItem(id, title, render);
    }
    function addLaunchItem(id, title, render) {
      const item = document.createElement("div");
      item.className = "launch-item";
      item.innerHTML = `<div class="name">${escapeHtml2(title)}</div>`;
      const openBtn = document.createElement("button");
      openBtn.className = "btn";
      openBtn.textContent = "Open";
      openBtn.dataset.open = "0";
      launchButtons.set(id, openBtn);
      openBtn.onclick = () => {
        const w = windows.get(id);
        if (w && w.el.style.display !== "none") {
          w.el.style.display = "none";
          setLaunchState(id, false);
        } else {
          openWindow(id, title, (root) => {
            const el2 = root.closest(".qws-win");
            if (el2) restoreWinPos(id, el2);
            render(root);
          });
          setLaunchState(id, true);
        }
      };
      item.appendChild(openBtn);
      launch.appendChild(item);
    }
    try {
      opts?.onRegister?.(register);
    } catch {
    }
    patchInputsKeyTrap(box);
    enableAltDragAnywhere();
    (async () => {
      try {
        await ensureStore();
      } catch {
      }
    })();
    setInterval(() => {
      try {
        const ws = getOpenPageWS();
        sMini.textContent = "OPEN";
        sFull.textContent = "WS: OPEN";
        tag(sMini, "ok");
        tag(sFull, "ok");
      } catch {
        const viaWorker = !!window.__QWS_workerFound || workerFound;
        sMini.textContent = viaWorker ? "Worker" : "none";
        sFull.textContent = "WS: " + (viaWorker ? "via Worker" : "none");
        tag(sMini, viaWorker ? "ok" : "warn");
        tag(sFull, viaWorker ? "ok" : "warn");
      }
      try {
        const captured = isStoreCaptured();
        const info = getCapturedInfo();
        if (captured) {
          sStore.textContent = `store: ${info.via || "ready"}`;
          tag(sStore, "ok");
        } else if (info.via === "polyfill" || info.polyfill) {
          sStore.textContent = "store: polyfill";
          tag(sStore, "warn");
        } else {
          sStore.textContent = "store: none";
          tag(sStore, "bad");
        }
      } catch {
        sStore.textContent = "store: error";
        tag(sStore, "bad");
      }
    }, 800);
    function getOpenPageWS() {
      for (let i = 0; i < sockets.length; i++) {
        if (sockets[i].readyState === NativeWS.OPEN) return sockets[i];
      }
      throw new Error("no page ws");
    }
    function tag(el2, cls) {
      el2.classList.remove("ok", "warn", "bad");
      if (cls) el2.classList.add(cls);
    }
    function escapeHtml2(s) {
      return s.replace(/[&<>"']/g, (m) => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" })[m]);
    }
  }
  function initWatchers() {
    (async () => {
      await PetsService.startAbilityLogsWatcher();
      await renderOverlay();
    })();
  }

  // src/utils/calculators.ts
  var key = (s) => String(s ?? "").trim();
  function resolveSpeciesKey(species) {
    const wanted = key(species).toLowerCase();
    if (!wanted) return null;
    for (const k of Object.keys(plantCatalog)) {
      if (k.toLowerCase() === wanted) return k;
    }
    return null;
  }
  function findAnySellPriceNode(obj) {
    if (!obj || typeof obj !== "object") return null;
    if (typeof obj.baseSellPrice === "number" && Number.isFinite(obj.baseSellPrice)) {
      return obj.baseSellPrice;
    }
    for (const k of ["produce", "crop", "item", "items", "data"]) {
      if (obj[k]) {
        const v = findAnySellPriceNode(obj[k]);
        if (v != null) return v;
      }
    }
    try {
      const seen = /* @__PURE__ */ new Set();
      const stack = [obj];
      while (stack.length) {
        const cur2 = stack.pop();
        if (!cur2 || typeof cur2 !== "object" || seen.has(cur2)) continue;
        seen.add(cur2);
        if (typeof cur2.baseSellPrice === "number") {
          const v = cur2.baseSellPrice;
          if (Number.isFinite(v)) return v;
        }
        for (const v of Object.values(cur2)) if (v && typeof v === "object") stack.push(v);
      }
    } catch {
    }
    return null;
  }
  function defaultGetBasePrice(species) {
    const spKey = resolveSpeciesKey(species);
    if (!spKey) return null;
    const node = plantCatalog[spKey];
    const cands = [
      node?.produce?.baseSellPrice,
      node?.crop?.baseSellPrice,
      node?.item?.baseSellPrice,
      node?.items?.Produce?.baseSellPrice
    ].filter((v) => typeof v === "number" && Number.isFinite(v));
    if (cands.length) return cands[0];
    return findAnySellPriceNode(node);
  }
  function applyRounding(v, mode = "round") {
    switch (mode) {
      case "floor":
        return Math.floor(v);
      case "ceil":
        return Math.ceil(v);
      case "none":
        return v;
      case "round":
      default:
        return Math.round(v);
    }
  }
  function friendBonusMultiplier(playersInRoom) {
    if (!Number.isFinite(playersInRoom)) return 1;
    const n = Math.max(1, Math.min(6, Math.floor(playersInRoom)));
    return 1 + (n - 1) * 0.1;
  }
  var COLOR_MULT = {
    Gold: 25,
    Rainbow: 50
  };
  var WEATHER_MULT = {
    Wet: 2,
    Chilled: 2,
    Frozen: 10
  };
  var TIME_MULT = {
    Dawnlit: 2,
    Dawnbound: 3,
    Amberlit: 5,
    Amberbound: 6
  };
  var WEATHER_TIME_COMBO = {
    "Wet+Dawnlit": 3,
    "Chilled+Dawnlit": 3,
    "Wet+Amberlit": 6,
    "Chilled+Amberlit": 6,
    "Frozen+Dawnlit": 11,
    "Frozen+Dawnbound": 12,
    "Frozen+Amberlit": 14,
    "Frozen+Amberbound": 15
  };
  function isColor(m) {
    return m === "Gold" || m === "Rainbow";
  }
  function isWeather(m) {
    return m === "Wet" || m === "Chilled" || m === "Frozen";
  }
  function isTime(m) {
    return m === "Dawnlit" || m === "Dawnbound" || m === "Amberlit" || m === "Amberbound";
  }
  function normalizeMutationName(m) {
    const s = key(m).toLowerCase();
    if (!s) return "";
    if (s === "amberglow" || s === "ambershine" || s === "amberlight") return "Amberlit";
    if (s === "dawn" || s === "dawnlight") return "Dawnlit";
    if (s === "gold") return "Gold";
    if (s === "rainbow") return "Rainbow";
    if (s === "wet") return "Wet";
    if (s === "chilled") return "Chilled";
    if (s === "frozen") return "Frozen";
    if (s === "dawnlit") return "Dawnlit";
    if (s === "dawnbound") return "Dawnbound";
    if (s === "amberlit") return "Amberlit";
    if (s === "amberbound") return "Amberbound";
    return m;
  }
  function computeColorMultiplier(mutations) {
    if (!Array.isArray(mutations)) return 1;
    let best = 1;
    for (const raw of mutations) {
      const m = normalizeMutationName(raw);
      if (isColor(m)) {
        const mult = COLOR_MULT[m];
        if (mult > best) best = mult;
      }
    }
    return best;
  }
  function pickWeather(mutations) {
    if (!Array.isArray(mutations)) return null;
    let pick = null;
    for (const raw of mutations) {
      const m = normalizeMutationName(raw);
      if (isWeather(m)) {
        if (pick == null) {
          pick = m;
          continue;
        }
        if (WEATHER_MULT[m] > WEATHER_MULT[pick]) pick = m;
      }
    }
    return pick;
  }
  function pickTime(mutations) {
    if (!Array.isArray(mutations)) return null;
    let pick = null;
    for (const raw of mutations) {
      const m = normalizeMutationName(raw);
      if (isTime(m)) {
        if (pick == null) {
          pick = m;
          continue;
        }
        if (TIME_MULT[m] > TIME_MULT[pick]) pick = m;
      }
    }
    return pick;
  }
  function computeWeatherTimeMultiplier(weather, time) {
    if (!weather && !time) return 1;
    if (weather && !time) return WEATHER_MULT[weather];
    if (!weather && time) return TIME_MULT[time];
    const k = `${weather}+${time}`;
    const combo = WEATHER_TIME_COMBO[k];
    if (typeof combo === "number") return combo;
    return Math.max(WEATHER_MULT[weather], TIME_MULT[time]);
  }
  function mutationsMultiplier(mutations) {
    const color = computeColorMultiplier(mutations);
    const weather = pickWeather(mutations);
    const time = pickTime(mutations);
    const wt = computeWeatherTimeMultiplier(weather, time);
    return color * wt;
  }
  function estimateProduceValue(species, scale, mutations, opts) {
    const getBase = opts?.getBasePrice ?? defaultGetBasePrice;
    const sXform = opts?.scaleTransform ?? ((_, s) => s);
    const round = opts?.rounding ?? "round";
    const base = getBase(species);
    if (!(Number.isFinite(base) && base > 0)) return 0;
    const sc = Number(scale);
    if (!Number.isFinite(sc) || sc <= 0) return 0;
    const effScale = sXform(species, sc);
    if (!Number.isFinite(effScale) || effScale <= 0) return 0;
    const mutMult = mutationsMultiplier(mutations);
    const friendsMult = friendBonusMultiplier(opts?.friendPlayers);
    const pre = base * effScale * mutMult * friendsMult;
    const out = Math.max(0, applyRounding(pre, round));
    return out;
  }
  function valueFromInventoryProduce(item, opts, playersInRoom) {
    if (!item || item.itemType !== "Produce") return 0;
    const merged = playersInRoom == null ? opts : { ...opts, friendPlayers: playersInRoom };
    return estimateProduceValue(item.species, item.scale, item.mutations, merged);
  }
  function valueFromGardenSlot(slot, opts, playersInRoom) {
    if (!slot) return 0;
    const merged = playersInRoom == null ? opts : { ...opts, friendPlayers: playersInRoom };
    return estimateProduceValue(slot.species, slot.targetScale, slot.mutations, merged);
  }
  function valueFromGardenPlant(plant, opts, playersInRoom) {
    if (!plant || plant.objectType !== "plant" || !Array.isArray(plant.slots)) return 0;
    const merged = playersInRoom == null ? opts : { ...opts, friendPlayers: playersInRoom };
    let sum = 0;
    for (const s of plant.slots) sum += valueFromGardenSlot(s, merged);
    return sum;
  }
  function sumInventoryValue(items, opts, playersInRoom) {
    if (!Array.isArray(items)) return 0;
    const merged = playersInRoom == null ? opts : { ...opts, friendPlayers: playersInRoom };
    let sum = 0;
    for (const it of items) {
      if (it?.itemType === "Produce") {
        sum += valueFromInventoryProduce(it, merged);
      }
    }
    return sum;
  }
  function sumGardenValue(garden2, opts, playersInRoom) {
    if (!garden2 || typeof garden2 !== "object") return 0;
    const merged = playersInRoom == null ? opts : { ...opts, friendPlayers: playersInRoom };
    let sum = 0;
    for (const k of Object.keys(garden2)) {
      const p = garden2[k];
      if (p?.objectType === "plant") {
        sum += valueFromGardenPlant(p, merged);
      }
    }
    return sum;
  }
  var DefaultPricing = Object.freeze({
    getBasePrice: defaultGetBasePrice,
    rounding: "round"
  });

  // src/utils/tooltip.finder.ts
  function findBestTooltipDetailHostInside(root) {
    if (!root) return null;
    const name = root.querySelector?.("p.chakra-text") ?? root.querySelector?.('p[class*="chakra-text"]') ?? root.querySelector?.("p") ?? null;
    if (name) {
      const hasCanvasLocal = (el2) => !!el2.querySelector("canvas");
      let node = name;
      while (node && node !== root) {
        const cs = getComputedStyle(node);
        if (cs.display.includes("flex") && !hasCanvasLocal(node)) {
          const parent = node.parentElement;
          if (parent && Array.from(parent.children).some((ch) => ch !== node && ch instanceof HTMLElement && hasCanvasLocal(ch))) {
            return node;
          }
        }
        node = node.parentElement;
      }
      const mc = name.closest(".McFlex");
      if (mc) return mc;
      if (name.parentElement) return name.parentElement;
    }
    const candidates = Array.from(root.querySelectorAll?.(".McFlex, [class*='McFlex']") ?? []);
    for (const c of candidates) {
      const cs = getComputedStyle(c);
      if (!cs.display.includes("flex")) continue;
      if (c.querySelector("canvas")) continue;
      if (!c.querySelector('p, [class*="chakra-text"]')) continue;
      return c;
    }
    return root || null;
  }

  // src/services/domChanges.ts
  var STYLE_ID = "qws-price-badge-style";
  var ATTR_INJECTED = "data-qws-injected";
  var CLASS_BADGE = "qws-price-badge";
  var USER_SCOPE_ROOT = ".McFlex.css-1wu1jyg";
  var nfUS = new Intl.NumberFormat("en-US");
  var fmtCoins = (n) => nfUS.format(Math.max(0, Math.round(n)));
  var ACTIVE_HOSTS = /* @__PURE__ */ new Set();
  var cur = null;
  var players;
  var sortedIdx = null;
  var selectedIdx = null;
  var isPlantObject = (o) => !!o && o.objectType === "plant";
  var defaultOrder = (n) => Array.from({ length: n }, (_, i) => i);
  var getOrder = () => {
    const n = Array.isArray(cur?.slots) ? cur.slots.length : 0;
    if (!n) return [];
    return Array.isArray(sortedIdx) && sortedIdx.length === n ? sortedIdx : defaultOrder(n);
  };
  var getOrderedSlots = () => {
    if (!isPlantObject(cur)) return [];
    const slots = Array.isArray(cur.slots) ? cur.slots : [];
    const ord = getOrder();
    const out = [];
    for (const i of ord) if (slots[i] != null) out.push(slots[i]);
    return out;
  };
  function selectedOrderedPosition() {
    if (!isPlantObject(cur)) return 0;
    const slots = cur.slots ?? [];
    const n = Array.isArray(slots) ? slots.length : 0;
    if (!n) return 0;
    const raw = Number.isFinite(selectedIdx) ? selectedIdx : 0;
    const clampedRaw = Math.max(0, Math.min(n - 1, raw));
    const ord = getOrder();
    const pos = ord.indexOf(clampedRaw);
    return pos >= 0 ? pos : 0;
  }
  function ensureStyle() {
    if (document.getElementById(STYLE_ID)) return;
    const s = document.createElement("style");
    s.id = STYLE_ID;
    s.textContent = `
    .${CLASS_BADGE}{
      position:absolute; bottom:8px; left:50%; transform:translateX(-50%);
      display:inline-flex; gap:6px; align-items:center; justify-content:center;
      padding:4px 10px; border-radius:10px; font:800 12px/1.2 system-ui,sans-serif;
      color:#FFD84D; z-index:1; pointer-events:none; white-space:nowrap;
    }`;
    document.head.appendChild(s);
  }
  var BADGE_RESERVE = 0;
  function measureBadgeReserve() {
    if (BADGE_RESERVE) return BADGE_RESERVE;
    ensureStyle();
    const probe = Object.assign(document.createElement("div"), { className: CLASS_BADGE, textContent: "000,000,000" });
    Object.assign(probe.style, { position: "absolute", visibility: "hidden", left: "-9999px" });
    document.body.appendChild(probe);
    BADGE_RESERVE = Math.max(28, Math.ceil(probe.getBoundingClientRect().height + 10));
    probe.remove();
    return BADGE_RESERVE;
  }
  function collectTooltipRoots() {
    const set2 = /* @__PURE__ */ new Set();
    const userRoot = document.querySelector(USER_SCOPE_ROOT);
    if (userRoot) set2.add(userRoot);
    for (const h of ACTIVE_HOSTS) {
      if (h && h.isConnected) set2.add(h.closest(".McFlex, .css-0") || h);
    }
    if (set2.size === 0) {
      const guess = Array.from(document.querySelectorAll(".McFlex, .css-0, [role='tooltip']")).filter((r) => r.querySelector("canvas") && r.querySelector('p.chakra-text, p[class*="chakra-text"]'));
      guess.slice(0, 3).forEach((r) => set2.add(r));
    }
    return Array.from(set2).filter((r) => r.isConnected);
  }
  function currentSlotValue() {
    if (!isPlantObject(cur)) return null;
    const ordered = getOrderedSlots();
    if (!ordered.length) return null;
    const pos = selectedOrderedPosition();
    const slot = ordered[Math.max(0, Math.min(ordered.length - 1, pos))];
    const val = valueFromGardenSlot(slot, DefaultPricing, players);
    return Number.isFinite(val) && val > 0 ? val : null;
  }
  function injectOrUpdateBadge(host) {
    if (!isPlantObject(cur)) {
      removeBadge(host);
      return;
    }
    ensureStyle();
    if (getComputedStyle(host).position === "static") host.style.position = "relative";
    const reserve = measureBadgeReserve();
    if ((parseFloat(host.style.paddingBottom) || 0) < reserve) host.style.paddingBottom = `${reserve}px`;
    const val = currentSlotValue() ?? (() => {
      const v = valueFromGardenPlant(cur, DefaultPricing, players);
      return Number.isFinite(v) && v > 0 ? v : null;
    })();
    if (val == null) {
      removeBadge(host);
      return;
    }
    let badge = host.querySelector("." + CLASS_BADGE);
    if (!badge) {
      badge = document.createElement("div");
      badge.className = CLASS_BADGE;
      host.appendChild(badge);
      host.setAttribute(ATTR_INJECTED, "1");
    }
    badge.textContent = fmtCoins(val);
  }
  function removeBadge(host) {
    host.querySelectorAll("." + CLASS_BADGE).forEach((n) => n.remove());
    if (host.hasAttribute(ATTR_INJECTED)) {
      host.removeAttribute(ATTR_INJECTED);
      host.style.paddingBottom = "";
    }
  }
  function updateAllBadges() {
    const roots = collectTooltipRoots();
    const found = [];
    for (const root of roots) {
      const host = findBestTooltipDetailHostInside(root);
      if (host) found.push(host);
    }
    for (const host of found) {
      if (!ACTIVE_HOSTS.has(host)) ACTIVE_HOSTS.add(host);
      injectOrUpdateBadge(host);
    }
    for (const host of Array.from(ACTIVE_HOSTS)) {
      if (!document.contains(host) || !found.includes(host)) {
        removeBadge(host);
        ACTIVE_HOSTS.delete(host);
      }
    }
  }
  function clearAllBadges() {
    document.querySelectorAll("." + CLASS_BADGE).forEach((el2) => el2.remove());
    document.querySelectorAll(`[${ATTR_INJECTED}="1"]`).forEach((host) => {
      host.style.paddingBottom = "";
      host.removeAttribute(ATTR_INJECTED);
    });
    ACTIVE_HOSTS.clear();
  }
  function watchTooltipsByXPath() {
    const rescan = () => updateAllBadges();
    rescan();
    let raf = 0;
    const mo = new MutationObserver(() => {
      if (raf) return;
      raf = requestAnimationFrame(() => {
        raf = 0;
        rescan();
      });
    });
    mo.observe(document.body, { subtree: true, childList: true, attributes: true });
    return {
      disconnect() {
        mo.disconnect();
        ACTIVE_HOSTS.clear();
      }
    };
  }
  (async () => {
    try {
      cur = await myCurrentGardenObject.get();
    } catch {
    }
    try {
      players = await numPlayers.get();
    } catch {
    }
    try {
      const v = await myCurrentSortedGrowSlotIndices.get();
      sortedIdx = Array.isArray(v) ? v.slice() : null;
    } catch {
    }
    try {
      selectedIdx = await myCurrentGrowSlotIndex.get();
    } catch {
    }
    myCurrentGardenObject.onChange((v) => {
      cur = v;
      isPlantObject(cur) ? updateAllBadges() : clearAllBadges();
    });
    numPlayers.onChange((n) => {
      players = n;
      updateAllBadges();
    });
    myCurrentSortedGrowSlotIndices.onChange((v) => {
      sortedIdx = Array.isArray(v) ? v.slice() : null;
      updateAllBadges();
    });
    myCurrentGrowSlotIndex.onChange((idx) => {
      selectedIdx = Number.isFinite(idx) ? idx : 0;
      updateAllBadges();
    });
    watchTooltipsByXPath();
  })();

  // src/services/debug-data.ts
  var fmtTime = (ms) => {
    const d = new Date(ms);
    const pad = (n, s = 2) => String(n).padStart(s, "0");
    return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}.${String(d.getMilliseconds()).padStart(3, "0")}`;
  };
  var escapeLite = (s) => s.replace(/[<>&]/g, (m) => ({ "<": "&lt;", ">": "&gt;", "&": "&amp;" })[m]);
  var FrameBuffer = class {
    constructor(max = 2e3) {
      this.max = max;
      __publicField(this, "arr", []);
    }
    push(f) {
      this.arr.push(f);
      if (this.arr.length > this.max) this.arr.splice(0, this.arr.length - this.max);
    }
    toArray() {
      return this.arr.slice();
    }
    clear() {
      this.arr.length = 0;
    }
  };
  var registry = /* @__PURE__ */ new Map();
  function getWSInfos() {
    return Array.from(registry.values());
  }
  function getWSStatusText() {
    const anyOpen = sockets.some((ws) => ws.readyState === WebSocket.OPEN);
    const viaW = workerFound ? "worker" : "page/auto";
    return `status: ${anyOpen ? "OPEN" : "none"} \u2022 mode: ${viaW}`;
  }
  var HOOKED_CTOR_FLAG = Symbol.for("qmm.wsCtorHooked");
  var WS_PATCHED_SEND = Symbol.for("qmm.wsPatchedSend");
  var hookedOnce = false;
  function installWSHookIfNeeded(onFrame) {
    const Ctor = window.WebSocket;
    if (!Ctor[HOOKED_CTOR_FLAG]) {
      const ProxyCtor = new Proxy(Ctor, {
        construct(target, args, newTarget) {
          const ws = Reflect.construct(target, args, newTarget);
          try {
            trackSocket(ws, "new", onFrame);
          } catch {
          }
          return ws;
        }
      });
      ProxyCtor[HOOKED_CTOR_FLAG] = true;
      window.WebSocket = ProxyCtor;
    }
    sockets.forEach((ws) => {
      try {
        trackSocket(ws, "existing", onFrame);
      } catch {
      }
    });
    if (!hookedOnce) hookedOnce = true;
  }
  function trackSocket(ws, why, onFrame) {
    if (registry.has(ws)) return;
    const id = `WS#${1 + registry.size} (${label(ws.readyState)})`;
    const info = { ws, id, listeners: [] };
    if (!sockets.includes(ws)) sockets.push(ws);
    setQWS?.(ws, why);
    const onMsg = (ev) => {
      let text = "";
      try {
        text = typeof ev.data === "string" ? ev.data : JSON.stringify(ev.data);
      } catch {
        text = String(ev.data);
      }
      onFrame({ t: Date.now(), dir: "in", text, ws });
    };
    ws.addEventListener("message", onMsg);
    info.listeners.push(() => ws.removeEventListener("message", onMsg));
    const onOpen = () => {
      info.id = info.id.replace(/\(.*\)/, `(${label(ws.readyState)})`);
    };
    const onClose = () => {
      info.id = info.id.replace(/\(.*\)/, `(${label(ws.readyState)})`);
    };
    ws.addEventListener("open", onOpen);
    ws.addEventListener("close", onClose);
    info.listeners.push(() => ws.removeEventListener("open", onOpen));
    info.listeners.push(() => ws.removeEventListener("close", onClose));
    if (!ws[WS_PATCHED_SEND]) {
      const orig = ws.send.bind(ws);
      info.sendOrig = orig;
      ws[WS_PATCHED_SEND] = true;
      ws.send = (data) => {
        try {
          const text = typeof data === "string" ? data : JSON.stringify(data);
          onFrame({ t: Date.now(), dir: "out", text, ws });
        } catch {
          onFrame({ t: Date.now(), dir: "out", text: String(data), ws });
        }
        return orig(data);
      };
    }
    registry.set(ws, info);
  }

  // src/ui/menus/debug-data.ts
  async function renderDebugDataMenu(root) {
    const ui = new Menu({ id: "debug-tools", compact: true });
    ui.mount(root);
    ui.addTab("jotai", "Jotai", (view) => renderJotaiTab(view, ui));
    ui.addTab("websocket", "WebSocket", (view) => renderWSTab(view, ui));
  }
  function renderJotaiTab(view, ui) {
    view.innerHTML = "";
    const grid2 = document.createElement("div");
    grid2.style.display = "grid";
    grid2.style.gridTemplateColumns = "minmax(340px,1fr) minmax(340px,1fr)";
    grid2.style.gap = "12px";
    view.appendChild(grid2);
    const leftCol = document.createElement("div");
    const rightCol = document.createElement("div");
    grid2.appendChild(leftCol);
    grid2.appendChild(rightCol);
    {
      const head = ui.section("Store");
      const btnCap = ui.btn("Capture store", async () => {
        try {
          await ensureStore();
        } catch {
        }
        capLbl.textContent = `captured: ${String(isStoreCaptured())}`;
      });
      const capLbl = ui.label(`captured: ${String(isStoreCaptured())}`);
      head.appendChild(ui.row(btnCap, capLbl));
      leftCol.appendChild(head);
    }
    {
      const s = ui.section("Find / List atoms");
      const q = ui.inputText("regex label (eg: position|health)", "");
      const btnList = ui.btn("List", () => doList());
      const btnCopy = ui.btn("Copy", () => copy(pre.textContent || ""));
      const pre = document.createElement("pre");
      stylePre(pre);
      async function doList() {
        const raw = q.value.trim();
        const rx = safeRegex(raw || ".*");
        const all = findAtomsByLabel(/.*/);
        const atoms = all.filter((a) => rx.test(String(a?.debugLabel || a?.label || "")));
        const labels = atoms.map((a) => String(a?.debugLabel || a?.label || "<?>"));
        pre.textContent = labels.join("\n");
      }
      s.appendChild(ui.row(q, btnList, btnCopy));
      s.appendChild(pre);
      leftCol.appendChild(s);
    }
    {
      const s = ui.section("Get / Subscribe");
      const q = ui.inputText("atom label (eg: positionAtom)", "");
      const btnGet = ui.btn("Get", async () => {
        const atom = getAtomByLabel(q.value.trim());
        if (!atom) {
          pre.textContent = `Atom "${q.value}" not found`;
          return;
        }
        try {
          setText(pre, await jGet(atom));
        } catch (e) {
          setText(pre, e?.message || String(e));
        }
      });
      const btnSub = ui.btn("Subscribe", async () => {
        const label2 = q.value.trim();
        if (!label2) return;
        const atom = getAtomByLabel(label2);
        if (!atom) {
          pre.textContent = `Atom "${label2}" not found`;
          return;
        }
        if (unsubRef) {
          unsubRef();
          unsubRef = null;
          btnSub.textContent = "Subscribe";
          return;
        }
        unsubRef = await jSub(atom, async () => {
          try {
            setText(pre, await jGet(atom));
          } catch {
          }
        });
        btnSub.textContent = "Unsubscribe";
      });
      const btnCopy = ui.btn("Copy", () => copy(pre.textContent || ""));
      const pre = document.createElement("pre");
      stylePre(pre);
      let unsubRef = null;
      s.appendChild(ui.row(q, btnGet, btnSub, btnCopy));
      s.appendChild(pre);
      rightCol.appendChild(s);
    }
    {
      const s = ui.section("Set atom");
      const q = ui.inputText("atom label (eg: activeModalAtom)", "");
      const btnSet = ui.btn("Set", async () => {
        const label2 = q.value.trim();
        const atom = getAtomByLabel(label2);
        if (!atom) {
          toast(`Atom "${label2}" not found`);
          return;
        }
        let val;
        try {
          val = JSON.parse(ta.value);
        } catch {
          return toast("Invalid JSON");
        }
        try {
          await jSet(atom, val);
          toast("Set OK");
        } catch (e) {
          toast(e?.message || "Set failed");
        }
      });
      const btnCopy = ui.btn("Copy json", () => copy(ta.value));
      const ta = document.createElement("textarea");
      ta.className = "qmm-input";
      ta.style.minHeight = "120px";
      ta.style.width = "100%";
      ta.placeholder = `JSON value, eg: "inventory" or { "x": 1, "y": 2 }`;
      s.appendChild(ui.row(q, btnSet, btnCopy));
      s.appendChild(ta);
      rightCol.appendChild(s);
    }
    function setText(el2, v) {
      el2.textContent = typeof v === "string" ? v : JSON.stringify(v, null, 2);
    }
    function toast(msg) {
      try {
        window.toastSimple?.(msg, "", "warn");
      } catch {
      }
    }
  }
  function renderWSTab(view, ui) {
    view.innerHTML = "";
    installWSHookIfNeeded((f) => {
      if (paused) return;
      const ex = { ...f, id: ++seq };
      frames.push(ex);
      framesMap.set(ex.id, ex);
      lblConn.textContent = getWSStatusText();
      appendOne(ex);
    });
    const frames = new FrameBuffer(2e3);
    const framesMap = /* @__PURE__ */ new Map();
    let seq = 0;
    let paused = false;
    let autoScroll = true;
    let showIn = true;
    let showOut = true;
    let filterText = "";
    let onlyCurrentSocket = false;
    let replayToSource = false;
    let selectedId = null;
    let mutePatterns = [];
    const $spacer = () => {
      const d = document.createElement("div");
      d.style.flex = "1";
      return d;
    };
    const setSelectedRow = (fid) => {
      selectedId = fid;
      [...logWrap.querySelectorAll("[data-fid]")].forEach((row) => {
        row.classList.toggle("selected", String(fid || "") === row.dataset.fid);
      });
      if (fid != null) {
        const f = framesMap.get(fid);
        if (f) ta.value = f.text;
      }
    };
    const matchesMutes = (text) => mutePatterns.some((rx) => rx.test(text));
    const sel = document.createElement("select");
    sel.className = "qmm-input";
    sel.style.minWidth = "260px";
    function refreshSocketPicker() {
      const wsArr = getWSInfos();
      sel.innerHTML = "";
      wsArr.forEach((info, idx) => {
        const op = document.createElement("option");
        op.value = String(idx);
        op.textContent = info.id + (info.ws === quinoaWS ? " \u2022 page" : "");
        sel.appendChild(op);
      });
      if (!sel.value && sel.options.length) sel.value = "0";
      lblConn.textContent = getWSStatusText();
    }
    function currentWS() {
      const idx = Number(sel.value);
      const vals = getWSInfos();
      return Number.isFinite(idx) ? vals[idx]?.ws ?? null : null;
    }
    const head = ui.section("Live log");
    const lblConn = ui.label("\u2014");
    const chIn = ui.checkbox(true);
    chIn.addEventListener("change", () => {
      showIn = chIn.checked;
      repaint(true);
    });
    const chOut = ui.checkbox(true);
    chOut.addEventListener("change", () => {
      showOut = chOut.checked;
      repaint(true);
    });
    const inputFilter = ui.inputText("filter text (case-insensitive)", "");
    inputFilter.addEventListener("input", () => {
      filterText = inputFilter.value.trim().toLowerCase();
      repaint(true);
    });
    const chOnlyCurrent = ui.checkbox(false);
    chOnlyCurrent.addEventListener("change", () => {
      onlyCurrentSocket = chOnlyCurrent.checked;
      repaint(true);
    });
    const btnPause = ui.btn("Pause", () => {
      paused = !paused;
      btnPause.textContent = paused ? "Resume" : "Pause";
    });
    const btnClear = ui.btn("Clear", () => {
      frames.clear();
      framesMap.clear();
      setSelectedRow(null);
      repaint(true);
    });
    const btnCopy = ui.btn("Copy visible", () => copyVisible());
    head.appendChild(ui.row(
      lblConn,
      sel,
      // <= socket picker ici, compact
      $spacer(),
      chIn,
      ui.label("IN"),
      chOut,
      ui.label("OUT"),
      inputFilter,
      chOnlyCurrent,
      ui.label("Current socket only"),
      btnPause,
      btnClear,
      btnCopy
    ));
    view.appendChild(head);
    const muteSec = ui.section("Mutes (exclude by regex)");
    const muteInput = ui.inputText("add regex (e.g. ping|keepalive)", "");
    const btnAddMute = ui.btn("Add", () => {
      const raw = muteInput.value.trim();
      if (!raw) return;
      try {
        mutePatterns.push(new RegExp(raw, "i"));
        muteInput.value = "";
        repaintMutes();
        repaint(true);
      } catch {
      }
    });
    const mutesWrap = document.createElement("div");
    mutesWrap.style.display = "flex";
    mutesWrap.style.flexWrap = "wrap";
    mutesWrap.style.gap = "6px";
    function repaintMutes() {
      mutesWrap.innerHTML = "";
      mutePatterns.forEach((rx, i) => {
        const chip = document.createElement("button");
        chip.className = "qmm-btn";
        chip.textContent = `/${rx.source}/i \xD7`;
        chip.title = "Remove";
        chip.onclick = () => {
          mutePatterns.splice(i, 1);
          repaintMutes();
          repaint(true);
        };
        mutesWrap.appendChild(chip);
      });
    }
    muteSec.appendChild(ui.row(muteInput, btnAddMute));
    muteSec.appendChild(mutesWrap);
    view.appendChild(muteSec);
    const logWrap = document.createElement("div");
    logWrap.style.border = "1px solid #ffffff14";
    logWrap.style.borderRadius = "10px";
    logWrap.style.background = "#0f1318";
    logWrap.style.padding = "6px";
    logWrap.style.maxHeight = "46vh";
    logWrap.style.overflow = "auto";
    logWrap.style.fontFamily = "ui-monospace, SFMono-Regular, Menlo, Consolas, monospace";
    logWrap.style.fontSize = "12px";
    logWrap.style.lineHeight = "1.3";
    logWrap.style.userSelect = "text";
    const style2 = document.createElement("style");
    style2.textContent = `
  /* 3 colonnes: time | arrow | body \u2014 PAS de colonne actions */
  .ws-row{
    position:relative;                                   /* n\xE9cessaire pour l\u2019overlay */
    display:grid;
    grid-template-columns:92px 18px 1fr;                 /* <- supprime la 4e colonne */
    gap:8px; padding:3px 4px;
    border-bottom:1px dashed #ffffff12; align-items:start;
  }
  .ws-row .ts{opacity:.8}
  .ws-row .arrow{font-weight:600}
  .ws-row .body{white-space:pre-wrap;word-break:break-word}
  .ws-row.selected{background:rgba(120,160,255,.12)}

  /* Boutons en overlay (au-dessus du texte), visibles au hover */
  .ws-row .acts{
    position:absolute; top:2px; right:4px;               /* <- colle sur le texte */
    display:flex; gap:6px;
    padding:2px 4px;
    background:rgba(15,19,24,.78);                       /* petit fond pour la lisibilit\xE9 */
    border:1px solid #ffffff22; border-radius:6px;
    opacity:0; visibility:hidden; transition:opacity .12s ease;
    z-index:1;                                           /* passe au-dessus du contenu */
  }
  .ws-row:hover .acts{opacity:1; visibility:visible}
  .ws-row .acts .qmm-btn{padding:1px 4px; font-size:11px}/* boutons compacts */
`;
    logWrap.appendChild(style2);
    view.appendChild(logWrap);
    const sendSec = ui.section("Send");
    const ta = document.createElement("textarea");
    ta.className = "qmm-input";
    ta.style.width = "100%";
    ta.style.minHeight = "120px";
    ta.placeholder = `Select a frame or paste a payload here. Choose Text or JSON below.`;
    const asJson = ui.radioGroup(
      "ws-send-mode",
      [{ value: "text", label: "Text" }, { value: "json", label: "JSON" }],
      "text",
      () => {
      }
    );
    const chUseSource = ui.checkbox(false);
    chUseSource.addEventListener("change", () => {
      replayToSource = chUseSource.checked;
    });
    const btnSend = ui.btn("Send", () => doSend());
    const btnCopyPayload = ui.btn("Copy payload", () => copy(ta.value));
    sendSec.appendChild(ta);
    sendSec.appendChild(ui.row(asJson, chUseSource, ui.label("Use source WS"), btnSend, btnCopyPayload));
    view.appendChild(sendSec);
    installWSHookIfNeeded((f) => {
      if (paused) return;
      const ex = { ...f, id: ++seq };
      frames.push(ex);
      framesMap.set(ex.id, ex);
      lblConn.textContent = getWSStatusText();
      appendOne(ex);
    });
    refreshSocketPicker();
    repaint(true);
    const pollId = window.setInterval(() => {
      refreshSocketPicker();
    }, 1e3);
    view.__ws_cleanup__ = () => {
      window.clearInterval(pollId);
    };
    function passesFilters(f) {
      if (f.dir === "in" && !showIn || f.dir === "out" && !showOut) return false;
      if (filterText && !f.text.toLowerCase().includes(filterText)) return false;
      if (onlyCurrentSocket && f.ws && currentWS() && f.ws !== currentWS()) return false;
      if (matchesMutes(f.text)) return false;
      return true;
    }
    function rowActions(fid, f) {
      const acts = document.createElement("div");
      acts.className = "acts";
      const bCopy = document.createElement("button");
      bCopy.className = "qmm-btn";
      bCopy.textContent = "Copy";
      bCopy.onclick = (e) => {
        e.stopPropagation();
        copy(f.text);
      };
      const bToEd = document.createElement("button");
      bToEd.className = "qmm-btn";
      bToEd.textContent = "\u2192 Editor";
      bToEd.onclick = (e) => {
        e.stopPropagation();
        ta.value = f.text;
        setSelectedRow(fid);
      };
      const bReplay = document.createElement("button");
      bReplay.className = "qmm-btn";
      bReplay.textContent = "Replay";
      bReplay.title = "Send right away (to current WS or source WS if enabled)";
      bReplay.onclick = (e) => {
        e.stopPropagation();
        replayFrame(f);
      };
      acts.append(bCopy, bToEd, bReplay);
      return acts;
    }
    function buildRow(f) {
      const row = document.createElement("div");
      row.className = "ws-row";
      row.dataset.fid = String(f.id);
      const ts = document.createElement("div");
      ts.className = "ts";
      ts.textContent = fmtTime(f.t);
      const arrow = document.createElement("div");
      arrow.className = "arrow";
      arrow.textContent = f.dir === "in" ? "\u2190" : "\u2192";
      arrow.style.color = f.dir === "in" ? "#4bd17a" : "#8ab4ff";
      const body = document.createElement("div");
      body.className = "body";
      body.innerHTML = `<code>${escapeLite(f.text)}</code>`;
      const acts = rowActions(f.id, f);
      row.append(ts, arrow, body, acts);
      row.onclick = () => setSelectedRow(f.id);
      row.ondblclick = () => {
        ta.value = f.text;
        setSelectedRow(f.id);
      };
      return row;
    }
    function appendOne(f) {
      if (!passesFilters(f)) return;
      const row = buildRow(f);
      logWrap.appendChild(row);
      if (autoScroll) logWrap.scrollTop = logWrap.scrollHeight;
    }
    function repaint(_full = false) {
      logWrap.querySelectorAll(".ws-row").forEach((n) => n.remove());
      frames.toArray().forEach((f) => {
        if (passesFilters(f)) logWrap.appendChild(buildRow(f));
      });
      if (selectedId != null) setSelectedRow(selectedId);
      if (autoScroll) logWrap.scrollTop = logWrap.scrollHeight;
    }
    function copyVisible() {
      const lines = frames.toArray().filter((f) => passesFilters(f)).map((f) => `[${fmtTime(f.t)}] ${f.dir === "in" ? "<-" : "->"} ${f.text}`).join("\n");
      copy(lines);
    }
    function replayFrame(f) {
      const target = replayToSource && f.ws ? f.ws : currentWS();
      if (!target || target.readyState !== WebSocket.OPEN) return;
      const mode = asJson.querySelector('input[type="radio"]:checked')?.value || "text";
      if (mode === "json") {
        try {
          target.send(JSON.parse(f.text));
        } catch {
          target.send(f.text);
        }
      } else {
        target.send(f.text);
      }
    }
    function doSend() {
      const ws = currentWS();
      const wsAlt = selectedId != null && replayToSource ? framesMap.get(selectedId)?.ws ?? null : null;
      const target = (replayToSource ? wsAlt : ws) || ws;
      if (!target || target.readyState !== WebSocket.OPEN) return;
      const mode = asJson.querySelector('input[type="radio"]:checked')?.value || "text";
      if (mode === "json") {
        try {
          target.send(JSON.parse(ta.value));
        } catch {
          target.send(ta.value);
        }
      } else {
        target.send(ta.value);
      }
    }
  }
  function copy(text) {
    const str = String(text ?? "");
    if (!str.length) return;
    const fallback = () => {
      const ta = document.createElement("textarea");
      ta.value = str;
      ta.setAttribute("readonly", "true");
      ta.style.position = "fixed";
      ta.style.left = "-9999px";
      ta.style.opacity = "0";
      document.body.appendChild(ta);
      ta.focus();
      ta.select();
      let ok = false;
      try {
        ok = document.execCommand("copy");
      } catch {
      }
      document.body.removeChild(ta);
      try {
        window.toastSimple?.(ok ? "Copied" : "Copy failed", "", ok ? "success" : "error");
      } catch {
      }
    };
    if (window.isSecureContext && navigator.clipboard?.writeText) {
      navigator.clipboard.writeText(str).then(() => {
        try {
          window.toastSimple?.("Copied", "", "success");
        } catch {
        }
      }).catch(fallback);
    } else {
      fallback();
    }
  }
  function safeRegex(q) {
    try {
      return new RegExp(q, "i");
    } catch {
      return /.*/i;
    }
  }
  function stylePre(pre) {
    pre.style.maxHeight = "260px";
    pre.style.overflow = "auto";
    pre.style.background = "#0f1318";
    pre.style.border = "1px solid #ffffff14";
    pre.style.borderRadius = "8px";
    pre.style.padding = "8px";
    pre.style.margin = "6px 0";
    pre.style.fontSize = "12px";
    pre.style.color = "#e7eef7";
  }

  // src/ui/toast.ts
  async function sendToast(toast) {
    const sendAtom = getAtomByLabel("sendQuinoaToastAtom");
    if (sendAtom) {
      await jSet(sendAtom, toast);
      return;
    }
    const listAtom = getAtomByLabel("quinoaToastsAtom");
    if (!listAtom) throw new Error("Aucun atom de toast trouv\xE9");
    const prev = await jGet(listAtom).catch(() => []);
    const t = { isClosable: true, duration: 1e4, ...toast };
    if ("toastType" in t && t.toastType === "board") {
      t.id = t.id ?? (t.isStackable ? `quinoa-stackable-${Date.now()}-${Math.random()}` : "quinoa-game-toast");
    } else {
      t.id = t.id ?? "quinoa-game-toast";
    }
    await jSet(listAtom, [...prev, t]);
  }
  async function toastSimple(title, description, variant = "info", duration = 3500) {
    await sendToast({ title, description, variant, duration });
  }

  // src/services/players.ts
  function findPlayersDeep(state2) {
    if (!state2 || typeof state2 !== "object") return [];
    const out = [];
    const seen = /* @__PURE__ */ new Set();
    const stack = [state2];
    while (stack.length) {
      const cur2 = stack.pop();
      if (!cur2 || typeof cur2 !== "object" || seen.has(cur2)) continue;
      seen.add(cur2);
      for (const k of Object.keys(cur2)) {
        const v = cur2[k];
        if (Array.isArray(v) && v.length && v.every((x) => x && typeof x === "object")) {
          const looks = v.some((p) => "id" in p && "name" in p);
          if (looks && /player/i.test(k)) out.push(...v);
        }
        if (v && typeof v === "object") stack.push(v);
      }
    }
    const byId = /* @__PURE__ */ new Map();
    for (const p of out) if (p?.id) byId.set(String(p.id), p);
    return [...byId.values()];
  }
  function getPlayersArray(st) {
    const direct = st?.fullState?.data?.players ?? st?.data?.players ?? st?.players;
    return Array.isArray(direct) ? direct : findPlayersDeep(st);
  }
  function getSlotsArray(st) {
    const raw = st?.child?.data?.userSlots ?? st?.fullState?.child?.data?.userSlots ?? st?.data?.userSlots;
    if (Array.isArray(raw)) return raw;
    if (raw && typeof raw === "object") {
      const entries = Object.entries(raw);
      entries.sort((a, b) => {
        const ai = Number(a[0]);
        const bi = Number(b[0]);
        if (Number.isFinite(ai) && Number.isFinite(bi)) return ai - bi;
        return a[0].localeCompare(b[0]);
      });
      return entries.map(([, v]) => v);
    }
    return [];
  }
  function extractPosFromSlot(slot) {
    const pos = slot?.data?.position ?? slot?.position ?? slot?.data?.coords ?? slot?.coords;
    const x = Number(pos?.x);
    const y = Number(pos?.y);
    return Number.isFinite(x) && Number.isFinite(y) ? { x, y } : null;
  }
  function extractInventoryFromSlot(slot) {
    const inv = slot?.data?.inventory;
    if (!inv || typeof inv !== "object") return null;
    const items = Array.isArray(inv.items) ? inv.items : [];
    const favoritedItemIds = Array.isArray(inv.favoritedItemIds) ? inv.favoritedItemIds : [];
    return { items, favoritedItemIds };
  }
  function extractJournalFromSlot(slot) {
    const j = slot?.data?.journal ?? slot?.journal;
    if (!j || typeof j !== "object") return null;
    const produce = j.produce && typeof j.produce === "object" ? j.produce : void 0;
    const pets = j.pets && typeof j.pets === "object" ? j.pets : void 0;
    const normProduce = produce ? Object.fromEntries(Object.entries(produce).map(([k, v]) => [
      String(k),
      { variantsLogged: Array.isArray(v?.variantsLogged) ? v.variantsLogged : [] }
    ])) : void 0;
    const normPets = pets ? Object.fromEntries(Object.entries(pets).map(([k, v]) => [
      String(k),
      {
        variantsLogged: Array.isArray(v?.variantsLogged) ? v.variantsLogged : [],
        abilitiesLogged: Array.isArray(v?.abilitiesLogged) ? v.abilitiesLogged : []
      }
    ])) : void 0;
    return { produce: normProduce, pets: normPets };
  }
  function extractGardenFromSlot(slot) {
    const g = slot?.data?.garden ?? slot?.garden;
    if (!g || typeof g !== "object") return null;
    const to = g.tileObjects;
    const bto = g.boardwalkTileObjects;
    const tileObjects = to && typeof to === "object" ? to : {};
    const boardwalkTileObjects = bto && typeof bto === "object" ? bto : {};
    return { tileObjects, boardwalkTileObjects };
  }
  function getSlotByPlayerId(st, playerId) {
    for (const s of getSlotsArray(st)) if (String(s?.playerId ?? "") === String(playerId)) return s;
    return null;
  }
  function enrichPlayersWithSlots(players2, st) {
    const byPid = /* @__PURE__ */ new Map();
    for (const slot of getSlotsArray(st)) {
      if (!slot || typeof slot !== "object") continue;
      const pid = slot.playerId != null ? String(slot.playerId) : "";
      if (!pid) continue;
      const pos = extractPosFromSlot(slot);
      const inv = extractInventoryFromSlot(slot);
      byPid.set(pid, { x: pos?.x, y: pos?.y, inventory: inv ?? null });
    }
    return players2.map((p) => {
      const extra = byPid.get(String(p.id));
      return extra ? { ...p, ...extra } : { ...p, inventory: null };
    });
  }
  function orderPlayersBySlots(players2, st) {
    const slots = getSlotsArray(st);
    const mapById = /* @__PURE__ */ new Map();
    for (const p of players2) mapById.set(String(p.id), p);
    const out = [];
    const seen = /* @__PURE__ */ new Set();
    for (const s of slots) {
      const pid = s?.playerId != null ? String(s.playerId) : "";
      if (!pid || seen.has(pid)) continue;
      const p = mapById.get(pid);
      if (p) {
        out.push(p);
        seen.add(pid);
      }
    }
    for (const p of players2) {
      const pid = String(p.id);
      if (!seen.has(pid)) {
        out.push(p);
        seen.add(pid);
      }
    }
    return out;
  }
  function clampPlayers(n) {
    const v = Math.floor(Number(n));
    if (!Number.isFinite(v)) return 1;
    return Math.max(1, Math.min(6, v));
  }
  async function getPlayersInRoom() {
    try {
      const raw = await Atoms.server.numPlayers.get();
      return clampPlayers(raw);
    } catch {
      return 1;
    }
  }
  var __cachedSpawnTiles = null;
  var __spawnLoadPromise = null;
  async function getSpawnTilesSorted() {
    if (Array.isArray(__cachedSpawnTiles)) return __cachedSpawnTiles;
    if (__spawnLoadPromise) return __spawnLoadPromise;
    __spawnLoadPromise = (async () => {
      try {
        const map2 = await Atoms.root.map.get();
        const arr = map2?.spawnTiles;
        if (Array.isArray(arr) && arr.every((n) => Number.isFinite(n))) {
          __cachedSpawnTiles = [...arr].sort((a, b) => a - b);
          return __cachedSpawnTiles;
        }
      } catch {
      }
      try {
        const st = await Atoms.root.state.get();
        const seen = /* @__PURE__ */ new Set();
        const stack = [st];
        while (stack.length) {
          const cur2 = stack.pop();
          if (!cur2 || typeof cur2 !== "object" || seen.has(cur2)) continue;
          seen.add(cur2);
          const arr = cur2?.spawnTiles;
          if (Array.isArray(arr) && arr.every((n) => Number.isFinite(n))) {
            __cachedSpawnTiles = [...arr].sort((a, b) => a - b);
            return __cachedSpawnTiles;
          }
          for (const k of Object.keys(cur2)) {
            const v = cur2[k];
            if (v && typeof v === "object") stack.push(v);
          }
        }
      } catch {
      }
      __cachedSpawnTiles = [];
      return __cachedSpawnTiles;
    })();
    const res = await __spawnLoadPromise;
    __spawnLoadPromise = null;
    return res;
  }
  async function getMapCols() {
    try {
      const map2 = await Atoms.root.map.get();
      const cols = Number(map2?.cols);
      if (Number.isFinite(cols) && cols > 0) return cols;
    } catch {
    }
    try {
      const st = await Atoms.root.state.get();
      const maybeCols = Number(
        st?.map?.cols ?? st?.child?.data?.map?.cols ?? st?.fullState?.map?.cols
      );
      if (Number.isFinite(maybeCols) && maybeCols > 0) return maybeCols;
    } catch {
    }
    return 81;
  }
  function assignGardenPositions(players2, spawnTilesSorted) {
    if (!players2.length || !spawnTilesSorted.length) {
      return players2.map((p) => ({ ...p, gardenPosition: null }));
    }
    const out = [];
    for (let i = 0; i < players2.length; i++) {
      out.push({ ...players2[i], gardenPosition: spawnTilesSorted[i] ?? null });
    }
    return out;
  }
  function nowTs() {
    return Date.now();
  }
  function normJournal(j) {
    if (!j || typeof j !== "object") return {};
    const out = {};
    if (j.produce && typeof j.produce === "object") out.produce = j.produce;
    if (j.pets && typeof j.pets === "object") out.pets = j.pets;
    return out;
  }
  function hasJournalData(j) {
    if (!j) return false;
    const hasProduce = !!j.produce && Object.values(j.produce).some((s) => (s.variantsLogged?.length ?? 0) > 0);
    const hasPets = !!j.pets && Object.values(j.pets).some((s) => (s.variantsLogged?.length ?? 0) > 0 || (s.abilitiesLogged?.length ?? 0) > 0);
    return hasProduce || hasPets;
  }
  var followingState = {
    currentTargetId: null,
    unsub: null,
    lastPos: null,
    prevPos: null,
    steps: 0
  };
  var PlayersService = {
    async list() {
      const st = await Atoms.root.state.get();
      if (!st) return [];
      const base = enrichPlayersWithSlots(getPlayersArray(st), st);
      const ordered = orderPlayersBySlots(base, st);
      const spawns = await getSpawnTilesSorted();
      return assignGardenPositions(ordered, spawns);
    },
    async onChange(cb) {
      return Atoms.root.state.onChange(async () => {
        try {
          cb(await this.list());
        } catch {
        }
      });
    },
    async getPosition(playerId) {
      const st = await Atoms.root.state.get();
      if (!st) return null;
      const slot = getSlotByPlayerId(st, playerId);
      return extractPosFromSlot(slot);
    },
    async getInventory(playerId) {
      const st = await Atoms.root.state.get();
      if (!st) return null;
      const slot = getSlotByPlayerId(st, playerId);
      return extractInventoryFromSlot(slot);
    },
    async getJournal(playerId) {
      const st = await Atoms.root.state.get();
      if (!st) return null;
      const slot = getSlotByPlayerId(st, playerId);
      const j = extractJournalFromSlot(slot);
      return j ? normJournal(j) : null;
    },
    async getGarden(playerId) {
      const st = await Atoms.root.state.get();
      if (!st) return null;
      const slot = getSlotByPlayerId(st, playerId);
      return extractGardenFromSlot(slot);
    },
    async getGardenPosition(playerId) {
      const list = await this.list();
      const p = list.find((x) => String(x.id) === String(playerId));
      return p?.gardenPosition ?? null;
    },
    async getPlayerNameById(playerId) {
      try {
        const st = await Atoms.root.state.get();
        if (st) {
          const arr = getPlayersArray(st);
          const p = arr.find((x) => String(x?.id) === String(playerId));
          if (p && typeof p.name === "string" && p.name) return p.name;
        }
      } catch {
      }
      try {
        const list = await this.list();
        const p = list.find((x) => String(x.id) === String(playerId));
        return p?.name ?? null;
      } catch {
        return null;
      }
    },
    async teleportToPlayer(playerId) {
      const pos = await this.getPosition(playerId);
      if (!pos) throw new Error("Unknown position for this player");
      PlayerService.teleport(pos.x, pos.y);
      toastSimple("Teleport", `Teleported to ${await this.getPlayerNameById(playerId)}`, "success");
    },
    async teleportToGarden(playerId) {
      const tileId = await this.getGardenPosition(playerId);
      if (tileId == null) {
        await toastSimple("Teleport", "No garden position for this player.", "error");
        return;
      }
      const cols = await getMapCols();
      const x = tileId % cols, y = Math.floor(tileId / cols);
      await PlayerService.teleport(x, y);
      await toastSimple("Teleport", `Teleported to ${await this.getPlayerNameById(playerId)}'s garden`, "success");
    },
    async getInventoryValue(playerId, opts) {
      try {
        const playersInRoom = await getPlayersInRoom();
        const inv = await this.getInventory(playerId);
        const items = Array.isArray(inv?.items) ? inv.items : [];
        if (!items.length) return 0;
        return sumInventoryValue(items, opts, playersInRoom);
      } catch {
        return 0;
      }
    },
    async getGardenValue(playerId, opts) {
      try {
        const playersInRoom = await getPlayersInRoom();
        const garden2 = await this.getGarden(playerId);
        if (!garden2) return 0;
        return sumGardenValue(garden2.tileObjects ?? {}, opts, playersInRoom);
      } catch {
        return 0;
      }
    },
    /** Ouvre l’aperçu d’inventaire (fake modal) avec garde + toasts. */
    async openInventoryPreview(playerId, playerName) {
      try {
        const inv = await this.getInventory(playerId);
        if (!inv) {
          await toastSimple("Inventory", "No inventory object found for this player.", "error");
          return;
        }
        const items = Array.isArray(inv.items) ? inv.items : [];
        if (items.length === 0) {
          await toastSimple("Inventory", "Inventory is empty for this player.", "info");
          return;
        }
        try {
          await fakeInventoryShow({ ...inv, items }, { open: true });
        } catch (err) {
          await toastSimple("Inventory", err?.message || "Failed to open inventory", "error");
          return;
        }
        if (playerName) await toastSimple("Inventory", `${playerName}'s inventory displayed.`, "info");
      } catch (e) {
        await toastSimple("Inventory", e?.message || "Failed to open inventory.", "error");
      }
    },
    /** Ouvre le Journal (produce + pets) avec garde + toasts. */
    async openJournalLog(playerId, playerName) {
      try {
        const journal = await this.getJournal(playerId);
        if (!hasJournalData(journal)) {
          await toastSimple("Journal", "No journal data for this player.", "error");
          return;
        }
        const safe = journal ?? {};
        try {
          await fakeJournalShow(safe, { open: true });
        } catch (err) {
          await toastSimple("Journal", err?.message || "Failed to open journal.", "error");
          return;
        }
        if (playerName) await toastSimple("Journal", `${playerName}'s journal displayed.`, "info");
      } catch (e) {
        await toastSimple("Journal", e?.message || "Failed to open journal.", "error");
      }
    },
    /* ---------------- Ajouts "fake" au journal (UI only, avec gardes) ---------------- */
    async addProduceVariant(playerId, species, variant, createdAt = nowTs()) {
      if (!species || !variant) {
        await toastSimple("Journal", "Missing species or variant.", "error");
        return;
      }
      try {
        await fakeJournalShow({
          produce: {
            [String(species)]: {
              variantsLogged: [{ variant: String(variant), createdAt }]
            }
          }
        }, { open: true });
        const name = await this.getPlayerNameById(playerId);
        await toastSimple("Journal", `Added produce variant "${variant}" for ${name ?? playerId}.`, "success");
      } catch (e) {
        await toastSimple("Journal", e?.message || "Failed to add produce variant.", "error");
      }
    },
    async addPetVariant(playerId, petSpecies, variant, createdAt = nowTs()) {
      if (!petSpecies || !variant) {
        await toastSimple("Journal", "Missing pet species or variant.", "error");
        return;
      }
      try {
        await fakeJournalShow({
          pets: {
            [String(petSpecies)]: {
              variantsLogged: [{ variant: String(variant), createdAt }]
            }
          }
        }, { open: true });
        const name = await this.getPlayerNameById(playerId);
        await toastSimple("Journal", `Added pet variant "${variant}" for ${name ?? playerId}.`, "success");
      } catch (e) {
        await toastSimple("Journal", e?.message || "Failed to add pet variant.", "error");
      }
    },
    async addPetAbility(playerId, petSpecies, ability, createdAt = nowTs()) {
      if (!petSpecies || !ability) {
        await toastSimple("Journal", "Missing pet species or ability.", "error");
        return;
      }
      try {
        await fakeJournalShow({
          pets: {
            [String(petSpecies)]: {
              abilitiesLogged: [{ ability: String(ability), createdAt }]
            }
          }
        }, { open: true });
        const name = await this.getPlayerNameById(playerId);
        await toastSimple("Journal", `Added pet ability "${ability}" for ${name ?? playerId}.`, "success");
      } catch (e) {
        await toastSimple("Journal", e?.message || "Failed to add pet ability.", "error");
      }
    },
    /* ---------------- Follow ---------------- */
    async stopFollowing() {
      if (followingState.unsub) {
        try {
          await followingState.unsub();
        } catch {
        }
      }
      followingState.unsub = null;
      followingState.currentTargetId = null;
      followingState.lastPos = null;
      followingState.prevPos = null;
      followingState.steps = 0;
    },
    isFollowing(playerId) {
      return followingState.currentTargetId === playerId;
    },
    async startFollowing(playerId) {
      if (followingState.unsub) {
        try {
          await followingState.unsub();
        } catch {
        }
        followingState.unsub = null;
      }
      followingState.currentTargetId = playerId;
      followingState.lastPos = null;
      followingState.prevPos = null;
      followingState.steps = 0;
      const pos = await this.getPosition(playerId);
      if (!pos) {
        await toastSimple("Follow", "Unable to retrieve player position.", "error");
        followingState.currentTargetId = null;
        return;
      }
      await PlayerService.teleport(pos.x, pos.y);
      followingState.lastPos = { x: pos.x, y: pos.y };
      followingState.prevPos = null;
      followingState.steps = 0;
      followingState.unsub = await this.onChange(async (players2) => {
        if (followingState.currentTargetId !== playerId) return;
        const target = players2.find((p) => p.id === playerId);
        if (!target || typeof target.x !== "number" || typeof target.y !== "number") {
          await this.stopFollowing();
          await toastSimple("Follow", "The target is no longer trackable (disconnected?).", "error");
          return;
        }
        const cur2 = { x: target.x, y: target.y };
        const last = followingState.lastPos;
        if (!last) {
          followingState.lastPos = cur2;
          return;
        }
        if (cur2.x !== last.x || cur2.y !== last.y) {
          followingState.steps += 1;
          if (followingState.steps >= 2) {
            if (last) {
              PlayerService.move(last.x, last.y);
            }
          }
          followingState.prevPos = followingState.lastPos;
          followingState.lastPos = cur2;
        }
      });
      await toastSimple("Follow", "Follow enabled", "success");
    }
  };

  // src/ui/menus/players.ts
  async function readPlayers() {
    return PlayersService.list();
  }
  var NF_US_INT = new Intl.NumberFormat("en-US", { maximumFractionDigits: 0 });
  function truncateLabel(s, max = 22) {
    if (!s) return "";
    return s.length <= max ? s : s.slice(0, max - 1) + "\u2026";
  }
  var vItem = (p) => ({
    id: p.id,
    title: truncateLabel(p.name || p.id, 9),
    subtitle: p.isConnected ? "Online" : "Offline",
    avatarUrl: p.discordAvatarUrl || "",
    statusColor: p.isConnected ? "#48d170" : "#999a"
  });
  function styleBtnFullWidthL(b, text) {
    b.textContent = text;
    b.style.width = "auto";
    b.style.minWidth = "110px";
    b.style.margin = "0";
    b.style.padding = "6px 10px";
    b.style.fontSize = "13px";
    b.style.lineHeight = "1.1";
    b.style.borderRadius = "6px";
    b.style.border = "1px solid #4445";
    b.style.background = "#1f2328";
    b.style.color = "#e7eef7";
    b.style.justifyContent = "center";
    b.onmouseenter = () => b.style.borderColor = "#6aa1";
    b.onmouseleave = () => b.style.borderColor = "#4445";
  }
  function sectionFramed(titleText, content) {
    const s = document.createElement("div");
    s.style.display = "grid";
    s.style.justifyItems = "center";
    s.style.gap = "8px";
    s.style.textAlign = "center";
    s.style.border = "1px solid #4446";
    s.style.borderRadius = "10px";
    s.style.padding = "10px";
    s.style.background = "#0f1318";
    s.style.boxShadow = "0 0 0 1px #0002 inset";
    s.style.width = "min(720px, 100%)";
    const h = document.createElement("div");
    h.textContent = titleText;
    h.style.fontWeight = "600";
    h.style.opacity = "0.95";
    s.append(h, content);
    return s;
  }
  function rowCenter() {
    const r = document.createElement("div");
    r.style.display = "flex";
    r.style.alignItems = "center";
    r.style.justifyContent = "center";
    r.style.flexWrap = "wrap";
    r.style.gap = "6px";
    return r;
  }
  function rowLeft() {
    const r = rowCenter();
    r.style.justifyContent = "flex-start";
    r.style.width = "100%";
    return r;
  }
  function ensureVtabsListScrollable(vtabsRoot) {
    const ul = vtabsRoot.querySelector("ul");
    if (!ul) return;
    let wrap = vtabsRoot.querySelector('[data-scroll-wrap="1"]');
    if (!wrap || !wrap.contains(ul)) {
      wrap = document.createElement("div");
      wrap.dataset.scrollWrap = "1";
      wrap.style.flex = "1 1 auto";
      wrap.style.minHeight = "0";
      wrap.style.overflow = "auto";
      wrap.style.marginTop = "6px";
      const parent = ul.parentElement;
      parent.insertBefore(wrap, ul);
      wrap.appendChild(ul);
    } else {
      wrap.style.flex = "1 1 auto";
      wrap.style.minHeight = "0";
      wrap.style.overflow = "auto";
    }
  }
  async function renderPlayersMenu(root) {
    const ui = new Menu({ id: "players", compact: true, windowSelector: ".qws-win" });
    ui.mount(root);
    const panel = ui.root.querySelector(".qmm-views");
    const { root: split, left, right } = ui.split2("260px");
    panel.appendChild(split);
    split.style.height = "100%";
    split.style.minHeight = "0";
    left.style.display = "flex";
    left.style.flexDirection = "column";
    left.style.minHeight = "0";
    right.style.minHeight = "0";
    right.style.overflow = "auto";
    const vt = ui.vtabs({
      filterPlaceholder: "Find player\u2026",
      onSelect: (_id, item) => renderRight(item?.id || null)
    });
    vt.root.style.display = "flex";
    vt.root.style.flexDirection = "column";
    vt.root.style.flex = "1 1 auto";
    vt.root.style.minHeight = "0";
    left.appendChild(vt.root);
    const filter = vt.root.querySelector(".filter");
    if (filter) {
      filter.style.display = "flex";
      filter.style.alignItems = "center";
      filter.style.gap = "8px";
      const input = filter.querySelector("input");
      if (input) {
        input.style.flex = "1 1 auto";
        input.style.minWidth = "0";
      }
    }
    ensureVtabsListScrollable(vt.root);
    const mo = new MutationObserver(() => ensureVtabsListScrollable(vt.root));
    mo.observe(vt.root, { childList: true, subtree: true });
    async function renderRight(playerId) {
      right.innerHTML = "";
      const p = playerId ? players2.find((x) => x.id === playerId) || null : null;
      if (!p) {
        const empty = document.createElement("div");
        empty.style.opacity = "0.75";
        empty.textContent = "Select a player on the left.";
        right.appendChild(empty);
        return;
      }
      const col = document.createElement("div");
      col.style.display = "grid";
      col.style.gridAutoRows = "min-content";
      col.style.justifyItems = "center";
      col.style.gap = "10px";
      col.style.overflow = "auto";
      right.appendChild(col);
      const prof = document.createElement("div");
      prof.style.display = "grid";
      prof.style.gap = "8px";
      prof.style.justifyItems = "center";
      const head = document.createElement("div");
      head.style.display = "flex";
      head.style.alignItems = "center";
      head.style.gap = "12px";
      const avatar = document.createElement("img");
      avatar.src = p.discordAvatarUrl || "";
      avatar.alt = p.name;
      avatar.width = 48;
      avatar.height = 48;
      avatar.style.borderRadius = "50%";
      avatar.style.objectFit = "cover";
      avatar.style.border = "1px solid #4446";
      const title = document.createElement("div");
      const nameEl = document.createElement("div");
      nameEl.textContent = p.name || p.id;
      nameEl.style.fontWeight = "600";
      nameEl.style.fontSize = "16px";
      const sub = document.createElement("div");
      sub.style.opacity = "0.8";
      sub.style.fontSize = "12px";
      sub.textContent = p.isConnected ? "Online" : "Offline";
      title.append(nameEl, sub);
      head.append(avatar, title);
      const info = document.createElement("div");
      info.style.opacity = "0.9";
      prof.append(head, info);
      col.appendChild(prof);
      const infoWrap = document.createElement("div");
      infoWrap.style.display = "grid";
      infoWrap.style.gap = "6px";
      infoWrap.style.justifySelf = "stretch";
      infoWrap.style.width = "100%";
      const invValueRow = rowLeft();
      const invLabel = document.createElement("div");
      invLabel.textContent = "Inventory: ";
      invLabel.style.fontSize = "14px";
      invLabel.style.opacity = "0.85";
      const invValue = document.createElement("div");
      invValue.textContent = "\u2026";
      invValue.style.fontSize = "15px";
      invValue.style.fontWeight = "700";
      invValue.style.color = "#FFD84D";
      invValueRow.append(invLabel, invValue);
      const gardenValueRow = rowLeft();
      const gardenLabel = document.createElement("div");
      gardenLabel.textContent = "Garden: ";
      gardenLabel.style.fontSize = "14px";
      gardenLabel.style.opacity = "0.85";
      const gardenValue = document.createElement("div");
      gardenValue.textContent = "\u2026";
      gardenValue.style.fontWeight = "700";
      gardenValue.style.fontSize = "15px";
      gardenValue.style.color = "#FFD84D";
      gardenValueRow.append(gardenLabel, gardenValue);
      infoWrap.append(invValueRow, gardenValueRow);
      col.appendChild(sectionFramed("\u{1F331} Crops values", infoWrap));
      const teleRow = rowCenter();
      const btnToPlayer = document.createElement("button");
      const btnToGarden = document.createElement("button");
      styleBtnFullWidthL(btnToPlayer, "To player");
      styleBtnFullWidthL(btnToGarden, "To garden");
      btnToPlayer.onclick = async () => {
        try {
          const fn = PlayersService.teleportToPlayer ?? PlayersService.teleportTo;
          await fn.call(PlayersService, p.id);
        } catch (e) {
          await toastSimple("Teleport", e?.message || "Error during teleport.", "error");
        }
      };
      btnToGarden.onclick = async () => {
        try {
          const fn = PlayersService.teleportToGarden ?? PlayersService.tptogarden;
          await fn.call(PlayersService, p.id);
        } catch (e) {
          await toastSimple("Teleport", e?.message || "Error during teleport.", "error");
        }
      };
      teleRow.append(btnToPlayer, btnToGarden);
      col.appendChild(sectionFramed("\u{1F300} Teleport", teleRow));
      const invRow = rowCenter();
      const btnInv = document.createElement("button");
      const btnJournal = document.createElement("button");
      styleBtnFullWidthL(btnInv, "Inventory");
      styleBtnFullWidthL(btnJournal, "Journal");
      btnInv.onclick = async () => {
        try {
          ui.setWindowVisible(false);
          await PlayersService.openInventoryPreview(p.id, p.name);
          if (await isInventoryPanelOpen()) {
            await waitInventoryPanelClosed();
          }
        } finally {
          ui.setWindowVisible(true);
        }
      };
      btnJournal.onclick = async () => {
        try {
          ui.setWindowVisible(false);
          await PlayersService.openJournalLog(p.id, p.name);
          if (await isJournalModalOpen()) {
            await waitJournalModalClosed();
          }
        } finally {
          ui.setWindowVisible(true);
        }
      };
      invRow.append(btnInv, btnJournal);
      col.appendChild(sectionFramed("\u{1F50D} Inspect", invRow));
      const funRow = rowCenter();
      const label2 = document.createElement("div");
      label2.textContent = "Follow";
      label2.style.fontSize = "14px";
      label2.style.opacity = "0.85";
      const sw = ui.switch(PlayersService.isFollowing(p.id));
      sw.addEventListener("change", async () => {
        try {
          if (sw.checked) {
            await PlayersService.startFollowing(p.id);
            await toastSimple("Follow", "Enabled.", "success");
          } else {
            PlayersService.stopFollowing();
            await toastSimple("Follow", "Disable.", "info");
          }
        } catch (e) {
          await toastSimple("Follow", e?.message || "Error", "error");
          sw.checked = !sw.checked;
        }
      });
      funRow.append(label2, sw);
      col.appendChild(sectionFramed("\u{1F389} Fun", funRow));
      (async () => {
        try {
          const total = await PlayersService.getInventoryValue(p.id);
          invValue.textContent = `${NF_US_INT.format(Math.round(total))}`;
          invValue.title = "Total inventory value";
        } catch {
          invValue.textContent = "\u2014";
        }
        try {
          const total = await PlayersService.getGardenValue(p.id);
          gardenValue.textContent = `${NF_US_INT.format(Math.round(total))}`;
          gardenValue.title = "Total garden value";
        } catch {
          gardenValue.textContent = "\u2014";
        }
      })();
    }
    let players2 = [];
    let lastSig = "";
    function signature(ps) {
      return ps.map(
        (p) => `${p.id}|${p.name ?? ""}|${p.isConnected ? 1 : 0}|${p.inventory?.items?.length ?? 0}`
      ).join(";");
    }
    async function refreshAll(keepSelection = true) {
      const prevSel = vt.getSelected()?.id ?? null;
      const next = await readPlayers();
      const sig = signature(next);
      if (sig === lastSig) {
        return;
      }
      lastSig = sig;
      players2 = next;
      vt.setItems(players2.map(vItem));
      ensureVtabsListScrollable(vt.root);
      const sel = keepSelection && prevSel && players2.some((p) => p.id === prevSel) ? prevSel : players2[0]?.id ?? null;
      if (sel !== null) vt.select(sel);
      else renderRight(null);
    }
    await PlayersService.onChange(() => {
      refreshAll(true).catch(() => {
      });
    });
    await refreshAll(true);
  }

  // src/ui/menus/pets.ts
  function sectionFramed2(titleText, content) {
    const s = document.createElement("div");
    s.style.display = "grid";
    s.style.justifyItems = "center";
    s.style.gap = "8px";
    s.style.textAlign = "center";
    s.style.border = "1px solid #4446";
    s.style.borderRadius = "10px";
    s.style.padding = "10px";
    s.style.background = "#1f2328";
    s.style.boxShadow = "0 0 0 1px #0002 inset";
    s.style.width = "min(720px, 100%)";
    const h = document.createElement("div");
    h.textContent = titleText;
    h.style.fontWeight = "600";
    h.style.opacity = "0.95";
    s.append(h, content);
    return s;
  }
  function getAbilityChipColors(id) {
    const key2 = String(id || "");
    const base = (PetsService.getAbilityNameWithoutLevel?.(key2) || "").replace(/[\s\-_]+/g, "").toLowerCase();
    const is = (prefix) => key2.startsWith(prefix) || base === prefix.toLowerCase();
    if (is("ProduceScaleBoost")) return { bg: "rgba(34,139,34,0.9)", hover: "rgba(34,139,34,1)" };
    if (is("PlantGrowthBoost")) return { bg: "rgba(0,128,128,0.9)", hover: "rgba(0,128,128,1)" };
    if (is("EggGrowthBoost")) return { bg: "rgba(180,90,240,0.9)", hover: "rgba(180,90,240,1)" };
    if (is("PetAgeBoost")) return { bg: "rgba(147,112,219,0.9)", hover: "rgba(147,112,219,1)" };
    if (is("PetHatchSizeBoost")) return { bg: "rgba(128,0,128,0.9)", hover: "rgba(128,0,128,1)" };
    if (is("PetXpBoost")) return { bg: "rgba(30,144,255,0.9)", hover: "rgba(30,144,255,1)" };
    if (is("HungerBoost")) return { bg: "rgba(255,20,147,0.9)", hover: "rgba(255,20,147,1)" };
    if (is("SellBoost")) return { bg: "rgba(220,20,60,0.9)", hover: "rgba(220,20,60,1)" };
    if (is("CoinFinder")) return { bg: "rgba(180,150,0,0.9)", hover: "rgba(180,150,0,1)" };
    if (is("ProduceMutationBoost")) return { bg: "rgba(138,43,226,0.9)", hover: "rgba(138,43,226,1)" };
    if (is("DoubleHarvest")) return { bg: "rgba(0,120,180,0.9)", hover: "rgba(0,120,180,1)" };
    if (is("ProduceEater")) return { bg: "rgba(255,69,0,0.9)", hover: "rgba(255,69,0,1)" };
    if (is("ProduceRefund")) return { bg: "rgba(255,99,71,0.9)", hover: "rgba(255,99,71,1)" };
    if (is("PetMutationBoost")) return { bg: "rgba(156,65,181,0.9)", hover: "rgba(156,65,181,1)" };
    if (is("HungerRestore")) return { bg: "rgba(255,105,180,0.9)", hover: "rgba(255,105,180,1)" };
    if (is("PetRefund")) return { bg: "rgba(0,80,120,0.9)", hover: "rgba(0,80,120,1)" };
    if (is("Copycat")) return { bg: "rgba(255,140,0,0.9)", hover: "rgba(255,140,0,1)" };
    if (is("GoldGranter")) {
      return {
        bg: "linear-gradient(135deg, rgba(225,200,55,0.9) 0%, rgba(225,180,10,0.9) 40%, rgba(215,185,45,0.9) 70%, rgba(210,185,45,0.9) 100%)",
        hover: "linear-gradient(135deg, rgba(220,200,70,1) 0%, rgba(210,175,5,1) 40%, rgba(210,185,55,1) 70%, rgba(200,175,30,1) 100%)"
      };
    }
    if (is("RainbowGranter")) {
      return {
        bg: "linear-gradient(45deg, rgba(200,0,0,0.9), rgba(200,120,0,0.9), rgba(160,170,30,0.9), rgba(60,170,60,0.9), rgba(50,170,170,0.9), rgba(40,150,180,0.9), rgba(20,90,180,0.9), rgba(70,30,150,0.9))",
        hover: "linear-gradient(45deg, rgba(200,0,0,1), rgba(200,120,0,1), rgba(160,170,30,1), rgba(60,170,60,1), rgba(50,170,170,1), rgba(40,150,180,1), rgba(20,90,180,1), rgba(70,30,150,1))"
      };
    }
    if (is("SeedFinderIV")) {
      return {
        bg: "linear-gradient(130deg, rgba(0,180,216,0.9) 0%, rgba(124,42,232,0.9) 40%, rgba(160,0,126,0.9) 60%, rgba(255,215,0,0.9) 100%)",
        hover: "linear-gradient(130deg, rgba(0,180,216,1) 0%, rgba(124,42,232,1) 40%, rgba(160,0,126,1) 60%, rgba(255,215,0,1) 100%)"
      };
    }
    if (is("SeedFinder")) {
      const lv = key2.replace(/.*?([IVX]+)$/, "$1");
      if (lv === "II") return { bg: "rgba(183,121,31,0.9)", hover: "rgba(183,121,31,1)" };
      if (lv === "III") return { bg: "rgba(139,62,152,0.9)", hover: "rgba(139,62,152,1)" };
      return { bg: "rgba(94,172,70,0.9)", hover: "rgba(94,172,70,1)" };
    }
    return { bg: "rgba(100,100,100,0.9)", hover: "rgba(150,150,150,1)" };
  }
  function renderManagerTab(view, ui) {
    view.innerHTML = "";
    let teams = [];
    let selectedId = null;
    let activeTeamId = null;
    let activePetIdSet = /* @__PURE__ */ new Set();
    let isApplyingTeam = false;
    let draggingIdx = null;
    let overInsertIdx = null;
    let draggingHeight = 0;
    let invCacheMap = null;
    const lastRenderedSlotIds = [null, null, null];
    function applySubtleBorder(btn, hex, alpha = 0.22) {
      const toRgba = (h, a) => {
        const m = h.replace("#", "");
        const r = parseInt(m.length === 3 ? m[0] + m[0] : m.slice(0, 2), 16);
        const g = parseInt(m.length === 3 ? m[1] + m[1] : m.slice(2, 4), 16);
        const b = parseInt(m.length === 3 ? m[2] + m[2] : m.slice(4, 6), 16);
        return `rgba(${r},${g},${b},${a})`;
      };
      const border = toRgba(hex, alpha);
      btn.style.border = `1px solid ${border}`;
      btn.style.background = "#1f2328";
      btn.style.boxShadow = "none";
      btn.style.transition = "none";
    }
    const styleBtnFullWidthL2 = (b, text) => {
      b.textContent = text;
      b.style.width = "100%";
      b.style.margin = "0";
      b.style.padding = "10px";
      b.style.borderRadius = "8px";
      b.style.border = "1px solid #4445";
      b.style.background = "#1f2328";
      b.style.color = "#e7eef7";
      b.style.justifyContent = "center";
      b.onmouseenter = () => b.style.borderColor = "#6aa1";
      b.onmouseleave = () => b.style.borderColor = "#4445";
    };
    const framed = (title, content) => sectionFramed2(title, content);
    const row = () => {
      const r = document.createElement("div");
      r.style.display = "flex";
      r.style.alignItems = "center";
      r.style.flexWrap = "wrap";
      r.style.gap = "8px";
      return r;
    };
    const wrap = document.createElement("div");
    wrap.style.display = "grid";
    wrap.style.gridTemplateColumns = "minmax(220px, 280px) minmax(0, 1fr)";
    wrap.style.gap = "10px";
    wrap.style.alignItems = "stretch";
    wrap.style.height = "54vh";
    wrap.style.overflow = "hidden";
    view.appendChild(wrap);
    const left = document.createElement("div");
    left.style.display = "grid";
    left.style.gridTemplateRows = "1fr auto";
    left.style.gap = "8px";
    left.style.minHeight = "0";
    wrap.appendChild(left);
    const teamList = document.createElement("div");
    teamList.style.display = "flex";
    teamList.style.flexDirection = "column";
    teamList.style.gap = "6px";
    teamList.style.overflow = "auto";
    teamList.style.padding = "6px";
    teamList.style.border = "1px solid #4445";
    teamList.style.borderRadius = "10px";
    teamList.style.scrollBehavior = "smooth";
    teamList.style.minHeight = "0";
    left.appendChild(teamList);
    const footer = document.createElement("div");
    footer.style.display = "flex";
    footer.style.gap = "6px";
    left.appendChild(footer);
    const btnNew = document.createElement("button");
    btnNew.id = "pets.teams.new";
    const btnDel = document.createElement("button");
    btnDel.id = "pets.teams.delete";
    styleBtnFullWidthL2(btnNew, "\u2795 New");
    styleBtnFullWidthL2(btnDel, "\u{1F5D1}\uFE0F Delete");
    applySubtleBorder(btnNew, "#22c55e", 0.22);
    applySubtleBorder(btnDel, "#ef4444", 0.22);
    footer.append(btnNew, btnDel);
    function getSelectedTeam() {
      return teams.find((t) => t.id === selectedId) || null;
    }
    function computeInsertIndex(clientY) {
      const children = Array.from(teamList.children);
      if (!children.length) return 0;
      const first = children[0].getBoundingClientRect();
      if (clientY < first.top + first.height / 2) return 0;
      for (let i = 0; i < children.length; i++) {
        const rect = children[i].getBoundingClientRect();
        const mid = rect.top + rect.height / 2;
        if (clientY < mid) return i;
      }
      return children.length;
    }
    function abilitiesBadge(abilities) {
      const wrap2 = document.createElement("span");
      wrap2.style.display = "inline-flex";
      wrap2.style.alignItems = "center";
      wrap2.style.lineHeight = "1";
      const SPACING_PX = 8;
      const SIZE_PX = 12;
      const RADIUS_PX = 3;
      const ids = Array.isArray(abilities) ? abilities.filter(Boolean) : [];
      if (!ids.length) {
        const empty = document.createElement("span");
        empty.textContent = "No ability";
        empty.style.opacity = "0.75";
        empty.style.fontSize = "12px";
        wrap2.appendChild(empty);
        return wrap2;
      }
      ids.forEach((id, i) => {
        const chip = document.createElement("span");
        const { bg, hover } = getAbilityChipColors(id);
        chip.title = PetsService.getAbilityName(id) || id;
        chip.setAttribute("aria-label", chip.title);
        Object.assign(chip.style, {
          display: "inline-block",
          width: `${SIZE_PX}px`,
          height: `${SIZE_PX}px`,
          borderRadius: `${RADIUS_PX}px`,
          marginRight: i === ids.length - 1 ? "0" : `${SPACING_PX}px`,
          background: bg,
          transition: "transform 80ms ease, box-shadow 120ms ease, background 120ms ease",
          cursor: "default"
        });
        chip.onmouseenter = () => {
          chip.style.background = hover;
          chip.style.transform = "scale(1.08)";
          chip.style.boxShadow = "0 0 0 1px #0006 inset, 0 0 0 1px #ffffff33";
        };
        chip.onmouseleave = () => {
          chip.style.background = bg;
          chip.style.transform = "none";
          chip.style.boxShadow = "0 0 0 1px #0006 inset, 0 0 0 1px #ffffff1a";
        };
        wrap2.appendChild(chip);
      });
      return wrap2;
    }
    function applyLiveTransforms() {
      const children = Array.from(teamList.children);
      children.forEach((el2) => el2.style.transform = "");
      if (draggingIdx === null || overInsertIdx === null) return;
      const from = draggingIdx;
      const to = overInsertIdx;
      children.forEach((el2, idx) => {
        el2.style.transition = "transform 120ms ease";
        if (idx === from) return;
        if (to > from && idx > from && idx < to) {
          el2.style.transform = `translateY(${-draggingHeight}px)`;
        }
        if (to < from && idx >= to && idx < from) {
          el2.style.transform = `translateY(${draggingHeight}px)`;
        }
      });
    }
    function clearLiveTransforms() {
      Array.from(teamList.children).forEach((el2) => {
        el2.style.transform = "";
        el2.style.transition = "";
      });
    }
    async function refreshActiveIds() {
      activeTeamId = null;
      activePetIdSet = /* @__PURE__ */ new Set();
      try {
        const pets = await PetsService.getPets();
        const equipIds = Array.isArray(pets) ? pets.map((p) => String(p?.slot?.id || "")).filter(Boolean) : [];
        activePetIdSet = new Set(equipIds);
        for (const t of teams) {
          const tIds = (t.slots || []).filter(Boolean);
          if (tIds.length !== equipIds.length) continue;
          let same = true;
          for (const id of tIds) {
            if (!activePetIdSet.has(id)) {
              same = false;
              break;
            }
          }
          if (same) {
            activeTeamId = t.id;
            break;
          }
        }
      } catch {
      }
    }
    async function refreshTeamList(skipDetectActive = false) {
      if (!skipDetectActive) {
        await refreshActiveIds();
      }
      clearLiveTransforms();
      draggingIdx = null;
      overInsertIdx = null;
      draggingHeight = 0;
      teamList.innerHTML = "";
      if (!teams.length) {
        const empty = document.createElement("div");
        empty.textContent = "No teams yet. Create one!";
        empty.style.opacity = "0.75";
        empty.style.textAlign = "center";
        empty.style.padding = "8px";
        teamList.appendChild(empty);
        hydrateEditor(null);
        return;
      }
      teams.forEach((t, idx) => {
        const item = document.createElement("div");
        const isActive = t.id === activeTeamId;
        item.dataset.index = String(idx);
        item.textContent = "";
        item.style.height = "36px";
        item.style.lineHeight = "36px";
        item.style.padding = "0 10px";
        item.style.border = "1px solid #ffffff15";
        item.style.borderRadius = "6px";
        item.style.cursor = "pointer";
        item.style.fontSize = "13px";
        item.style.overflow = "hidden";
        item.style.whiteSpace = "nowrap";
        item.style.textOverflow = "ellipsis";
        item.style.display = "flex";
        item.style.flex = "0 0 auto";
        item.style.gap = "8px";
        item.style.alignItems = "center";
        item.style.background = t.id === selectedId ? "#2a313a" : "#1f2328";
        const dot = document.createElement("span");
        dot.style.width = "10px";
        dot.style.height = "10px";
        dot.style.borderRadius = "50%";
        dot.style.boxShadow = "0 0 0 1px #0006 inset";
        dot.style.background = isActive ? "#48d170" : "#64748b";
        dot.title = isActive ? "This team is currently active" : "Inactive team";
        const label2 = document.createElement("span");
        label2.textContent = t.name || "(unnamed)";
        label2.style.overflow = "hidden";
        label2.style.textOverflow = "ellipsis";
        label2.style.whiteSpace = "nowrap";
        item.append(dot, label2);
        const grab = document.createElement("span");
        grab.className = "qmm-grab";
        grab.title = "Drag to reorder";
        grab.innerHTML = "&#8942;";
        grab.draggable = true;
        item.onmouseenter = () => item.style.borderColor = "#6aa1";
        item.onmouseleave = () => item.style.borderColor = "#ffffff15";
        item.onclick = (ev) => {
          if (ev.__byDrag) return;
          const changed = selectedId !== t.id;
          if (changed) {
            selectedId = t.id;
            refreshTeamList(true);
          }
          void hydrateEditor(getSelectedTeam());
        };
        grab.addEventListener("dragstart", (ev) => {
          draggingIdx = idx;
          draggingHeight = item.getBoundingClientRect().height;
          item.classList.add("qmm-dragging");
          ev.dataTransfer?.setData("text/plain", String(idx));
          if (ev.dataTransfer) ev.dataTransfer.effectAllowed = "move";
          try {
            const ghost = item.cloneNode(true);
            ghost.style.width = `${item.getBoundingClientRect().width}px`;
            ghost.style.position = "absolute";
            ghost.style.top = "-9999px";
            document.body.appendChild(ghost);
            ev.dataTransfer.setDragImage(ghost, ghost.offsetWidth / 2, ghost.offsetHeight / 2);
            setTimeout(() => document.body.removeChild(ghost), 0);
          } catch {
          }
        });
        grab.addEventListener("dragend", () => {
          item.classList.remove("qmm-dragging");
          clearLiveTransforms();
          draggingIdx = null;
          overInsertIdx = null;
        });
        item.addEventListener("dragover", (ev) => {
          ev.preventDefault();
          if (ev.dataTransfer) ev.dataTransfer.dropEffect = "move";
          if (draggingIdx === null) return;
          const idxOver = Number(ev.currentTarget.dataset.index || -1);
          if (idxOver < 0) return;
          const rect = item.getBoundingClientRect();
          const mid = rect.top + rect.height / 2;
          const insertIdx = ev.clientY < mid ? idxOver : idxOver + 1;
          const clamped = Math.max(0, Math.min(teams.length, insertIdx));
          if (overInsertIdx !== clamped) {
            overInsertIdx = clamped;
            applyLiveTransforms();
          }
          const edge = 28;
          const listRect = teamList.getBoundingClientRect();
          if (ev.clientY < listRect.top + edge) teamList.scrollTop -= 18;
          else if (ev.clientY > listRect.bottom - edge) teamList.scrollTop += 18;
        });
        item.addEventListener("drop", (ev) => {
          ev.preventDefault();
          ev.__byDrag = true;
          if (draggingIdx === null) return;
          let target = overInsertIdx ?? computeInsertIndex(ev.clientY);
          if (target > draggingIdx) target -= 1;
          target = Math.max(0, Math.min(teams.length - 1, target));
          if (target !== draggingIdx) {
            const a = teams.slice();
            const [it] = a.splice(draggingIdx, 1);
            a.splice(target, 0, it);
            teams = a;
            try {
              PetsService.setTeamsOrder(teams.map((x) => x.id));
            } catch {
            }
          }
          clearLiveTransforms();
          draggingIdx = null;
          overInsertIdx = null;
          draggingHeight = 0;
          refreshTeamList();
        });
        item.appendChild(grab);
        teamList.appendChild(item);
      });
    }
    teamList.addEventListener("dragover", (e) => {
      e.preventDefault();
      if (e.dataTransfer) e.dataTransfer.dropEffect = "move";
      if (draggingIdx === null) return;
      const idx = computeInsertIndex(e.clientY);
      if (overInsertIdx !== idx) {
        overInsertIdx = idx;
        applyLiveTransforms();
      }
      const edge = 28;
      const listRect = teamList.getBoundingClientRect();
      if (e.clientY < listRect.top + edge) teamList.scrollTop -= 18;
      else if (e.clientY > listRect.bottom - edge) teamList.scrollTop += 18;
    });
    teamList.addEventListener("drop", (e) => {
      e.preventDefault();
      if (draggingIdx === null) return;
      let target = overInsertIdx ?? computeInsertIndex(e.clientY);
      if (target > draggingIdx) target -= 1;
      target = Math.max(0, Math.min(teams.length - 1, target));
      if (target !== draggingIdx) {
        const a = teams.slice();
        const [it] = a.splice(draggingIdx, 1);
        a.splice(target, 0, it);
        teams = a;
        try {
          PetsService.setTeamsOrder(teams.map((x) => x.id));
        } catch {
        }
      }
      clearLiveTransforms();
      draggingIdx = null;
      overInsertIdx = null;
      draggingHeight = 0;
      refreshTeamList();
    });
    btnNew.onclick = () => {
      const created = PetsService.createTeam("New Team");
      selectedId = created.id;
      refreshTeamList();
      hydrateEditor(getSelectedTeam());
    };
    btnDel.onclick = () => {
      if (!selectedId) return;
      const ok = PetsService.deleteTeam(selectedId);
      if (!ok) return;
    };
    let unsubTeams = null;
    (async () => {
      try {
        unsubTeams = await PetsService.onTeamsChangeNow(async (all) => {
          teams = Array.isArray(all) ? all.slice() : [];
          if (selectedId && !teams.some((t) => t.id === selectedId)) {
            selectedId = teams[0]?.id ?? null;
          }
          if (!selectedId && teams.length) selectedId = teams[0].id;
          refreshTeamList();
          setTeamsForHotkeys(teams);
          await PetsService.getInventoryPets().catch(() => []);
          await hydrateEditor(getSelectedTeam());
        });
      } catch {
      }
    })();
    const right = document.createElement("div");
    right.style.display = "grid";
    right.style.gridTemplateRows = "auto 1fr";
    right.style.gap = "10px";
    right.style.minHeight = "0";
    wrap.appendChild(right);
    const header = document.createElement("div");
    header.style.display = "flex";
    header.style.alignItems = "center";
    header.style.gap = "8px";
    const headerTitle = document.createElement("div");
    headerTitle.textContent = "Team editor \u2014 ";
    headerTitle.style.fontWeight = "700";
    headerTitle.style.fontSize = "14px";
    const btnUseTeam = document.createElement("button");
    btnUseTeam.id = "pets.teams.useThisTeam";
    btnUseTeam.textContent = "Use this team";
    btnUseTeam.style.padding = "6px 10px";
    btnUseTeam.style.borderRadius = "8px";
    btnUseTeam.style.border = "1px solid #4445";
    btnUseTeam.style.background = "#1f2328";
    btnUseTeam.style.color = "#e7eef7";
    btnUseTeam.style.cursor = "pointer";
    btnUseTeam.onmouseenter = () => btnUseTeam.style.borderColor = "#6aa1";
    btnUseTeam.onmouseleave = () => btnUseTeam.style.borderColor = "#4445";
    btnUseTeam.disabled = true;
    const btnSave = document.createElement("button");
    btnSave.id = "pets.teams.save";
    btnSave.textContent = "\u{1F4BE} Save";
    btnSave.style.padding = "6px 10px";
    btnSave.style.borderRadius = "8px";
    btnSave.style.border = "1px solid #4445";
    btnSave.style.background = "#1f2328";
    btnSave.style.color = "#e7eef7";
    btnSave.style.cursor = "pointer";
    btnSave.onmouseenter = () => btnSave.style.borderColor = "#6aa1";
    btnSave.onmouseleave = () => btnSave.style.borderColor = "#4445";
    btnSave.disabled = true;
    header.append(headerTitle, btnUseTeam);
    right.appendChild(header);
    const card = document.createElement("div");
    card.style.border = "1px solid #4445";
    card.style.borderRadius = "10px";
    card.style.padding = "10px";
    card.style.display = "flex";
    card.style.flexDirection = "column";
    card.style.gap = "12px";
    card.style.overflow = "auto";
    card.style.minHeight = "0";
    card.style.background = "#0f1318";
    right.appendChild(card);
    const secName = (() => {
      const r = row();
      r.style.width = "100%";
      const nameInput = ui.inputText("Team name", "");
      nameInput.id = "pets.teams.editor.name";
      nameInput.style.flex = "1";
      nameInput.style.minWidth = "0";
      btnSave.style.marginLeft = "auto";
      btnSave.style.padding = "6px 10px";
      r.append(nameInput, btnSave);
      card.appendChild(framed("\u{1F3F7}\uFE0F Team name", r));
      return { nameInput };
    })();
    const secSearch = (() => {
      const wrapOuter = document.createElement("div");
      wrapOuter.style.display = "flex";
      wrapOuter.style.flexDirection = "column";
      wrapOuter.style.gap = "10px";
      wrapOuter.style.alignItems = "center";
      let isProgrammaticModeSet = false;
      let currentMode = "ability";
      const seg = ui.segmented(
        [
          { value: "ability", label: "\u2728 Ability" },
          { value: "species", label: "\u{1F9EC} Species" }
        ],
        "ability",
        async (val) => {
          if (isProgrammaticModeSet) return;
          currentMode = val;
          await rebuildOptionsFromInventory();
          select2.value = "";
          applyFilterToTeam();
        },
        { ariaLabel: "Search mode" }
      );
      const select2 = document.createElement("select");
      select2.className = "qmm-input";
      select2.id = "pets.teams.filter.select";
      select2.style.minWidth = "260px";
      const getMode = () => currentMode;
      const setMode = (m) => {
        currentMode = m;
        isProgrammaticModeSet = true;
        seg.set(m);
        isProgrammaticModeSet = false;
      };
      const rebuildOptionsFromInventory = async () => {
        const prev = select2.value;
        const inv = await PetsService.getInventoryPets().catch(() => []);
        select2.innerHTML = "";
        const opt0 = document.createElement("option");
        opt0.value = "";
        opt0.textContent = "\u2014 No filter \u2014";
        select2.appendChild(opt0);
        if (getMode() === "ability") {
          const nameSet = /* @__PURE__ */ new Set();
          for (const p of inv) {
            const abs = Array.isArray(p?.abilities) ? p.abilities.filter(Boolean) : [];
            for (const id of abs) {
              const base = PetsService.getAbilityNameWithoutLevel?.(id) || "";
              if (base) nameSet.add(base);
            }
          }
          for (const name of Array.from(nameSet).sort((a, b) => a.localeCompare(b))) {
            const o = document.createElement("option");
            o.value = name;
            o.textContent = name;
            select2.appendChild(o);
          }
        } else {
          const set2 = /* @__PURE__ */ new Set();
          for (const p of inv) {
            const sp = String(p?.petSpecies || "").trim();
            if (sp) set2.add(sp);
          }
          for (const v of Array.from(set2).sort((a, b) => a.localeCompare(b))) {
            const o = document.createElement("option");
            o.value = v;
            o.textContent = v.charAt(0).toUpperCase() + v.slice(1);
            select2.appendChild(o);
          }
        }
        if (Array.from(select2.options).some((o) => o.value === prev)) select2.value = prev;
      };
      const applyFilterToTeam = () => {
        const t = getSelectedTeam();
        if (!t) return;
        const val = (select2.value || "").trim();
        const raw = getMode() === "ability" ? val ? `ab:${val}` : "" : val ? `sp:${val}` : "";
        PetsService.setTeamSearch(t.id, raw);
      };
      select2.addEventListener("change", applyFilterToTeam);
      wrapOuter.append(seg, select2);
      card.appendChild(framed("\u{1F50D} Search", wrapOuter));
      const ensureOptionExists = (val, pretty) => {
        const v = (val || "").trim();
        if (!v) return;
        const has = Array.from(select2.options).some((o) => o.value === v);
        if (!has) {
          const o = document.createElement("option");
          o.value = v;
          o.textContent = pretty ?? v;
          select2.appendChild(o);
        }
      };
      return {
        getMode,
        setMode,
        select: select2,
        rebuild: rebuildOptionsFromInventory,
        apply: applyFilterToTeam,
        setFromSearchString(s) {
          const m = (s || "").match(/^(ab|sp):\s*(.*)$/i);
          if (!m) {
            setMode("ability");
            select2.value = "";
            return;
          }
          const mode = m[1].toLowerCase() === "ab" ? "ability" : "species";
          const val = (m[2] || "").trim();
          setMode(mode);
          ensureOptionExists(val, mode === "species" ? val.charAt(0).toUpperCase() + val.slice(1) : val);
          select2.value = val;
        }
      };
    })();
    const secSlots = (() => {
      const grid = document.createElement("div");
      grid.style.display = "grid";
      grid.style.gridTemplateColumns = "1fr";
      grid.style.rowGap = "10px";
      grid.style.justifyItems = "center";
      const mkRow = (idx) => {
        const root = document.createElement("div");
        const BTN = 28;
        root.style.display = "grid";
        root.style.gridTemplateColumns = `minmax(0,1fr) ${BTN}px ${BTN}px`;
        root.style.alignItems = "center";
        root.style.gap = "8px";
        root.style.width = "min(560px, 100%)";
        root.style.border = "1px solid #4445";
        root.style.borderRadius = "10px";
        root.style.padding = "8px 10px";
        root.style.background = "#0f1318";
        const left2 = document.createElement("div");
        left2.style.display = "flex";
        left2.style.flexDirection = "column";
        left2.style.gap = "6px";
        left2.style.minWidth = "0";
        const nameEl = document.createElement("div");
        nameEl.style.fontWeight = "700";
        nameEl.textContent = "None";
        nameEl.style.overflow = "hidden";
        nameEl.style.textOverflow = "ellipsis";
        nameEl.style.whiteSpace = "nowrap";
        let abilitiesEl = abilitiesBadge([]);
        abilitiesEl.style.display = "inline-block";
        left2.append(nameEl, abilitiesEl);
        const btnChoose = document.createElement("button");
        btnChoose.textContent = "+";
        Object.assign(btnChoose.style, {
          width: `${BTN}px`,
          minWidth: `${BTN}px`,
          height: `${BTN}px`,
          padding: "0",
          fontSize: "16px",
          lineHeight: "1",
          borderRadius: "10px",
          boxShadow: "none",
          display: "grid",
          placeItems: "center"
        });
        btnChoose.title = "Choose a pet";
        btnChoose.setAttribute("aria-label", "Choose a pet");
        const btnClear2 = document.createElement("button");
        btnClear2.textContent = "\u2212";
        Object.assign(btnClear2.style, {
          width: `${BTN}px`,
          minWidth: `${BTN}px`,
          height: `${BTN}px`,
          padding: "0",
          fontSize: "16px",
          lineHeight: "1",
          borderRadius: "10px",
          boxShadow: "none",
          display: "grid",
          placeItems: "center"
        });
        btnClear2.title = "Remove this pet";
        btnClear2.setAttribute("aria-label", "Remove this pet");
        root.append(left2, btnChoose, btnClear2);
        function update(p) {
          if (!p) {
            nameEl.textContent = "None";
            const fresh2 = abilitiesBadge([]);
            fresh2.style.display = "inline-block";
            left2.replaceChild(fresh2, left2.children[1]);
            abilitiesEl = fresh2;
            return;
          }
          const speciesLabel = p.petSpecies ? p.petSpecies.charAt(0).toUpperCase() + p.petSpecies.slice(1) : "";
          const n = p.name?.trim() || speciesLabel || "Pet";
          nameEl.textContent = n;
          const abs = Array.isArray(p.abilities) ? p.abilities.filter(Boolean) : [];
          const fresh = abilitiesBadge(abs);
          fresh.style.display = "inline-block";
          left2.replaceChild(fresh, left2.children[1]);
          abilitiesEl = fresh;
        }
        btnChoose.onclick = async () => {
          const t = getSelectedTeam();
          if (!t) return;
          btnChoose.disabled = true;
          btnClear2.disabled = true;
          ui.setWindowVisible(false);
          try {
            await PetsService.chooseSlotPet(t.id, idx);
            await repaintSlots(getSelectedTeam());
          } finally {
            ui.setWindowVisible(true);
            btnChoose.disabled = false;
            btnClear2.disabled = false;
          }
        };
        btnClear2.onclick = async () => {
          const t = getSelectedTeam();
          if (!t) return;
          const next = t.slots.slice(0, 3);
          next[idx] = null;
          PetsService.saveTeam({ id: t.id, slots: next });
          await repaintSlots(t);
        };
        return { root, nameEl, abilitiesEl, btnChoose, btnClear: btnClear2, update };
      };
      const r0 = mkRow(0);
      const r1 = mkRow(1);
      const r2 = mkRow(2);
      grid.append(r0.root, r1.root, r2.root);
      const extra = document.createElement("div");
      extra.style.display = "flex";
      extra.style.gap = "6px";
      extra.style.justifyContent = "center";
      const btnUseCurrent = document.createElement("button");
      styleBtnFullWidthL2(btnUseCurrent, "Current active");
      btnUseCurrent.id = "pets.teams.useCurrent";
      const btnClear = document.createElement("button");
      styleBtnFullWidthL2(btnClear, "Clear slots");
      btnClear.id = "pets.teams.clearSlots";
      const DARK_BG = "#0f1318";
      extra.append(btnUseCurrent, btnClear);
      Object.assign(btnUseCurrent.style, {
        width: "auto",
        fontSize: "16px",
        borderRadius: "10px",
        background: DARK_BG,
        boxShadow: "none"
      });
      Object.assign(btnClear.style, {
        width: "auto",
        fontSize: "16px",
        borderRadius: "10px",
        background: DARK_BG,
        boxShadow: "none"
      });
      const wrapSlots = document.createElement("div");
      wrapSlots.style.display = "flex";
      wrapSlots.style.flexDirection = "column";
      wrapSlots.style.gap = "8px";
      wrapSlots.append(grid, extra);
      card.appendChild(framed("\u26A1 Active pets (3 slots)", wrapSlots));
      return {
        rows: [r0, r1, r2],
        btnUseCurrent,
        btnClear
      };
    })();
    const secKeybinds = (() => {
      const r = row();
      const holder = document.createElement("span");
      holder.style.display = "inline-block";
      function setTeam(team) {
        holder.innerHTML = "";
        if (!team) return;
        const btn = ui.hotkeyButton(
          null,
          () => refreshTeamFromLS(team.id),
          {
            storageKey: hkKeyForTeam(team.id),
            emptyLabel: "None",
            listeningLabel: "Press a key\u2026",
            clearable: true
          }
        );
        holder.appendChild(btn);
      }
      r.append(holder);
      card.appendChild(framed("\u{1F579}\uFE0F Quick switch", r));
      return { setTeam };
    })();
    async function repaintSlots(sourceTeam) {
      const t = sourceTeam ?? getSelectedTeam();
      if (!t) return;
      let inv = await PetsService.getInventoryPets().catch(() => null);
      if (!inv || inv.length === 0) {
      } else {
        invCacheMap = /* @__PURE__ */ new Map();
        for (const p of inv) {
          const id = p?.id != null ? String(p.id) : "";
          if (id) invCacheMap.set(id, p);
        }
      }
      const map2 = invCacheMap ?? /* @__PURE__ */ new Map();
      [0, 1, 2].forEach((i) => {
        const id = t.slots[i] || null;
        if (!id) {
          if (lastRenderedSlotIds[i] !== null) {
            secSlots.rows[i].update(null);
            lastRenderedSlotIds[i] = null;
          }
          return;
        }
        const pet = map2.get(id);
        if (!pet) return;
        if (lastRenderedSlotIds[i] === id) return;
        secSlots.rows[i].update(pet);
        lastRenderedSlotIds[i] = id;
      });
    }
    async function hydrateEditor(team) {
      const has = !!team;
      secName.nameInput.disabled = !has;
      secSlots.btnClear.disabled = !has;
      secSlots.btnUseCurrent.disabled = !has;
      btnUseTeam.disabled = !has;
      btnSave.disabled = !has;
      secKeybinds.setTeam(team);
      if (has) {
        const saved = PetsService.getTeamSearch(team.id) || "";
        const m = saved.match(/^(ab|sp):\s*(.*)$/i);
        const mode = m ? m[1].toLowerCase() === "ab" ? "ability" : "species" : "ability";
        secSearch.setMode(mode);
        await secSearch.rebuild();
        if (m) secSearch.setFromSearchString(saved);
      } else {
        await secSearch.rebuild();
      }
      if (!has) {
        secSlots.rows.forEach((r) => r.update(null));
        secName.nameInput.value = "";
        return;
      }
      secName.nameInput.value = String(team.name || "");
      await repaintSlots(team);
    }
    secName.nameInput.addEventListener("keydown", (ev) => {
      if (ev.key === "Enter") ev.currentTarget.blur();
    });
    secName.nameInput.addEventListener("blur", () => {
      const t = getSelectedTeam();
      if (!t) return;
      const nextName = secName.nameInput.value.trim();
      if (nextName !== t.name) {
        PetsService.saveTeam({ id: t.id, name: nextName });
      }
    });
    secSlots.btnUseCurrent.onclick = async () => {
      const t = getSelectedTeam();
      if (!t) return;
      try {
        const arr = await PetsService.getPets();
        const list = Array.isArray(arr) ? arr : [];
        const ids = list.map((p) => String(p?.slot?.id || "")).filter((x) => !!x).slice(0, 3);
        const nextSlots = [ids[0] || null, ids[1] || null, ids[2] || null];
        PetsService.saveTeam({ id: t.id, slots: nextSlots });
        await repaintSlots(t);
      } catch {
      }
    };
    secSlots.btnClear.onclick = async () => {
      const t = getSelectedTeam();
      if (!t) return;
      PetsService.saveTeam({ id: t.id, slots: [null, null, null] });
      await repaintSlots(t);
    };
    btnSave.onclick = () => {
      const t = getSelectedTeam();
      if (!t) return;
      const name = secName.nameInput.value.trim();
      const slots = t.slots.slice(0, 3);
      PetsService.saveTeam({ id: t.id, name, slots });
      void repaintSlots(t);
    };
    function sameSet(a, b) {
      if (a.length !== b.length) return false;
      const s = new Set(a);
      for (const x of b) if (!s.has(x)) return false;
      return true;
    }
    async function waitForActiveTeam(team, timeoutMs = 2e3) {
      const target = (team.slots || []).filter(Boolean);
      const t0 = performance.now();
      while (performance.now() - t0 < timeoutMs) {
        const pets = await PetsService.getPets().catch(() => null);
        const equip = Array.isArray(pets) ? pets.map((p) => String(p?.slot?.id || "")).filter(Boolean) : [];
        if (sameSet(equip, target)) return true;
        await new Promise((r) => setTimeout(r, 80));
      }
      return false;
    }
    btnUseTeam.onclick = async () => {
      const t = getSelectedTeam();
      if (!t) return;
      try {
        isApplyingTeam = true;
        activeTeamId = t.id;
        await refreshTeamList(true);
        await PetsService.useTeam(t.id);
        await waitForActiveTeam(t);
        await hydrateEditor(getSelectedTeam());
        await refreshTeamList();
      } catch (e) {
        console.warn("[Pets] Use this team failed:", e);
        await refreshTeamList();
      } finally {
        isApplyingTeam = false;
      }
    };
    let unsubPets = null;
    (async () => {
      try {
        unsubPets = await onActivePetsStructuralChangeNow(async () => {
          if (isApplyingTeam) return;
          await repaintSlots(getSelectedTeam());
          await refreshTeamList();
        });
      } catch {
      }
    })();
    installPetTeamHotkeysOnce(async (teamId) => {
      const t = teams.find((tt) => tt.id === teamId) || null;
      try {
        isApplyingTeam = true;
        if (t) {
          activeTeamId = t.id;
          await refreshTeamList(true);
        }
        await PetsService.useTeam(teamId);
        if (t) await waitForActiveTeam(t);
        await hydrateEditor(getSelectedTeam());
        await refreshTeamList();
      } catch (e) {
        console.warn("[Pets] hotkey useTeam failed:", e);
        await refreshTeamList();
      } finally {
        isApplyingTeam = false;
      }
    });
    view.__cleanup__ = (() => {
      const prev = view.__cleanup__;
      return () => {
        try {
          unsubTeams?.();
        } catch {
        }
        try {
          unsubPets?.();
        } catch {
        }
        try {
          prev?.();
        } catch {
        }
      };
    })();
  }
  function renderLogsTab(view, ui) {
    view.innerHTML = "";
    const styleBtnFullWidth = (b, text) => {
      b.textContent = text;
      b.style.width = "100%";
      b.style.margin = "0";
      b.style.padding = "10px";
      b.style.borderRadius = "8px";
      b.style.border = "1px solid #4445";
      b.style.background = "#1f2328";
      b.style.color = "#e7eef7";
      b.style.justifyContent = "center";
      b.onmouseenter = () => b.style.borderColor = "#6aa1";
      b.onmouseleave = () => b.style.borderColor = "#4445";
    };
    const wrap = document.createElement("div");
    wrap.style.display = "grid";
    wrap.style.gridTemplateRows = "auto 1fr";
    wrap.style.gap = "10px";
    wrap.style.height = "54vh";
    view.appendChild(wrap);
    const header = document.createElement("div");
    header.style.display = "flex";
    header.style.flexWrap = "wrap";
    header.style.alignItems = "center";
    header.style.gap = "8px";
    header.style.border = "1px solid #4445";
    header.style.borderRadius = "10px";
    header.style.padding = "8px 10px";
    header.style.background = "#0f1318";
    wrap.appendChild(header);
    const selAbility = document.createElement("select");
    selAbility.className = "qmm-input";
    selAbility.style.minWidth = "200px";
    selAbility.id = "pets.logs.filter.ability";
    const selSort = document.createElement("select");
    selSort.className = "qmm-input";
    selSort.style.minWidth = "140px";
    selSort.id = "pets.logs.sort";
    [["desc", "Newest first"], ["asc", "Oldest first"]].forEach(([v, t]) => {
      const o = document.createElement("option");
      o.value = v;
      o.textContent = t;
      selSort.appendChild(o);
    });
    selSort.value = "desc";
    const inputSearch = ui.inputText("search (pet / ability / details)", "");
    inputSearch.id = "pets.logs.search";
    inputSearch.style.minWidth = "220px";
    const btnClear = document.createElement("button");
    styleBtnFullWidth(btnClear, "\u{1F9F9} Clear");
    btnClear.id = "pets.logs.clear";
    btnClear.style.width = "auto";
    btnClear.style.flex = "0 0 auto";
    btnClear.style.padding = "6px 12px";
    header.append(
      ui.label("Ability"),
      selAbility,
      ui.label("Sort"),
      selSort,
      inputSearch,
      btnClear
    );
    const card = document.createElement("div");
    card.style.border = "1px solid #4445";
    card.style.borderRadius = "10px";
    card.style.padding = "10px";
    card.style.background = "#0f1318";
    card.style.overflow = "hidden";
    card.style.display = "grid";
    card.style.gridTemplateRows = "auto 1fr";
    card.style.minHeight = "0";
    wrap.appendChild(card);
    const headerGrid = document.createElement("div");
    headerGrid.style.display = "grid";
    headerGrid.style.gridTemplateColumns = "140px 220px 200px minmax(0,1fr)";
    headerGrid.style.columnGap = "0";
    headerGrid.style.borderBottom = "1px solid #ffffff1a";
    headerGrid.style.padding = "0 0 6px 0";
    function mkHeadCell(txt, align = "center") {
      const el2 = document.createElement("div");
      el2.textContent = txt;
      el2.style.fontWeight = "600";
      el2.style.opacity = "0.9";
      el2.style.padding = "6px 8px";
      el2.style.textAlign = align;
      return el2;
    }
    headerGrid.append(
      mkHeadCell("Time"),
      mkHeadCell("Pet"),
      mkHeadCell("Ability"),
      mkHeadCell("Details", "left")
    );
    card.appendChild(headerGrid);
    const bodyGrid = document.createElement("div");
    bodyGrid.style.display = "grid";
    bodyGrid.style.gridTemplateColumns = "140px 220px 200px minmax(0,1fr)";
    bodyGrid.style.gridAutoRows = "auto";
    bodyGrid.style.alignContent = "start";
    bodyGrid.style.overflow = "auto";
    bodyGrid.style.width = "100%";
    bodyGrid.style.minHeight = "0";
    card.appendChild(bodyGrid);
    let logs = [];
    let abilityFilter = "";
    let sortDir = "desc";
    let q = "";
    function rebuildAbilityOptions() {
      const current = selAbility.value;
      selAbility.innerHTML = "";
      const opts = [["", "All abilities"], ...PetsService.getSeenAbilityIds().map((a) => [a, a])];
      for (const [v, t] of opts) {
        const o = document.createElement("option");
        o.value = v;
        o.textContent = t;
        selAbility.appendChild(o);
      }
      selAbility.value = opts.some(([v]) => v === current) ? current : "";
    }
    function cell(txt, align = "center") {
      const el2 = document.createElement("div");
      el2.textContent = txt;
      el2.style.padding = "6px 8px";
      el2.style.textAlign = align;
      el2.style.whiteSpace = align === "left" ? "pre-wrap" : "normal";
      el2.style.wordBreak = align === "left" ? "break-word" : "normal";
      el2.style.borderBottom = "1px solid #ffffff12";
      return el2;
    }
    function row(log) {
      const time = cell(log.time12, "center");
      const petLabel = log.petName || log.species || "Pet";
      const pet = cell(petLabel, "center");
      const abName = cell(log.abilityName || log.abilityId, "center");
      const detText = typeof log.data === "string" ? log.data : (() => {
        try {
          return JSON.stringify(log.data);
        } catch {
          return "";
        }
      })();
      const det = cell(detText, "left");
      bodyGrid.append(time, pet, abName, det);
    }
    const normAbilityKey = (s) => String(s ?? "").toLowerCase().replace(/\s+/g, "").replace(/([ivx]+)$/i, "");
    function applyFilters() {
      let arr = logs.slice();
      if (abilityFilter && abilityFilter.trim()) {
        const f = normAbilityKey(abilityFilter);
        arr = arr.filter((l) => {
          const idKey = normAbilityKey(l.abilityId);
          const nameKey = normAbilityKey(PetsService.getAbilityNameWithoutLevel(l.abilityId));
          return idKey === f || nameKey === f;
        });
      }
      if (q && q.trim()) {
        const qq = q.toLowerCase();
        arr = arr.filter((l) => {
          const pet = (l.petName || l.species || "").toLowerCase();
          const abName = (l.abilityName || "").toLowerCase();
          const abId = (l.abilityId || "").toLowerCase();
          const det = (typeof l.data === "string" ? l.data : (() => {
            try {
              return JSON.stringify(l.data);
            } catch {
              return "";
            }
          })()).toLowerCase();
          return pet.includes(qq) || abName.includes(qq) || abId.includes(qq) || det.includes(qq) || (l.petId || "").toLowerCase().includes(qq);
        });
      }
      arr.sort(
        (a, b) => sortDir === "asc" ? a.performedAt - b.performedAt : b.performedAt - a.performedAt
      );
      return arr;
    }
    function repaint() {
      bodyGrid.innerHTML = "";
      const arr = applyFilters();
      if (!arr.length) {
        const empty = document.createElement("div");
        empty.textContent = "No logs yet.";
        empty.style.opacity = "0.75";
        empty.style.gridColumn = "1 / -1";
        empty.style.padding = "8px";
        bodyGrid.appendChild(empty);
        return;
      }
      arr.forEach(row);
      if (sortDir === "asc") bodyGrid.scrollTop = bodyGrid.scrollHeight + 32;
      else bodyGrid.scrollTop = 0;
    }
    selAbility.onchange = () => {
      abilityFilter = selAbility.value;
      repaint();
    };
    selSort.onchange = () => {
      sortDir = selSort.value || "desc";
      repaint();
    };
    inputSearch.addEventListener("input", () => {
      q = inputSearch.value.trim();
      repaint();
    });
    btnClear.onclick = () => {
      try {
        PetsService.clearAbilityLogs();
      } catch {
      }
    };
    let stopWatcher = null;
    let unsubLogs = null;
    (async () => {
      try {
        stopWatcher = await PetsService.startAbilityLogsWatcher();
        rebuildAbilityOptions();
        unsubLogs = PetsService.onAbilityLogs((all) => {
          logs = all.map((e) => ({
            petId: e.petId,
            petName: e.name ?? null,
            species: e.species ?? null,
            abilityId: e.abilityId,
            abilityName: e.abilityName,
            data: e.data,
            performedAt: e.performedAt,
            time12: e.time12
          }));
          rebuildAbilityOptions();
          repaint();
        });
      } catch {
      }
    })();
    view.__cleanup__ = (() => {
      const prev = view.__cleanup__;
      return () => {
        try {
          unsubLogs?.();
        } catch {
        }
        try {
          stopWatcher?.();
        } catch {
        }
        try {
          prev?.();
        } catch {
        }
      };
    })();
    repaint();
  }
  function renderPetsMenu(root) {
    const ui = new Menu({ id: "pets", compact: true, windowSelector: ".qws-win" });
    ui.mount(root);
    ui.addTab("manager", "\u{1F9F0} Manager", (view) => renderManagerTab(view, ui));
    ui.addTab("logs", "\u{1F4DD} Logs", (view) => renderLogsTab(view, ui));
  }

  // src/services/misc.ts
  var LS_GHOST_KEY = "qws:player:ghostMode";
  var LS_DELAY_KEY = "qws:ghost:delayMs";
  var DEFAULT_DELAY_MS = 50;
  var readGhostEnabled = (def = false) => {
    try {
      return localStorage.getItem(LS_GHOST_KEY) === "1";
    } catch {
      return def;
    }
  };
  var writeGhostEnabled = (v) => {
    try {
      localStorage.setItem(LS_GHOST_KEY, v ? "1" : "0");
    } catch {
    }
  };
  var getGhostDelayMs = () => {
    try {
      const n = Math.floor(Number(localStorage.getItem(LS_DELAY_KEY)) || DEFAULT_DELAY_MS);
      return Math.max(5, n);
    } catch {
      return DEFAULT_DELAY_MS;
    }
  };
  var setGhostDelayMs = (n) => {
    const v = Math.max(5, Math.floor(n || DEFAULT_DELAY_MS));
    try {
      localStorage.setItem(LS_DELAY_KEY, String(v));
    } catch {
    }
  };
  function createGhostController() {
    let DELAY_MS = getGhostDelayMs();
    const KEYS = /* @__PURE__ */ new Set();
    const onKeyDownCapture = (e) => {
      const k = e.key.toLowerCase();
      const isMove = k === "z" || k === "q" || k === "s" || k === "d" || k === "w" || k === "a" || e.key === "ArrowUp" || e.key === "ArrowDown" || e.key === "ArrowLeft" || e.key === "ArrowRight";
      if (!isMove) return;
      e.preventDefault();
      e.stopImmediatePropagation();
      if (e.repeat) return;
      KEYS.add(k);
    };
    const onKeyUpCapture = (e) => {
      const k = e.key.toLowerCase();
      const isMove = k === "z" || k === "q" || k === "s" || k === "d" || k === "w" || k === "a" || e.key === "ArrowUp" || e.key === "ArrowDown" || e.key === "ArrowLeft" || e.key === "ArrowRight";
      if (!isMove) return;
      e.preventDefault();
      e.stopImmediatePropagation();
      KEYS.delete(k);
    };
    const onBlur = () => {
      KEYS.clear();
    };
    const onVisibility = () => {
      if (document.hidden) KEYS.clear();
    };
    function getDir() {
      let dx = 0, dy = 0;
      if (KEYS.has("z") || KEYS.has("w") || KEYS.has("arrowup")) dy -= 1;
      if (KEYS.has("s") || KEYS.has("arrowdown")) dy += 1;
      if (KEYS.has("q") || KEYS.has("a") || KEYS.has("arrowleft")) dx -= 1;
      if (KEYS.has("d") || KEYS.has("arrowright")) dx += 1;
      if (dx) dx = dx > 0 ? 1 : -1;
      if (dy) dy = dy > 0 ? 1 : -1;
      return { dx, dy };
    }
    let rafId = null;
    let lastTs = 0, accMs = 0, inMove = false;
    async function step(dx, dy) {
      let cur2;
      try {
        cur2 = await PlayerService.getPosition();
      } catch {
      }
      const cx = Math.round(cur2?.x ?? 0), cy = Math.round(cur2?.y ?? 0);
      try {
        await PlayerService.move(cx + dx, cy + dy);
      } catch {
      }
    }
    const CAPTURE = { capture: true };
    function frame(ts) {
      if (!lastTs) lastTs = ts;
      const dt = ts - lastTs;
      lastTs = ts;
      const { dx, dy } = getDir();
      accMs += dt;
      if (dx === 0 && dy === 0) {
        accMs = Math.min(accMs, DELAY_MS * 4);
        rafId = requestAnimationFrame(frame);
        return;
      }
      if (accMs >= DELAY_MS && !inMove) {
        accMs -= DELAY_MS;
        inMove = true;
        (async () => {
          try {
            await step(dx, dy);
          } finally {
            inMove = false;
          }
        })();
      }
      accMs = Math.min(accMs, DELAY_MS * 4);
      rafId = requestAnimationFrame(frame);
    }
    return {
      start() {
        if (rafId !== null) return;
        lastTs = 0;
        accMs = 0;
        inMove = false;
        window.addEventListener("keydown", onKeyDownCapture, CAPTURE);
        window.addEventListener("keyup", onKeyUpCapture, CAPTURE);
        window.addEventListener("blur", onBlur);
        document.addEventListener("visibilitychange", onVisibility);
        rafId = requestAnimationFrame(frame);
      },
      stop() {
        if (rafId !== null) {
          cancelAnimationFrame(rafId);
          rafId = null;
        }
        KEYS.clear();
        window.removeEventListener("keydown", onKeyDownCapture, CAPTURE);
        window.removeEventListener("keyup", onKeyUpCapture, CAPTURE);
        window.removeEventListener("blur", onBlur);
        document.removeEventListener("visibilitychange", onVisibility);
      },
      setSpeed(n) {
        const v = Math.max(5, Math.floor(n || DEFAULT_DELAY_MS));
        DELAY_MS = v;
        setGhostDelayMs(v);
      },
      getSpeed() {
        return DELAY_MS;
      }
    };
  }
  var selectedMap = /* @__PURE__ */ new Map();
  var seedStockByName = /* @__PURE__ */ new Map();
  var seedSourceCache = [];
  var NF_US = new Intl.NumberFormat("en-US");
  var formatNum = (n) => NF_US.format(Math.max(0, Math.floor(n || 0)));
  async function clearUiSelectionAtoms() {
    try {
      await Atoms.inventory.mySelectedItemName.set(null);
    } catch {
    }
    try {
      await Atoms.inventory.myValidatedSelectedItemIndex.set(null);
    } catch {
    }
    try {
      await Atoms.inventory.myPossiblyNoLongerValidSelectedItemIndex.set(null);
    } catch {
    }
  }
  var OVERLAY_ID = "qws-seeddeleter-overlay";
  var LIST_ID = "qws-seeddeleter-list";
  var SUMMARY_ID = "qws-seeddeleter-summary";
  function sleep(ms) {
    return new Promise((r) => setTimeout(r, ms));
  }
  function buildDisplayNameToSpeciesFromCatalog() {
    const map2 = /* @__PURE__ */ new Map();
    try {
      const cat = plantCatalog;
      for (const species of Object.keys(cat || {})) {
        const seedName = cat?.[species]?.seed?.name && String(cat?.[species]?.seed?.name) || `${species} Seed`;
        const arr = map2.get(seedName) ?? [];
        arr.push(species);
        map2.set(seedName, arr);
      }
    } catch {
    }
    return map2;
  }
  async function buildSpeciesStockFromInventory() {
    const inv = await getMySeedInventory();
    const stock = /* @__PURE__ */ new Map();
    for (const it of inv) {
      const q = Math.max(0, Math.floor(it.quantity || 0));
      if (q > 0) stock.set(it.species, (stock.get(it.species) ?? 0) + q);
    }
    return stock;
  }
  function allocateForRequestedName(requested, nameToSpecies, speciesStock) {
    let remaining = Math.max(0, Math.floor(requested.qty || 0));
    let candidates = nameToSpecies.get(requested.name) ?? [];
    if (!candidates.length && / seed$/i.test(requested.name)) {
      const fallbackSpecies = requested.name.replace(/\s+seed$/i, "");
      if (plantCatalog?.[fallbackSpecies]) candidates = [fallbackSpecies];
    }
    if (!candidates.length || remaining <= 0) return [];
    const ranked = candidates.map((sp) => ({ sp, available: speciesStock.get(sp) ?? 0 })).filter((x) => x.available > 0).sort((a, b) => b.available - a.available);
    const out = [];
    for (const { sp, available } of ranked) {
      if (remaining <= 0) break;
      const take = Math.min(available, remaining);
      if (take > 0) {
        out.push({ species: sp, qty: take });
        remaining -= take;
      }
    }
    return out;
  }
  var _seedDeleteAbort = null;
  var _seedDeleteBusy = false;
  async function deleteSelectedSeeds(opts = {}) {
    if (_seedDeleteBusy) {
      await toastSimple("Seed deleter", "Deletion already in progress.", "info");
      return;
    }
    const batchSize = Math.max(1, Math.floor(opts.batchSize ?? 25));
    const delayMs = Math.max(0, Math.floor(opts.delayMs ?? 16));
    const selection = (opts.selection && Array.isArray(opts.selection) ? opts.selection : Array.from(selectedMap.values())).map((s) => ({ name: s.name, qty: Math.max(0, Math.floor(s.qty || 0)) })).filter((s) => s.qty > 0);
    if (selection.length === 0) {
      await toastSimple("Seed deleter", "No seeds selected.", "info");
      return;
    }
    const nameToSpecies = buildDisplayNameToSpeciesFromCatalog();
    const speciesStock = await buildSpeciesStockFromInventory();
    const allocatedBySpecies = /* @__PURE__ */ new Map();
    let requestedTotal = 0, cappedTotal = 0;
    for (const req of selection) {
      requestedTotal += req.qty;
      const chunks = allocateForRequestedName(req, nameToSpecies, speciesStock);
      const okForThis = chunks.reduce((a, c) => a + c.qty, 0);
      cappedTotal += okForThis;
      for (const c of chunks) {
        allocatedBySpecies.set(c.species, (allocatedBySpecies.get(c.species) ?? 0) + c.qty);
      }
    }
    if (cappedTotal <= 0) {
      await toastSimple("Seed deleter", "Nothing to delete (not in inventory).", "info");
      return;
    }
    if (cappedTotal < requestedTotal) {
      await toastSimple(
        "Seed deleter",
        `Requested ${formatNum(requestedTotal)} but only ${formatNum(cappedTotal)} available. Proceeding.`,
        "info"
      );
    }
    const tasks = Array.from(allocatedBySpecies.entries()).map(([species, qty]) => ({ species, qty: Math.max(0, Math.floor(qty || 0)) })).filter((t) => t.qty > 0);
    const total = tasks.reduce((acc, t) => acc + t.qty, 0);
    if (total <= 0) {
      await toastSimple("Seed deleter", "Nothing to delete.", "info");
      return;
    }
    _seedDeleteBusy = true;
    const abort = new AbortController();
    _seedDeleteAbort = abort;
    try {
      await toastSimple("Seed deleter", `Deleting ${formatNum(total)} seeds across ${tasks.length} species...`, "info");
      let done = 0;
      for (const t of tasks) {
        let remaining = t.qty;
        while (remaining > 0) {
          if (abort.signal.aborted) throw new Error("Deletion cancelled.");
          const n = Math.min(batchSize, remaining);
          for (let i = 0; i < n; i++) {
            try {
              await PlayerService.wish(t.species);
            } catch {
            }
          }
          done += n;
          remaining -= n;
          try {
            opts.onProgress?.({ done, total, species: t.species, remainingForSpecies: remaining });
            window.dispatchEvent(new CustomEvent("qws:seeddeleter:progress", {
              detail: { done, total, species: t.species, remainingForSpecies: remaining }
            }));
          } catch {
          }
          if (delayMs > 0 && remaining > 0) await sleep(delayMs);
        }
      }
      if (!opts.keepSelection) selectedMap.clear();
      try {
        window.dispatchEvent(new CustomEvent("qws:seeddeleter:done", { detail: { total, speciesCount: tasks.length } }));
      } catch {
      }
      await toastSimple("Seed deleter", `Deleted ${formatNum(total)} seeds (${tasks.length} species).`, "success");
    } catch (e) {
      const msg = e?.message || "Deletion failed.";
      try {
        window.dispatchEvent(new CustomEvent("qws:seeddeleter:error", { detail: { message: msg } }));
      } catch {
      }
      await toastSimple("Seed deleter", msg, "error");
    } finally {
      _seedDeleteBusy = false;
      _seedDeleteAbort = null;
    }
  }
  function cancelSeedDeletion() {
    try {
      _seedDeleteAbort?.abort();
    } catch {
    }
  }
  function isSeedDeletionRunning() {
    return _seedDeleteBusy;
  }
  try {
    window.addEventListener("qws:seeddeleter:apply", async (e) => {
      try {
        const selection = Array.isArray(e?.detail?.selection) ? e.detail.selection : void 0;
        await deleteSelectedSeeds({ selection, batchSize: 25, delayMs: 16, keepSelection: false });
      } catch {
      }
    });
  } catch {
  }
  function seedDisplayNameFromSpecies(species) {
    try {
      const node = plantCatalog?.[species];
      const n = node?.seed?.name;
      if (typeof n === "string" && n) return n;
    } catch {
    }
    return `${species} Seed`;
  }
  function normalizeSeedItem(x, _idx) {
    if (!x || typeof x !== "object") return null;
    const species = typeof x.species === "string" ? x.species.trim() : "";
    const itemType = x.itemType === "Seed" ? "Seed" : null;
    const quantity = Number.isFinite(x.quantity) ? Math.max(0, Math.floor(x.quantity)) : 0;
    if (!species || itemType !== "Seed" || quantity <= 0) return null;
    return { species, itemType: "Seed", quantity, id: `seed:${species}` };
  }
  async function getMySeedInventory() {
    try {
      const raw = await Atoms.inventory.mySeedInventory.get();
      if (!Array.isArray(raw)) return [];
      const out = [];
      raw.forEach((x, i) => {
        const s = normalizeSeedItem(x, i);
        if (s) out.push(s);
      });
      return out;
    } catch {
      return [];
    }
  }
  function buildInventoryShapeFrom(items) {
    return { items, favoritedItemIds: [] };
  }
  function setStyles(el2, styles) {
    Object.assign(el2.style, styles);
  }
  function styleOverlayBox(div) {
    div.id = OVERLAY_ID;
    setStyles(div, {
      position: "fixed",
      left: "12px",
      top: "12px",
      zIndex: "999999",
      display: "grid",
      gridTemplateRows: "auto auto 1px 1fr auto",
      gap: "6px",
      minWidth: "320px",
      maxWidth: "420px",
      maxHeight: "52vh",
      padding: "8px",
      border: "1px solid #39424c",
      borderRadius: "10px",
      background: "rgba(22,27,34,0.92)",
      boxShadow: "0 10px 30px rgba(0,0,0,0.35)",
      backdropFilter: "blur(2px)",
      userSelect: "none",
      fontFamily: "ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Arial",
      fontSize: "12px",
      lineHeight: "1.25"
    });
    div.dataset["qwsSeedDeleter"] = "1";
  }
  function makeDraggable(root, handle) {
    let dragging = false;
    let ox = 0, oy = 0;
    const onDown = (e) => {
      dragging = true;
      const r = root.getBoundingClientRect();
      ox = e.clientX - r.left;
      oy = e.clientY - r.top;
      document.addEventListener("mousemove", onMove);
      document.addEventListener("mouseup", onUp, { once: true });
    };
    const onMove = (e) => {
      if (!dragging) return;
      const nx = Math.max(4, e.clientX - ox);
      const ny = Math.max(4, e.clientY - oy);
      root.style.left = `${nx}px`;
      root.style.top = `${ny}px`;
    };
    const onUp = () => {
      dragging = false;
      document.removeEventListener("mousemove", onMove);
    };
    handle.addEventListener("mousedown", onDown);
  }
  function createButton(label2, styleOverride) {
    const b = document.createElement("button");
    b.textContent = label2;
    setStyles(b, {
      padding: "4px 8px",
      borderRadius: "8px",
      border: "1px solid #4446",
      background: "#161b22",
      color: "#E7EEF7",
      cursor: "pointer",
      fontWeight: "600",
      fontSize: "12px",
      ...styleOverride
    });
    b.onmouseenter = () => b.style.borderColor = "#6aa1";
    b.onmouseleave = () => b.style.borderColor = "#4446";
    return b;
  }
  var overlayKeyGuardsOn = false;
  function isInsideOverlay(el2) {
    return !!(el2 && el2.closest?.(`#${OVERLAY_ID}`));
  }
  function keyGuardCapture(e) {
    const ae = document.activeElement;
    if (!isInsideOverlay(ae)) return;
    const tag = (ae?.tagName || "").toLowerCase();
    const isEditable = tag === "input" || tag === "textarea" || ae && ae.isContentEditable;
    if (!isEditable) return;
    if (/^[0-9]$/.test(e.key)) {
      e.stopImmediatePropagation();
    }
  }
  function installOverlayKeyGuards() {
    if (overlayKeyGuardsOn) return;
    window.addEventListener("keydown", keyGuardCapture, { capture: true });
    overlayKeyGuardsOn = true;
  }
  function removeOverlayKeyGuards() {
    if (!overlayKeyGuardsOn) return;
    window.removeEventListener("keydown", keyGuardCapture, { capture: true });
    overlayKeyGuardsOn = false;
  }
  async function closeSeedInventoryPanel() {
    try {
      await fakeInventoryHide();
    } catch {
      try {
        document.dispatchEvent(new KeyboardEvent("keydown", { key: "Escape" }));
      } catch {
      }
    }
  }
  function createSeedOverlay() {
    const box = document.createElement("div");
    styleOverlayBox(box);
    const header = document.createElement("div");
    setStyles(header, { display: "flex", alignItems: "center", gap: "4px", cursor: "move" });
    const title = document.createElement("div");
    title.textContent = "\u{1F3AF} Selection mode";
    setStyles(title, { fontWeight: "700", fontSize: "13px" });
    const hint = document.createElement("div");
    hint.textContent = "Click seeds in inventory to toggle selection.";
    setStyles(hint, { opacity: "0.8", fontSize: "11px" });
    const hr = document.createElement("div");
    setStyles(hr, { height: "1px", background: "#2d333b" });
    const list = document.createElement("div");
    list.id = LIST_ID;
    setStyles(list, {
      minHeight: "44px",
      maxHeight: "26vh",
      overflow: "auto",
      padding: "4px",
      border: "1px dashed #39424c",
      borderRadius: "8px",
      background: "rgba(15,19,24,0.84)",
      userSelect: "text"
    });
    const actions = document.createElement("div");
    setStyles(actions, { display: "flex", justifyContent: "space-between", alignItems: "center", gap: "8px" });
    const summary = document.createElement("div");
    summary.id = SUMMARY_ID;
    setStyles(summary, { fontWeight: "600" });
    summary.textContent = "Selected: 0 species \xB7 0 seeds";
    const btnClear = createButton("Clear");
    btnClear.title = "Clear selection";
    btnClear.onclick = async () => {
      selectedMap.clear();
      refreshList();
      updateSummary();
      await clearUiSelectionAtoms();
      await repatchFakeSeedInventoryWithSelection();
    };
    _btnConfirm = createButton("Confirm", { background: "#1F2328CC" });
    _btnConfirm.disabled = true;
    _btnConfirm.onclick = async () => {
      await closeSeedInventoryPanel();
    };
    header.append(title);
    actions.append(summary, btnClear, _btnConfirm);
    box.append(header, hint, hr, list, actions);
    makeDraggable(box, header);
    return box;
  }
  function showSeedOverlay() {
    if (document.getElementById(OVERLAY_ID)) return;
    const el2 = createSeedOverlay();
    document.body.appendChild(el2);
    installOverlayKeyGuards();
    refreshList();
    updateSummary();
  }
  function hideSeedOverlay() {
    const el2 = document.getElementById(OVERLAY_ID);
    if (el2) el2.remove();
    removeOverlayKeyGuards();
  }
  var _btnConfirm = null;
  var unsubSelectedName = null;
  function renderListRow(item) {
    const row = document.createElement("div");
    setStyles(row, {
      display: "grid",
      gridTemplateColumns: "1fr auto",
      alignItems: "center",
      gap: "6px",
      padding: "4px 6px",
      borderBottom: "1px dashed #2d333b"
    });
    const name = document.createElement("div");
    name.textContent = item.name;
    setStyles(name, {
      fontSize: "12px",
      fontWeight: "600",
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    });
    const controls = document.createElement("div");
    setStyles(controls, { display: "flex", alignItems: "center", gap: "6px" });
    const qty = document.createElement("input");
    qty.type = "number";
    qty.min = "1";
    qty.max = String(Math.max(1, item.maxQty));
    qty.step = "1";
    qty.value = String(item.qty);
    qty.className = "qmm-input";
    setStyles(qty, {
      width: "68px",
      height: "28px",
      border: "1px solid #4446",
      borderRadius: "8px",
      background: "rgba(15,19,24,0.90)",
      padding: "0 8px",
      fontSize: "12px"
    });
    const swallowDigits = (e) => {
      if (/^[0-9]$/.test(e.key)) {
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    };
    qty.addEventListener("keydown", swallowDigits);
    qty.onchange = () => {
      const v = Math.min(item.maxQty, Math.max(1, Math.floor(Number(qty.value) || 1)));
      qty.value = String(v);
      const cur2 = selectedMap.get(item.name);
      if (!cur2) return;
      cur2.qty = v;
      selectedMap.set(item.name, cur2);
      updateSummary();
    };
    qty.oninput = qty.onchange;
    const remove = createButton("Remove", { background: "transparent" });
    remove.onclick = async () => {
      selectedMap.delete(item.name);
      refreshList();
      updateSummary();
      await repatchFakeSeedInventoryWithSelection();
    };
    controls.append(qty, remove);
    row.append(name, controls);
    return row;
  }
  function refreshList() {
    const list = document.getElementById(LIST_ID);
    if (!list) return;
    list.innerHTML = "";
    const entries = Array.from(selectedMap.values()).sort((a, b) => a.name.localeCompare(b.name));
    if (entries.length === 0) {
      const empty = document.createElement("div");
      empty.textContent = "No seeds selected.";
      empty.style.opacity = "0.8";
      list.appendChild(empty);
      return;
    }
    for (const it of entries) list.appendChild(renderListRow(it));
  }
  function totalSelected() {
    let species = 0, qty = 0;
    for (const it of selectedMap.values()) {
      species += 1;
      qty += it.qty;
    }
    return { species, qty };
  }
  function updateSummary() {
    const { species, qty } = totalSelected();
    const el2 = document.getElementById(SUMMARY_ID);
    if (el2) el2.textContent = `Selected: ${species} species \xB7 ${formatNum(qty)} seeds`;
    if (_btnConfirm) {
      _btnConfirm.textContent = "Confirm";
      _btnConfirm.disabled = qty <= 0;
      _btnConfirm.style.opacity = qty <= 0 ? "0.6" : "1";
      _btnConfirm.style.cursor = qty <= 0 ? "not-allowed" : "pointer";
    }
  }
  async function repatchFakeSeedInventoryWithSelection() {
    const selectedNames = new Set(Array.from(selectedMap.keys()));
    const filtered = (Array.isArray(seedSourceCache) ? seedSourceCache : []).filter((s) => {
      const disp = seedDisplayNameFromSpecies(s.species);
      return !selectedNames.has(disp);
    });
    try {
      await fakeInventoryShow({ items: filtered, favoritedItemIds: [] }, { open: false });
    } catch {
    }
  }
  async function beginSelectedNameListener() {
    if (unsubSelectedName) return;
    const unsub = await Atoms.inventory.mySelectedItemName.onChange(async (name) => {
      const n = (name || "").trim();
      if (!n) return;
      if (selectedMap.has(n)) {
        selectedMap.delete(n);
      } else {
        const max = Math.max(1, seedStockByName.get(n) ?? 1);
        selectedMap.set(n, { name: n, qty: max, maxQty: max });
      }
      refreshList();
      updateSummary();
      await clearUiSelectionAtoms();
      await repatchFakeSeedInventoryWithSelection();
    });
    unsubSelectedName = typeof unsub === "function" ? unsub : null;
  }
  async function endSelectedNameListener() {
    const fn = unsubSelectedName;
    unsubSelectedName = null;
    try {
      await fn?.();
    } catch {
    }
  }
  async function openSeedInventoryPreview() {
    try {
      const src = await getMySeedInventory();
      if (!src.length) {
        await toastSimple("Seed inventory", "No seeds to display.", "info");
        return;
      }
      await fakeInventoryShow(buildInventoryShapeFrom(src), { open: true });
    } catch (e) {
      await toastSimple("Seed inventory", e?.message || "Failed to open seed inventory.", "error");
    }
  }
  async function openSeedSelectorFlow(setWindowVisible) {
    try {
      setWindowVisible?.(false);
      seedSourceCache = await getMySeedInventory();
      seedStockByName = /* @__PURE__ */ new Map();
      for (const s of seedSourceCache) {
        const display = seedDisplayNameFromSpecies(s.species);
        seedStockByName.set(display, Math.max(1, Math.floor(s.quantity || 0)));
      }
      selectedMap.clear();
      showSeedOverlay();
      await beginSelectedNameListener();
      await fakeInventoryShow(buildInventoryShapeFrom(seedSourceCache), { open: true });
      if (await isInventoryPanelOpen()) {
        await waitInventoryPanelClosed();
      }
    } catch (e) {
      await toastSimple("Seed inventory", e?.message || "Failed to open seed selector.", "error");
    } finally {
      await endSelectedNameListener();
      hideSeedOverlay();
      seedSourceCache = [];
      seedStockByName.clear();
      setWindowVisible?.(true);
    }
  }
  var MiscService = {
    // ghost
    readGhostEnabled,
    writeGhostEnabled,
    getGhostDelayMs,
    setGhostDelayMs,
    createGhostController,
    // seeds
    getMySeedInventory,
    openSeedInventoryPreview,
    openSeedSelectorFlow,
    //delete
    deleteSelectedSeeds,
    cancelSeedDeletion,
    isSeedDeletionRunning,
    getCurrentSeedSelection() {
      return Array.from(selectedMap.values());
    },
    clearSeedSelection() {
      selectedMap.clear();
    }
  };

  // src/ui/menus/misc.ts
  function sectionFramed3(titleText, content, maxW = 440) {
    const s = document.createElement("div");
    s.style.display = "grid";
    s.style.gap = "6px";
    s.style.textAlign = "left";
    s.style.border = "1px solid #4446";
    s.style.borderRadius = "10px";
    s.style.padding = "10px";
    s.style.background = "#1f2328";
    s.style.boxShadow = "0 0 0 1px #0002 inset";
    s.style.width = `min(${maxW}px, 100%)`;
    const h = document.createElement("div");
    h.textContent = titleText;
    h.style.fontWeight = "700";
    h.style.textAlign = "center";
    h.style.opacity = "0.95";
    h.style.fontSize = "14px";
    s.append(h, content);
    return s;
  }
  function formGrid() {
    const g = document.createElement("div");
    g.style.display = "grid";
    g.style.gridTemplateColumns = "max-content 1fr";
    g.style.columnGap = "6px";
    g.style.rowGap = "6px";
    g.style.alignItems = "center";
    return g;
  }
  function actionsBox() {
    const d = document.createElement("div");
    d.style.display = "flex";
    d.style.justifyContent = "flex-start";
    d.style.alignItems = "center";
    d.style.gap = "6px";
    d.style.flexWrap = "wrap";
    return d;
  }
  function applyNeutralKind(b, kind) {
    b.style.border = "1px solid #4446";
    b.style.color = "#E7EEF7";
    if (kind === "primary") {
      b.style.background = "#1F2328CC";
    } else {
      b.style.background = "#161b22";
    }
  }
  function hoverNeutralKind(b, kind) {
    b.style.borderColor = "#6aa1";
    b.style.background = kind === "primary" ? "#23282dcc" : "#1b2026";
  }
  function styleButton(b, kind = "secondary") {
    b.dataset.kind = kind;
    b.style.padding = "4px 10px";
    b.style.borderRadius = "8px";
    b.style.cursor = "pointer";
    b.style.fontSize = "13px";
    b.style.fontWeight = "600";
    b.style.transition = "background 120ms, border-color 120ms, opacity 120ms, filter 120ms";
    applyNeutralKind(b, kind);
    b.onmouseenter = () => {
      if (!b.disabled) hoverNeutralKind(b, kind);
    };
    b.onmouseleave = () => {
      if (!b.disabled) applyNeutralKind(b, kind);
    };
  }
  function setButtonEnabled(b, enabled) {
    b.disabled = !enabled;
    if (enabled) {
      b.style.opacity = "1";
      b.style.cursor = "pointer";
      b.style.filter = "none";
      applyNeutralKind(b, b.dataset.kind || "secondary");
    } else {
      b.style.opacity = "0.6";
      b.style.cursor = "not-allowed";
      b.style.filter = "grayscale(10%)";
    }
  }
  var NF_US2 = new Intl.NumberFormat("en-US");
  var formatNum2 = (n) => NF_US2.format(Math.max(0, Math.floor(n || 0)));
  async function renderMiscMenu(container) {
    const ui = new Menu({ id: "misc", compact: true });
    ui.mount(container);
    const view = ui.root.querySelector(".qmm-views");
    view.innerHTML = "";
    view.style.display = "grid";
    view.style.gap = "8px";
    view.style.minHeight = "0";
    view.style.justifyItems = "center";
    const secPlayer = (() => {
      const row = document.createElement("div");
      row.style.display = "flex";
      row.style.alignItems = "center";
      row.style.gap = "12px";
      row.style.flexWrap = "wrap";
      const pair = (labelText, controlEl, labelId) => {
        const wrap = document.createElement("div");
        wrap.style.display = "inline-flex";
        wrap.style.alignItems = "center";
        wrap.style.gap = "6px";
        const lab = ui.label(labelText);
        lab.style.fontSize = "13px";
        lab.style.margin = "0";
        lab.style.justifySelf = "start";
        if (labelId) lab.id = labelId;
        wrap.append(lab, controlEl);
        return wrap;
      };
      const ghostSwitch = ui.switch(MiscService.readGhostEnabled(false));
      ghostSwitch.id = "player.ghostMode";
      const ghostPair = pair("Ghost", ghostSwitch, "label.ghost");
      const delayInput = ui.inputNumber(10, 1e3, 5, 50);
      delayInput.id = "player.moveDelay";
      const delayWrap = delayInput.wrap ?? delayInput;
      delayWrap.style && (delayWrap.style.margin = "0");
      delayInput.style && (delayInput.style.width = "84px");
      const delayPair = pair("Delay (ms)", delayWrap, "label.delay");
      row.append(ghostPair, delayPair);
      const ghost = MiscService.createGhostController();
      delayInput.value = String(MiscService.getGhostDelayMs());
      delayInput.addEventListener("change", () => {
        const v = Math.max(10, Math.min(1e3, Math.floor(Number(delayInput.value) || 50)));
        delayInput.value = String(v);
        ghost.setSpeed?.(v);
        MiscService.setGhostDelayMs(v);
      });
      if (ghostSwitch.checked) ghost.start();
      ghostSwitch.onchange = () => {
        const on = !!ghostSwitch.checked;
        MiscService.writeGhostEnabled(on);
        on ? ghost.start() : ghost.stop();
      };
      row.__cleanup__ = () => {
        try {
          ghost.stop();
        } catch {
        }
      };
      return sectionFramed3("\u{1F3AE} Player controls", row, 440);
    })();
    const secSeed = (() => {
      const grid = formGrid();
      const selLabel = ui.label("Selected");
      selLabel.style.fontSize = "13px";
      selLabel.style.margin = "0";
      selLabel.style.justifySelf = "start";
      const selValue = document.createElement("div");
      selValue.id = "misc.seedDeleter.summary";
      selValue.style.fontSize = "13px";
      selValue.style.opacity = "0.9";
      selValue.textContent = "0 species \xB7 0 seeds";
      grid.append(selLabel, selValue);
      const actLabel = ui.label("Actions");
      actLabel.style.fontSize = "13px";
      actLabel.style.margin = "0";
      actLabel.style.justifySelf = "start";
      const actions = actionsBox();
      const btnSelect = document.createElement("button");
      btnSelect.textContent = "Select seeds";
      styleButton(btnSelect, "primary");
      const btnDelete = document.createElement("button");
      btnDelete.textContent = "Delete";
      styleButton(btnDelete, "secondary");
      setButtonEnabled(btnDelete, false);
      const btnClear = document.createElement("button");
      btnClear.textContent = "Clear";
      styleButton(btnClear, "secondary");
      setButtonEnabled(btnClear, false);
      actions.append(btnSelect, btnDelete, btnClear);
      grid.append(actLabel, actions);
      function readSelection() {
        const sel = MiscService.getCurrentSeedSelection?.() || [];
        const speciesCount = sel.length;
        let totalQty = 0;
        for (const it of sel) totalQty += Math.max(0, Math.floor(it?.qty || 0));
        return { sel, speciesCount, totalQty };
      }
      function updateSummaryUI() {
        const { speciesCount, totalQty } = readSelection();
        selValue.textContent = `${speciesCount} species \xB7 ${formatNum2(totalQty)} seeds`;
        const has = speciesCount > 0 && totalQty > 0;
        setButtonEnabled(btnDelete, has);
        setButtonEnabled(btnClear, has);
      }
      btnSelect.onclick = async () => {
        await MiscService.openSeedSelectorFlow(ui.setWindowVisible.bind(ui));
        updateSummaryUI();
      };
      btnClear.onclick = () => {
        try {
          MiscService.clearSeedSelection?.();
        } catch {
        }
        updateSummaryUI();
      };
      btnDelete.onclick = async () => {
        await MiscService.deleteSelectedSeeds();
        updateSummaryUI();
      };
      return sectionFramed3("\u{1F5D1}\uFE0F Seed deleter", grid, 440);
    })();
    const content = document.createElement("div");
    content.style.display = "grid";
    content.style.gap = "8px";
    content.style.justifyItems = "center";
    content.append(secPlayer, secSeed);
    view.appendChild(content);
    view.__cleanup__ = () => {
      try {
        secPlayer.__cleanup__?.();
      } catch {
      }
      try {
        secSeed.__cleanup__?.();
      } catch {
      }
    };
  }

  // src/ui/menus/notifier.ts
  function renderShopTab(view, ui) {
    view.innerHTML = "";
    view.style.position = "relative";
    view.style.overflow = "hidden";
    view.style.minHeight = "0";
    const setSwitchCapState = (wrap2, capped) => {
      if (capped) {
        wrap2.setAttribute("aria-disabled", "true");
        wrap2.style.opacity = "0.5";
        wrap2.style.pointerEvents = "none";
        wrap2.style.cursor = "not-allowed";
        wrap2.title = "Max owned \u2014 notifications disabled";
      } else {
        wrap2.removeAttribute("aria-disabled");
        wrap2.style.opacity = "";
        wrap2.style.pointerEvents = "";
        wrap2.style.cursor = "";
        wrap2.removeAttribute("title");
      }
    };
    const mkSwitch = (id, onToggle) => {
      const wrap2 = document.createElement("label");
      wrap2.style.display = "inline-flex";
      wrap2.style.alignItems = "center";
      wrap2.style.justifyContent = "center";
      wrap2.style.width = "100%";
      wrap2.style.padding = "4px 6px";
      wrap2.style.userSelect = "none";
      wrap2.setAttribute("role", "switch");
      wrap2.setAttribute("aria-checked", "false");
      const box = document.createElement("span");
      box.style.position = "relative";
      box.style.width = "42px";
      box.style.height = "24px";
      box.style.borderRadius = "999px";
      box.style.background = "#1f2328";
      box.style.border = "1px solid #4446";
      box.style.display = "inline-block";
      box.style.boxShadow = "inset 0 0 0 1px #0005";
      const knob = document.createElement("span");
      knob.style.position = "absolute";
      knob.style.top = "50%";
      knob.style.left = "3px";
      knob.style.transform = "translateY(-50%)";
      knob.style.width = "18px";
      knob.style.height = "18px";
      knob.style.borderRadius = "50%";
      knob.style.background = "#e7eef7";
      knob.style.boxShadow = "0 1px 2px rgba(0,0,0,.7)";
      knob.style.transition = "left 160ms ease, transform 160ms ease";
      const input = document.createElement("input");
      input.type = "checkbox";
      if (id) input.id = id;
      input.style.position = "absolute";
      input.style.opacity = "0";
      input.style.pointerEvents = "none";
      input.tabIndex = -1;
      const apply = (on) => {
        input.checked = on;
        wrap2.setAttribute("aria-checked", on ? "true" : "false");
        knob.style.left = on ? "21px" : "3px";
        knob.style.transform = on ? "translateY(-50%) scale(1.02)" : "translateY(-50%) scale(1)";
        if (on) {
          box.style.background = "linear-gradient(180deg, #2b5cff, #1e40ff)";
          box.style.borderColor = "#7aa2ff";
          box.style.boxShadow = "0 0 0 2px #7aa2ff55, inset 0 0 0 1px #0005";
        } else {
          box.style.background = "#1f2328";
          box.style.borderColor = "#4446";
          box.style.boxShadow = "inset 0 0 0 1px #0005";
        }
      };
      input.disabled = true;
      wrap2.addEventListener("mousedown", (e) => e.preventDefault());
      wrap2.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        apply(!input.checked);
        onToggle?.(input.checked);
      });
      box.appendChild(knob);
      wrap2.appendChild(input);
      wrap2.appendChild(box);
      apply(false);
      return wrap2;
    };
    const setSwitchVisual = (wrap2, checked) => {
      const input = wrap2.querySelector("input");
      const box = wrap2.querySelector("span");
      const knob = box?.querySelector("span");
      if (!input || !box || !knob) return;
      input.checked = !!checked;
      knob.style.left = checked ? "21px" : "3px";
      knob.style.transform = checked ? "translateY(-50%) scale(1.02)" : "translateY(-50%) scale(1)";
      if (checked) {
        box.style.background = "linear-gradient(180deg, #2b5cff, #1e40ff)";
        box.style.borderColor = "#7aa2ff";
        box.style.boxShadow = "0 0 0 2px #7aa2ff55, inset 0 0 0 1px #0005";
        wrap2.setAttribute("aria-checked", "true");
      } else {
        box.style.background = "#1f2328";
        box.style.borderColor = "#4446";
        box.style.boxShadow = "inset 0 0 0 1px #0005";
        wrap2.setAttribute("aria-checked", "false");
      }
    };
    const wrapCell = (child) => {
      const d = document.createElement("div");
      d.style.display = "flex";
      d.style.alignItems = "center";
      d.style.justifyContent = "center";
      d.style.borderBottom = "1px solid #ffffff12";
      d.style.padding = "4px 6px";
      d.style.boxSizing = "border-box";
      d.appendChild(child);
      return d;
    };
    const mkHeadCell = (txt, align = "center") => {
      const el2 = document.createElement("div");
      el2.textContent = txt;
      el2.style.fontWeight = "600";
      el2.style.opacity = "0.9";
      el2.style.padding = "4px 6px";
      el2.style.display = "flex";
      el2.style.alignItems = "center";
      el2.style.justifyContent = align === "left" ? "flex-start" : "center";
      return el2;
    };
    function rarityBadge(raw) {
      const rarity2 = String(raw || "").trim();
      const key2 = (() => {
        const k = rarity2.toLowerCase();
        if (k === "mythical") return "Mythical";
        if (k === "celestial") return "Celestial";
        if (k === "divine") return "Divine";
        if (k === "legendary") return "Legendary";
        if (k === "rare") return "Rare";
        if (k === "uncommon") return "Uncommon";
        if (k === "common") return "Common";
        return rarity2 || "\u2014";
      })();
      const COLORS = {
        Common: "#E7E7E7",
        Uncommon: "#67BD4D",
        Rare: "#0071C6",
        Legendary: "#FFC734",
        Mythical: "#9944A7",
        Divine: "#FF7835",
        Celestial: null
        // géré par le gradient animé
      };
      const darkText = /* @__PURE__ */ new Set(["Common", "Uncommon", "Legendary", "Divine"]);
      const el2 = document.createElement("div");
      el2.textContent = key2;
      Object.assign(el2.style, {
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        padding: "4px 8px",
        borderRadius: "5px",
        fontSize: "12px",
        fontWeight: "700",
        margin: "2px auto",
        color: darkText.has(key2) ? "#0b0b0b" : "#ffffff",
        boxShadow: "0 0 0 1px #0006 inset",
        lineHeight: "1.1",
        whiteSpace: "nowrap"
      });
      if (key2 === "Celestial") {
        if (!document.getElementById("qws-celestial-kf")) {
          const style2 = document.createElement("style");
          style2.id = "qws-celestial-kf";
          style2.textContent = `
@keyframes qwsCelestialShift {
  0%   { background-position: 0% 50%; }
  50%  { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}`;
          document.head.appendChild(style2);
        }
        el2.style.background = `linear-gradient(130deg,
        rgb(0,180,216) 0%,
        rgb(124,42,232) 40%,
        rgb(160,0,126) 60%,
        rgb(255,215,0) 100%)`;
        el2.style.backgroundSize = "200% 200%";
        el2.style.animation = "qwsCelestialShift 4s linear infinite";
      } else {
        el2.style.background = COLORS[key2] || "#444";
      }
      return el2;
    }
    const wrap = document.createElement("div");
    wrap.style.display = "grid";
    wrap.style.gridTemplateRows = "auto 1fr";
    wrap.style.gap = "10px";
    wrap.style.height = "54vh";
    wrap.style.overflow = "hidden";
    wrap.style.minHeight = "0";
    view.appendChild(wrap);
    const header = document.createElement("div");
    header.style.display = "flex";
    header.style.flexWrap = "wrap";
    header.style.alignItems = "center";
    header.style.gap = "8px";
    header.style.border = "1px solid #4445";
    header.style.borderRadius = "10px";
    header.style.padding = "8px 10px";
    header.style.background = "#0f1318";
    wrap.appendChild(header);
    const lblType = ui.label("Type");
    const selType = document.createElement("select");
    selType.className = "qmm-input";
    selType.style.minWidth = "150px";
    selType.id = "shop.filter.type";
    [
      ["all", "All"],
      ["seed", "Seeds"],
      ["egg", "Eggs"],
      ["tool", "Tools"],
      ["decor", "Decor"]
    ].forEach(([v, t]) => {
      const o = document.createElement("option");
      o.value = v;
      o.textContent = t;
      selType.appendChild(o);
    });
    selType.value = "all";
    const lblRarity = ui.label("Rarity");
    const selRarity = document.createElement("select");
    selRarity.className = "qmm-input";
    selRarity.style.minWidth = "160px";
    selRarity.id = "shop.filter.rarity";
    [
      ["all", "All"],
      ["common", "Common"],
      ["uncommon", "Uncommon"],
      ["rare", "Rare"],
      ["legendary", "Legendary"],
      ["mythical", "Mythical"],
      ["divine", "Divine"],
      ["celestial", "Celestial"]
    ].forEach(([v, t]) => {
      const o = document.createElement("option");
      o.value = v;
      o.textContent = t;
      selRarity.appendChild(o);
    });
    selRarity.value = "all";
    const followedBadge = document.createElement("div");
    followedBadge.id = "shop.followedCount";
    followedBadge.textContent = "Followed: 0";
    followedBadge.title = "Items with Overlay enabled";
    followedBadge.style.padding = "6px 10px";
    followedBadge.style.borderRadius = "999px";
    followedBadge.style.border = "1px solid #4445";
    followedBadge.style.background = "#1f2328";
    followedBadge.style.color = "#e7eef7";
    followedBadge.style.fontWeight = "600";
    followedBadge.style.marginLeft = "auto";
    followedBadge.style.width = "115px";
    header.append(lblType, selType, lblRarity, selRarity, followedBadge);
    const card = document.createElement("div");
    card.style.border = "1px solid #4445";
    card.style.borderRadius = "10px";
    card.style.padding = "10px";
    card.style.background = "#0f1318";
    card.style.overflow = "hidden";
    card.style.display = "grid";
    card.style.gridTemplateRows = "auto 1fr";
    card.style.minHeight = "0";
    wrap.appendChild(card);
    const headerGrid = document.createElement("div");
    const COLS = "minmax(180px, 1fr) 9rem 7rem";
    headerGrid.style.display = "grid";
    headerGrid.style.gridTemplateColumns = COLS;
    headerGrid.style.justifyContent = "start";
    headerGrid.style.columnGap = "0";
    headerGrid.style.borderBottom = "1px solid #ffffff1a";
    headerGrid.style.padding = "0 0 4px 0";
    headerGrid.style.position = "sticky";
    headerGrid.style.top = "0";
    headerGrid.append(
      mkHeadCell("Item", "left"),
      mkHeadCell("Rarity"),
      mkHeadCell("Notify")
    );
    card.appendChild(headerGrid);
    const bodyGrid = document.createElement("div");
    bodyGrid.style.display = "grid";
    bodyGrid.style.gridTemplateColumns = COLS;
    bodyGrid.style.justifyContent = "start";
    bodyGrid.style.gridAutoRows = "auto";
    bodyGrid.style.alignContent = "start";
    bodyGrid.style.minHeight = "0";
    bodyGrid.style.height = "100%";
    bodyGrid.style.overflow = "auto";
    bodyGrid.style.overscrollBehavior = "contain";
    bodyGrid.style.width = "100%";
    bodyGrid.style.scrollbarGutter = "stable";
    card.appendChild(bodyGrid);
    const softUpdateRenderedRows = (next) => {
      const byId = new Map(next.rows.map((r) => [r.id, r]));
      const kids = Array.from(bodyGrid.children);
      for (let i = 0; i + 2 < kids.length; i += 3) {
        const itemCell = kids[i];
        const popupCell = kids[i + 2];
        const id = itemCell.dataset.id;
        const row = byId.get(id);
        if (!row) continue;
        const popupSwitch = popupCell.querySelector("label");
        if (popupSwitch) setSwitchVisual(popupSwitch, !!row.popup);
        itemCell.dataset.follow = row.followed ? "1" : "0";
        const capped = NotifierService.isIdCapped?.(id) ?? false;
        if (popupSwitch) setSwitchCapState(popupSwitch, capped);
      }
    };
    const syncHeaderToScrollbar = () => {
      const sbw = bodyGrid.offsetWidth - bodyGrid.clientWidth;
      headerGrid.style.boxSizing = "border-box";
      headerGrid.style.paddingRight = `${sbw}px`;
    };
    syncHeaderToScrollbar();
    new ResizeObserver(syncHeaderToScrollbar).observe(bodyGrid);
    window.addEventListener("resize", syncHeaderToScrollbar);
    let state2 = null;
    let renderedIds = /* @__PURE__ */ new Set();
    const getFilters = () => ({
      type: selType.value || "all",
      rarity: selRarity.value || "all"
    });
    const passesFilters = (rows) => NotifierService.filterRows(rows, getFilters());
    const mkItemCell = (row) => {
      const wrap2 = document.createElement("div");
      Object.assign(wrap2.style, {
        display: "flex",
        alignItems: "center",
        gap: "6px",
        padding: "4px 6px",
        borderBottom: "1px solid #ffffff12"
      });
      const ICON = 40;
      const iconWrap = document.createElement("div");
      Object.assign(iconWrap.style, {
        width: `${ICON}px`,
        height: `${ICON}px`,
        flex: `0 0 ${ICON}px`,
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        marginRight: "6px",
        aspectRatio: "1 / 1"
      });
      const afterColon = (s) => {
        const i = s.indexOf(":");
        return i >= 0 ? s.slice(i + 1) : s;
      };
      const useEmojiFallback = () => {
        iconWrap.replaceChildren();
        const span = document.createElement("span");
        span.textContent = row.type === "Seed" ? "\u{1F331}" : row.type === "Egg" ? "\u{1F95A}" : row.type === "Tool" ? "\u{1F9F0}" : "\u{1F3E0}";
        span.style.fontSize = `${Math.max(ICON - 3, 12)}px`;
        span.setAttribute("aria-hidden", "true");
        iconWrap.appendChild(span);
      };
      const makeImg = (src2) => {
        const img = new Image();
        img.src = src2;
        img.width = ICON;
        img.height = ICON;
        img.alt = row.name;
        img.decoding = "async";
        img.loading = "lazy";
        img.draggable = false;
        Object.assign(img.style, {
          width: "100%",
          height: "100%",
          objectFit: "contain"
        });
        img.onerror = useEmojiFallback;
        return img;
      };
      const src = (() => {
        switch (row.type) {
          case "Seed":
            return seedImageFromSpecies(afterColon(row.id));
          case "Egg":
            return eggImageFromEggId(afterColon(row.id));
          case "Tool":
            return toolImageFromId(afterColon(row.id));
          case "Decor":
            return decorImageFromId(afterColon(row.id));
        }
      })();
      if (src) iconWrap.appendChild(makeImg(src));
      else useEmojiFallback();
      const col = document.createElement("div");
      Object.assign(col.style, {
        display: "grid",
        gridTemplateRows: "auto auto",
        lineHeight: "1.15",
        minWidth: "0"
        // autorise l'ellipsis
      });
      const title = document.createElement("div");
      title.textContent = row.name;
      Object.assign(title.style, {
        fontWeight: "700",
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      });
      const sub = document.createElement("div");
      sub.textContent = row.type;
      sub.style.opacity = "0.7";
      sub.style.fontSize = "12px";
      col.append(title, sub);
      wrap2.append(iconWrap, col);
      return wrap2;
    };
    const addRow = (row) => {
      const itemCell = mkItemCell(row);
      itemCell.dataset.id = row.id;
      itemCell.dataset.type = row.type;
      itemCell.dataset.follow = row.followed ? "1" : "0";
      const rarityCell = document.createElement("div");
      rarityCell.style.display = "flex";
      rarityCell.style.alignItems = "center";
      rarityCell.style.justifyContent = "center";
      rarityCell.style.borderBottom = "1px solid #ffffff12";
      rarityCell.appendChild(rarityBadge(String(row.rarity ?? "\u2014")));
      const popupSwitch = mkSwitch(`shop.row.${row.id}.popup`, (on) => {
        try {
          NotifierService.setPopup(row.id, !!on);
        } catch {
        }
        const cur2 = NotifierService.getPref(row.id);
        itemCell.dataset.follow = cur2.followed ? "1" : "0";
      });
      setSwitchVisual(popupSwitch, !!row.popup);
      popupSwitch.style.padding = "0";
      const popupCell = wrapCell(popupSwitch);
      const capped = NotifierService.isIdCapped?.(row.id) ?? false;
      setSwitchCapState(popupSwitch, capped);
      bodyGrid.append(itemCell, rarityCell, popupCell);
    };
    function clearBody() {
      bodyGrid.innerHTML = "";
      renderedIds = /* @__PURE__ */ new Set();
    }
    function renderEmpty() {
      const empty = document.createElement("div");
      empty.textContent = "No items.";
      empty.style.opacity = "0.75";
      empty.style.gridColumn = "1 / -1";
      empty.style.padding = "8px";
      bodyGrid.appendChild(empty);
    }
    function rebuildGrid() {
      clearBody();
      if (!state2) {
        renderEmpty();
        return;
      }
      const rows = passesFilters(state2.rows);
      if (!rows.length) {
        renderEmpty();
      } else {
        rows.forEach((r) => {
          addRow(r);
          renderedIds.add(r.id);
        });
      }
      followedBadge.textContent = `Followed: ${state2.counts.followed}`;
      syncHeaderToScrollbar();
    }
    function softUpdateBadge(next) {
      followedBadge.textContent = `Followed: ${next.counts.followed}`;
    }
    function filteredIdSet(s) {
      const set2 = /* @__PURE__ */ new Set();
      for (const r of passesFilters(s.rows)) set2.add(r.id);
      return set2;
    }
    let unsub = null;
    (async () => {
      try {
        await NotifierService.start();
      } catch {
      }
      unsub = await NotifierService.onChangeNow((s) => {
        const prev = state2;
        state2 = s;
        if (!prev) {
          rebuildGrid();
          softUpdateRenderedRows(state2);
          return;
        }
        const prevIds = renderedIds;
        const nextIds = filteredIdSet(s);
        let needRebuild = false;
        if (prevIds.size !== nextIds.size) needRebuild = true;
        else {
          for (const id of nextIds) if (!prevIds.has(id)) {
            needRebuild = true;
            break;
          }
        }
        if (needRebuild) {
          rebuildGrid();
        } else {
          softUpdateBadge(s);
          softUpdateRenderedRows(s);
        }
      });
    })();
    const onFilterChange = () => {
      if (state2) rebuildGrid();
    };
    selType.onchange = onFilterChange;
    selRarity.onchange = onFilterChange;
    view.__cleanup__ = (() => {
      const prev = view.__cleanup__;
      return () => {
        try {
          unsub?.();
        } catch {
        }
        try {
          prev?.();
        } catch {
        }
      };
    })();
  }
  function renderNotifierMenu(root) {
    const ui = new Menu({ id: "alerts", compact: true, windowSelector: ".qws-win" });
    ui.addTab("shops", "\u{1F6D2} Shops", (view) => renderShopTab(view, ui));
    ui.mount(root);
  }

  // src/utils/antiafk.ts
  function createAntiAfkController(deps) {
    const STOP_EVENTS = ["visibilitychange", "blur", "focus", "focusout", "pagehide", "freeze", "resume", "mouseleave", "mouseenter"];
    const listeners = [];
    function swallowAll() {
      const add = (target, t) => {
        const h = (e) => {
          e.stopImmediatePropagation();
          e.preventDefault?.();
        };
        target.addEventListener(t, h, { capture: true });
        listeners.push({ t, h, target });
      };
      STOP_EVENTS.forEach((t) => {
        add(document, t);
        add(window, t);
      });
    }
    function unswallowAll() {
      for (const { t, h, target } of listeners) try {
        target.removeEventListener(t, h, { capture: true });
      } catch {
      }
      listeners.length = 0;
    }
    const docProto = Object.getPrototypeOf(document);
    const saved = {
      hidden: Object.getOwnPropertyDescriptor(docProto, "hidden"),
      visibilityState: Object.getOwnPropertyDescriptor(docProto, "visibilityState"),
      hasFocus: document.hasFocus ? document.hasFocus.bind(document) : null
    };
    function patchProps() {
      try {
        Object.defineProperty(docProto, "hidden", { configurable: true, get() {
          return false;
        } });
      } catch {
      }
      try {
        Object.defineProperty(docProto, "visibilityState", { configurable: true, get() {
          return "visible";
        } });
      } catch {
      }
      try {
        document.hasFocus = () => true;
      } catch {
      }
    }
    function restoreProps() {
      try {
        if (saved.hidden) Object.defineProperty(docProto, "hidden", saved.hidden);
      } catch {
      }
      try {
        if (saved.visibilityState) Object.defineProperty(docProto, "visibilityState", saved.visibilityState);
      } catch {
      }
      try {
        if (saved.hasFocus) document.hasFocus = saved.hasFocus;
      } catch {
      }
    }
    let audioCtx = null;
    let osc = null;
    let gain = null;
    const resumeIfSuspended = () => {
      if (audioCtx && audioCtx.state !== "running") audioCtx.resume?.().catch(() => {
      });
    };
    function startAudioKeepAlive() {
      try {
        audioCtx = new (window.AudioContext || window.webkitAudioContext)({ latencyHint: "interactive" });
        gain = audioCtx.createGain();
        gain.gain.value = 1e-5;
        osc = audioCtx.createOscillator();
        osc.frequency.value = 1;
        osc.connect(gain).connect(audioCtx.destination);
        osc.start();
        document.addEventListener("visibilitychange", resumeIfSuspended, { capture: true });
        window.addEventListener("focus", resumeIfSuspended, { capture: true });
      } catch {
        stopAudioKeepAlive();
      }
    }
    function stopAudioKeepAlive() {
      try {
        osc?.stop();
      } catch {
      }
      try {
        osc?.disconnect();
        gain?.disconnect();
      } catch {
      }
      try {
        audioCtx?.close?.();
      } catch {
      }
      document.removeEventListener("visibilitychange", resumeIfSuspended, { capture: true });
      window.removeEventListener("focus", resumeIfSuspended, { capture: true });
      osc = null;
      gain = null;
      audioCtx = null;
    }
    let hb = null;
    function startHeartbeat() {
      const targetEl = document.querySelector("canvas") || document.body || document.documentElement;
      hb = window.setInterval(() => {
        try {
          targetEl.dispatchEvent(new MouseEvent("mousemove", { bubbles: true, clientX: 1, clientY: 1 }));
        } catch {
        }
      }, 25e3);
    }
    function stopHeartbeat() {
      if (hb !== null) {
        clearInterval(hb);
        hb = null;
      }
    }
    let pingTimer = null;
    async function pingPosition() {
      try {
        const cur2 = await deps.getPosition();
        if (!cur2) return;
        await deps.move(Math.round(cur2.x), Math.round(cur2.y));
      } catch {
      }
    }
    function startPing() {
      pingTimer = window.setInterval(pingPosition, 6e4);
      void pingPosition();
    }
    function stopPing() {
      if (pingTimer !== null) {
        clearInterval(pingTimer);
        pingTimer = null;
      }
    }
    return {
      start() {
        patchProps();
        swallowAll();
        startAudioKeepAlive();
        startHeartbeat();
        startPing();
      },
      stop() {
        stopPing();
        stopHeartbeat();
        stopAudioKeepAlive();
        unswallowAll();
        restoreProps();
      }
    };
  }

  // src/main.ts
  (async function() {
    "use strict";
    installPageWebSocketHook();
    mountHUD({
      onRegister(register) {
        register("players", "\u{1F465} Players", renderPlayersMenu);
        register("pets", "\u{1F43E} Pets", renderPetsMenu);
        register("alerts", "\u{1F514} Alerts", renderNotifierMenu);
        register("misc", "\u{1F9E9} Misc", renderMiscMenu);
        register("debug-data", "\u{1F527} Debug Data", renderDebugDataMenu);
      }
    });
    initWatchers();
    const antiAfk = createAntiAfkController({
      getPosition: () => PlayerService.getPosition(),
      move: (x, y) => PlayerService.move(x, y)
    });
    antiAfk.start();
  })();
})();
